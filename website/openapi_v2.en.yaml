
openapi: "3.1.0"
servers:
  - url: https://www.facturapi.io/v2
info:
  title: Facturapi
  version: "2.0"
  contact:
    name: Facturapi
    url: https://www.facturapi.io
    email: "soporte@facturapi.io"
  x-logo:
    url: https://www.facturapi.io/img/logo.svg
    altText: Facturapi
  description: |
    <br />
      <br />

      On this page, we list all the methods available in the Facturapi API, as
      well as the complete reference of the parameters you can send. To see the
      nested properties of an object or an array of objects, you can click on
      the field name to expand it.

      The Facturapi API is designed with the
      [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST) standard in
      mind. The API endpoints are grouped by resources, have predictable URLs,
      the responses are in JSON format, and we use standard HTTP response codes,
      authentication, and verbs.

      During development, you can use the Facturapi API in the Test environment, and the invoices you issue will not be sent to the SAT (Mexican Tax Authority) and will not have fiscal validity.
      
      The secret key you use to authenticate will determine both the environment in which the invoice will be created (Test or Live), as well as the organization to use as the issuer of your invoice or as the owner of the resource you request to create.

tags:
  - name: tools
    x-displayName: Tools
  - name: customer
    x-displayName: Customers
  - name: product
    x-displayName: Products
  - name: invoice
    x-displayName: Invoices
  - name: receipt
    x-displayName: E-Receipts
  - name: retention
    x-displayName: Retentions
  - name: organization
    x-displayName: Organizations
  - name: webhooks
    x-displayName: Webhooks
  - name: events
    x-displayName: Events
    description: |
      Events occur when Facturapi performs an operation asynchronously, outside the lifecycle of an API request.

      To receive these events on your server, you can register a listening URL by creating a Webhook from your dashboard: https://dashboard.facturapi.io/integration/webhooks
  - name: sat_keys
    x-displayName: Keys from SAT's catálogos
    description: |
      These are the main catalogs from SAT, included here for convenience. This is by no means the full list. You can find these and more catalogs on the official SAT website: http://omawww.sat.gob.mx/tramitesyservicios/Paginas/anexo_20_version3-3.htm
      
      ### Forma de Pago

      (Payment Form)

      Key  | Description (Spanish) | Description (English)
      :---:|:----------------------|:---------------------
      "01" | Efectivo | Cash
      "02" | Cheque nominativo | Nominal check
      "03" | Transferencia electrónica de fondos | Electronic transfer of funds
      "04" | Tarjeta de crédito | Credit card
      "05" | Monedero electrónico | Electronic wallet
      "06" | Dinero electrónico | Mobile payment
      "08" | Vales de despensa | Food vouchers
      "12" | Dación en pago | Payment in kind
      "13" | Pago por subrogación | Subrogation payment
      "14" | Pago por consignación | Consignment payment
      "15" | Condonación | Debt Forgiveness or Cancellation
      "17" | Compensación | Settling Debts with Existing Credits
      "23" | Novación | Novation
      "24" | Confusión | Confusion
      "25" | Remisión de deuda | Remission
      "26" | Prescripción o caducidad | Expiration of the term
      "27" | A satisfacción del acreedor | Satisfactory payment
      "28" | Tarjeta de débito | Debit card
      "29" | Servicio | Service payment
      "30" | Aplicación de anticipos | Application of advanced payments
      "31" | Intermediario pagos | Payment intermediation
      "99" | Por definir | Pending definition

      ### Método de Pago

      (Payment Method)

      Key | Description (Spanish) | Description (English)
      :-----:|:--------------------|:---------------------
      "PUE" | Pago en Una [sola] Exhibición | Payment in a single installment
      "PPD" | Pago en Parcialidades o Diferido | Payment in installments or deferred

      ### Uso del CFDI

      (CFDI use)
      
      Key | Description (Spanish) | Description (English) | Allowed Fiscal Regimes
      :-----:| ----------- | -----------
      "G01" | Adquisición de mercancías. | Purchase of goods | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "G02" | Devoluciones, descuentos y bonificaciones. | Returns, discounts and bonuses | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "G03" | Gastos en general. | General expenses | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I01" | Construcciones. | Constructions | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I02" | Mobiliario y equipo de oficina por inversiones. | Furniture and office equipment for investments | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I03" | Equipo de transporte. | Transportation equipment | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I04" | Equipo de computo y accesorios. | Computer equipment and accessories | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I05" | Dados, troqueles, moldes, matrices y herramental. | Dies, molds, matrices and tools | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I06" | Comunicaciones telefónicas. | Telephone communications | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I07" | Comunicaciones satelitales. | Satellite communications | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I08" | Otra maquinaria y equipo. | Other machinery and equipment | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "D01" | Honorarios médicos, dentales y gastos hospitalarios. | Medical, dental and hospital expenses. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D02" | Gastos médicos por incapacidad o discapacidad. | Medical expenses for disability. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D03" | Gastos funerales. | Funeral expenses. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D04" | Donativos. | Donations. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D05" | Intereses reales efectivamente pagados por créditos hipotecarios (casa habitación). | Real interest actually paid for mortgage loans (housing). | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D06" | Aportaciones voluntarias al SAR. | Voluntary contributions to the SAR. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D07" | Primas por seguros de gastos médicos. | Premiums for medical expenses insurance. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D08" | Gastos de transportación escolar obligatoria. | Mandatory school transportation expenses. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D09" | Depósitos en cuentas para el ahorro, primas que tengan como base planes de pensiones. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D10" | Pagos por servicios educativos (colegiaturas). | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "S01" | Sin efectos fiscales.  | 601, 603, 605, 606, 608, 610, 611, 612, 614, 616, 620, 621, 622, 623, 624, 607, 615, 625, 626
      "CP01" | Pagos |  601, 603, 605, 606, 608, 610, 611, 612, 614, 616, 620, 621, 622, 623, 624, 607, 615, 625, 626
      "CN01" | Nómina | 605

      ### Relación entre facturas

      (Relation between invoices)

      Key | Description (Spanish) | Description (English)
      :-----:|:-----------|:-----------
      "01" | Nota de crédito de los documentos relacionados | Credit note of the related documents
      "02" | Nota de débito de los documentos relacionados | Debit note of the related documents
      "03" | Devolución de mercancía sobre facturas o traslados previos | Return of goods on invoices or previous transfers
      "04" | Sustitución de los CFDI previos | Replacement of previous CFDI
      "05" | Traslados de mercancias facturados previamente | Transfers of goods previously invoiced
      "06" | Factura generada por los traslados previos | Invoice generated by previous transfers
      "07" | CFDI por aplicación de anticipo | CFDI by advance payment application
      "08" | Factura generada por pagos en parcialidades | Invoice generated by payments in installments
      "09" | Factura generada por pagos diferidos | Invoice generated by deferred payments

      ### Régimen Fiscal

      (Fiscal Regimes or Tax Systems)

      Key | Description (Spanish) | Description (English)
      :-----:|:-----------|:-----------
      "601" |	General de Ley Personas Morales |	General Law of Legal Entities
      "603" |	Personas Morales con Fines no Lucrativos |	Non-profit Legal Entities
      "605" |	Sueldos y Salarios e Ingresos Asimilados a Salarios |	Wages and Salaries and Assimilated Income
      "606" |	Arrendamiento |	Rent
      "608" |	Demás ingresos |	Other income
      "609" |	Consolidación |	Consolidation
      "610" |	Residentes en el Extranjero sin Establecimiento Permanente en México |	Non-residents with no Permanent Establishment in Mexico
      "611" |	Ingresos por Dividendos (socios y accionistas) |	Dividends (partners and shareholders)
      "612" |	Personas Físicas con Actividades Empresariales y Profesionales |	Individuals with Business and Professional Activities
      "614" |	Ingresos por intereses |	Interest income
      "616" |	Sin obligaciones fiscales |	No tax obligations
      "620" |	Sociedades Cooperativas de Producción que optan por diferir sus ingresos |	Production Cooperatives that choose to defer their income
      "621" |	Incorporación Fiscal |	Fiscal Incorporation
      "622" |	Actividades Agrícolas, Ganaderas, Silvícolas y Pesqueras |	Agricultural, Livestock, Forestry and Fishing Activities
      "623" |	Opcional para Grupos de Sociedades |	Optional for Groups of Companies
      "624" |	Coordinados |	Coordinated
      "628" |	Hidrocarburos |	Hydrocarbons
      "607" |	Régimen de Enajenación o Adquisición de Bienes |	Regime of Alienation or Acquisition of Goods
      "629" |	De los Regímenes Fiscales Preferentes y de las Empresas Multinacionales |	Of Preferential Tax Regimes and Multinational Companies
      "630" |	Enajenación de acciones en bolsa de valores |	Sale of shares on the stock exchange
      "615" |	Régimen de los ingresos por obtención de premios |	Regime of income from obtaining prizes
      "625" |	Régimen de las Actividades Empresariales con ingresos a través de Plataformas Tecnológicas |	Regime of Business Activities with income through Technological Platforms
      "626" | Régimen Simplificado de Confianza | Simplified Trust Regime

      ### Meses y bimestres

      (Months and bimesters)

      Key | Description (Spanish) | Description (English)
      :-----:| ----------- | -----------
      01 | Enero | January
      02 | Febrero | February
      03 | Marzo | March
      04 | Abril | April
      05 | Mayo | May
      06 | Junio | June
      07 | Julio | July
      08 | Agosto | August
      09 | Septiembre | September
      10 | Octubre | October
      11 | Noviembre | November
      12 | Diciembre | December
      13 | Enero-Febrero | January-February
      14 | Marzo-Abril | March-April
      15 | Mayo-Junio | May-June
      16 | Julio-Agosto | July-August
      17 | Septiembre-Octubre | September-October
      18 | Noviembre-Diciembre | November-December

      ### Tipo de Contrato

      (Type of Contract)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "01" | Contrato de trabajo por tiempo indeterminado | Indefinite term employment contract
      "02" | Contrato de trabajo para obra determinada | Employment contract for a specific work
      "03" | Contrato de trabajo por tiempo determinado | Employment contract for a fixed term
      "04" | Contrato de trabajo por temporada | Seasonal employment contract
      "05" | Contrato de trabajo sujeto a prueba | Employment contract subject to trial
      "06" | Contrato de trabajo con capacitación inicial | Employment contract with initial training
      "07" | Modalidad de contratación por pago de hora laborada | Modality of hiring by payment of hours worked
      "08" | Modalidad de trabajo por comisión laboral | Labor commission work modality
      "09" | Modalidades de contratación donde no existe relación de trabajo | Hiring modalities where there is no employment relationship
      "10" | Jubilación, pensión, retiro. | Retirement, pension, retirement.
      "99" | Otro contrato | Other contract

      ### Tipo de Jornada

      (Type of Labor Day)

      Key | Description (Spanish) | Description (English)
      :-----:| ----------- | -----------
      "01" | Diurna | Daytime
      "02" | Nocturna | Night
      "03" | Mixta | Mixed
      "04" | Por hora | By the hour
      "05" | Reducida | Reduced
      "06" | Continuada | Continued
      "07" | Partida | Split
      "08" | Por turnos | By shifts
      "99" | Otra Jornada | Other day

      ### Tipo de Régimen

      (Type of Regime)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "02" | Sueldos (Incluye ingresos señalados en la fracción I del artículo 94 de LISR) | Salaries (Includes income referred to in section I of article 94 of LISR)
      "03" | Jubilados | Retirees
      "04" | Pensionados | Pensioners
      "05" | Asimilados Miembros Sociedades Cooperativas Produccion | Assimilated Members of Production Cooperatives
      "06" | Asimilados Integrantes Sociedades Asociaciones Civiles | Assimilated Members of Civil Associations
      "07" | Asimilados Miembros Consejos Administración Sociedades Mercantiles | Assimilated Members of the Boards of Directors of Commercial Companies
      "08" | Asimilados comisionistas | Assimilated commission agents
      "09" | Asimilados Honorarios | Assimilated Fees
      "10" | Asimilados acciones | Assimilated shares
      "11" | Asimilados otros | Assimilated others
      "12" | Jubilados o Pensionados | Retirees or Pensioners
      "13" | Indemnización o Separación | Compensation or Separation
      "99" | Otro Regimen | Other Regime

      ### Riesgo del Puesto

      (Risk of the Position)

      Key | Description (Spanish) | Description (English)
      :-----:| ----------- | -----------
      "1" | Clase I | Class I
      "2" | Clase II | Class II
      "3" | Clase III | Class III
      "4" | Clase IV | Class IV
      "5" | Clase V | Class V
      "99" | No aplica | Does not apply

      ### Periodicidad del Pago

      (Payment Frequency)

      Key | Description (Spanish) | Description (English)
      :-----:| ----------- | -----------
      "01" | Diario | Daily
      "02" | Semanal | Weekly
      "03" | Catorcenal | Biweekly
      "04" | Quincenal | Fortnightly
      "05" | Mensual | Monthly
      "06" | Bimestral | Bimonthly
      "07" | Unidad obra | Work unit
      "08" | Comisión | Commission
      "09" | Precio alzado | Fixed price
      "10" | Decenal | Ten-day
      "99" | Otra Periodicidad | Other Frequency

      ### Tipo de Percepción

      (Type of Earnings)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "001" | Sueldos, Salarios  Rayas y Jornales | Wages, Salaries, Stripes and Wages
      "002" | Gratificación Anual (Aguinaldo) | Annual Bonus (Aguinaldo)
      "003" | Participación de los Trabajadores en las Utilidades PTU | Participation of Workers in Profits PTU
      "004" | Reembolso de Gastos Médicos Dentales y Hospitalarios | Reimbursement of Medical, Dental and Hospital Expenses
      "005" | Fondo de Ahorro | Savings Fund
      "006" | Caja de ahorro | Savings box
      "009" | Contribuciones a Cargo del Trabajador Pagadas por el Patrón | Contributions to be paid by the Worker Paid by the Employer
      "010" | Premios por puntualidad | Punctuality Awards
      "011" | Prima de Seguro de vida | Life Insurance Premium
      "012" | Seguro de Gastos Médicos Mayores | Major Medical Expenses Insurance
      "013" | Cuotas Sindicales Pagadas por el Patrón | Union Dues Paid by the Employer
      "014" | Subsidios por incapacidad | Disability Subsidies
      "015" | Becas para trabajadores y/o hijos | Scholarships for workers and / or children
      "019" | Horas extra | Extra hours
      "020" | Prima dominical | Sunday premium
      "021" | Prima vacacional | Vacation premium
      "022" | Prima por antigüedad | Seniority premium
      "023" | Pagos por separación | Separation payments
      "024" | Seguro de retiro | Retirement insurance
      "025" | Indemnizaciones | Indemnities
      "026" | Reembolso por funeral | Funeral refund
      "027" | Cuotas de seguridad social pagadas por el patrón | Social security fees paid by the employer
      "028" | Comisiones | Commissions
      "029" | Vales de despensa | Food vouchers
      "030" | Vales de restaurante | Restaurant vouchers
      "031" | Vales de gasolina | Gasoline vouchers
      "032" | Vales de ropa | Clothing vouchers
      "033" | Ayuda para renta | Help for rent
      "034" | Ayuda para artículos escolares | Help for school supplies
      "035" | Ayuda para anteojos | Help for glasses
      "036" | Ayuda para transporte | Transportation help
      "037" | Ayuda para gastos de funeral | Help for funeral expenses
      "038" | Otros ingresos por salarios | Other income from salaries
      "039" | Jubilaciones, pensiones o haberes de retiro en una sola exhibición | Retirement, pensions or retirement benefits in a single exhibition
      "044" | Jubilaciones, pensiones o haberes de retiro en parcialidades | Retirement, pensions or retirement benefits in installments
      "045" | Ingresos en acciones o títulos valor que representan bienes | Income in shares or securities representing goods
      "046" | Ingresos asimilados a salarios | Income assimilated to salaries
      "047" | Alimentación diferentes a los establecidos en el Art 94 último párrafo LISR | Food other than those established in Art 94 last paragraph LISR
      "048" | Habitación | Room
      "049" | Premios por asistencia | Attendance awards
      "050" | Viáticos | Travel allowances
      "051" | Pagos por gratificaciones, primas, compensaciones, recompensas u otros en parcialidades | Payments for bonuses, bonuses, compensations, rewards or others in installments
      "052" | Pagos por jubilación en parcialidades derivados de una resolución judicial | Retirement payments in installments derived from a judicial resolution
      "053" | Pagos por jubilación en una sola exhibición derivados de la ejecución de una resolución judicial | Retirement payments in a single exhibition derived from the execution of a judicial resolution

      ### Tipo de Horas

      (Type of Hours)

      Key | Description (Spanish) | Description (English)
      :-----:| ----------- | -----------
      "01" | Dobles | Doubles
      "02" | Triples | Triples
      "03" | Simples | Singles

      ### Tipo de Deducción

      (Type of Deduction)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "001" | Seguridad social | Social security
      "002" | ISR | ISR (Income Tax)
      "003" | Aportaciones a retiro, cesantía en edad avanzada y vejez. | Contributions to retirement, old age and old age.
      "004" | Otros | Others
      "005" | Aportaciones a Fondo de vivienda | Contributions to Housing Fund
      "006" | Descuento por incapacidad | Disability discount
      "007" | Pensión alimenticia | Alimony
      "008" | Renta | Rent
      "009" | Préstamos provenientes del Fondo Nacional de la Vivienda para los Trabajadores | Loans from the National Housing Fund for Workers
      "010" | Pago por crédito de vivienda | Payment for housing credit
      "011" | Pago de abonos INFONACOT | Payment of INFONACOT installments
      "012" | Anticipo de salarios | Salary advance
      "013" | Pagos hechos con exceso al trabajador | Payments made in excess to the worker
      "014" | Errores | Errors
      "015" | Pérdidas | Losses
      "016" | Averías | Breakdowns
      "017" | Adquisición de artículos producidos por la empresa o establecimiento | Acquisition of items produced by the company or establishment
      "018" | Cuotas para la constitución y fomento de sociedades cooperativas y de cajas de ahorro | Fees for the constitution and promotion of cooperative societies and savings banks
      "019" | Cuotas sindicales | Union fees
      "020" | Ausencia (Ausentismo) | Absence (Absenteeism)
      "021" | Cuotas obrero patronales | Worker-employer fees
      "022" | Impuestos Locales | Local Taxes
      "023" | Aportaciones voluntarias al SAR | Voluntary contributions to the SAR
      "024" | Ajuste en Gratificación Anual (Aguinaldo) Exento | Adjustment in Annual Bonus (Aguinaldo) Exempt
      "025" | Ajuste en Gratificación Anual (Aguinaldo) Gravado | Adjustment in Annual Bonus (Aguinaldo) Taxed
      "026" | Ajuste en Participación de los Trabajadores en las Utilidades PTU Exento | Adjustment in Workers' Participation in Profits PTU Exempt
      "027" | Ajuste en Participación de los Trabajadores en las Utilidades PTU Gravado | Adjustment in Workers' Participation in Profits PTU Taxed
      "028" | Ajuste en Reembolso de Gastos Médicos Dentales y Hospitalarios Exento | Adjustment in Reimbursement of Medical, Dental and Hospital Expenses Exempt
      "029" | Ajuste en Fondo de ahorro Exento | Adjustment in Savings Fund Exempt
      "030" | Ajuste en Caja de ahorro Exento | Adjustment in Savings Box Exempt
      "031" | Ajuste en Contribuciones a Cargo del Trabajador Pagadas por el Patrón Exento | Adjustment in Contributions to be paid by the Worker Paid by the Employer Exempt
      "032" | Ajuste en Premios por puntualidad Gravado | Adjustment in Punctuality Awards Taxed
      "033" | Ajuste en Prima de Seguro de vida Exento | Adjustment in Life Insurance Premium Exempt
      "034" | Ajuste en Seguro de Gastos Médicos Mayores Exento | Adjustment in Major Medical Expenses Insurance Exempt
      "035" | Ajuste en Cuotas Sindicales Pagadas por el Patrón Exento | Adjustment in Union Dues Paid by the Employer Exempt
      "036" | Ajuste en Subsidios por incapacidad Exento | Adjustment in Disability Subsidies Exempt
      "037" | Ajuste en Becas para trabajadores y/o hijos Exento | Adjustment in Scholarships for workers and / or children Exempt
      "038" | Ajuste en Horas extra Exento | Adjustment in Extra hours Exempt
      "039" | Ajuste en Horas extra Gravado | Adjustment in Extra hours Taxed
      "040" | Ajuste en Prima dominical Exento | Adjustment in Sunday premium Exempt
      "041" | Ajuste en Prima dominical Gravado | Adjustment in Sunday premium Taxed
      "042" | Ajuste en Prima vacacional Exento | Adjustment in Vacation premium Exempt
      "043" | Ajuste en Prima vacacional Gravado | Adjustment in Vacation premium Taxed
      "044" | Ajuste en Prima por antigüedad Exento | Adjustment in Seniority premium Exempt
      "045" | Ajuste en Prima por antigüedad Gravado | Adjustment in Seniority premium Taxed
      "046" | Ajuste en Pagos por separación Exento | Adjustment in Separation payments Exempt
      "047" | Ajuste en Pagos por separación Gravado | Adjustment in Separation payments Taxed
      "048" | Ajuste en Seguro de retiro Exento | Adjustment in Retirement insurance Exempt
      "049" | Ajuste en Indemnizaciones Exento | Adjustment in Indemnities Exempt
      "050" | Ajuste en Indemnizaciones Gravado | Adjustment in Indemnities Taxed
      "051" | Ajuste en Reembolso por funeral Exento | Adjustment in Funeral refund Exempt
      "052" | Ajuste en Cuotas de seguridad social pagadas por el patrón Exento | Adjustment in Social security fees paid by the employer Exempt
      "053" | Ajuste en Comisiones Gravado | Adjustment in Commissions Taxed
      "054" | Ajuste en Vales de despensa Exento | Adjustment in Food vouchers Exempt
      "055" | Ajuste en Vales de restaurante Exento | Adjustment in Restaurant vouchers Exempt
      "056" | Ajuste en Vales de gasolina Exento | Adjustment in Gasoline vouchers Exempt
      "057" | Ajuste en Vales de ropa Exento | Adjustment in Clothing vouchers Exempt
      "058" | Ajuste en Ayuda para renta Exento | Adjustment in Help for rent Exempt
      "059" | Ajuste en Ayuda para artículos escolares Exento | Adjustment in Help for school supplies Exempt
      "060" | Ajuste en Ayuda para anteojos Exento | Adjustment in Help for glasses Exempt
      "061" | Ajuste en Ayuda para transporte Exento | Adjustment in Transportation help Exempt
      "062" | Ajuste en Ayuda para gastos de funeral Exento | Adjustment in Help for funeral expenses Exempt
      "063" | Ajuste en Otros ingresos por salarios Exento | Adjustment in Other income from salaries Exempt
      "064" | Ajuste en Otros ingresos por salarios Gravado | Adjustment in Other income from salaries Taxed
      "065" | Ajuste en Jubilaciones, pensiones o haberes de retiro en una sola exhibición Exento | Adjustment in Retirement, pensions or retirement benefits in a single exhibition Exempt
      "066" | Ajuste en Jubilaciones, pensiones o haberes de retiro en una sola exhibición Gravado | Adjustment in Retirement, pensions or retirement benefits in a single exhibition Taxed
      "067" | Ajuste en Pagos por separación Acumulable | Adjustment in Separation payments Accumulable
      "068" | Ajuste en Pagos por separación No acumulable | Adjustment in Separation payments Non-accumulable
      "069" | Ajuste en Jubilaciones, pensiones o haberes de retiro en parcialidades Exento | Adjustment in Retirement, pensions or retirement benefits in installments Exempt
      "070" | Ajuste en Jubilaciones, pensiones o haberes de retiro en parcialidades Gravado | Adjustment in Retirement, pensions or retirement benefits in installments Taxed
      "071" | Ajuste en Subsidio para el empleo (efectivamente entregado al trabajador) | Adjustment in Employment subsidy (effectively delivered to the worker)
      "072" | Ajuste en Ingresos en acciones o títulos valor que representan bienes Exento | Adjustment in Income in shares or securities representing goods Exempt
      "073" | Ajuste en Ingresos en acciones o títulos valor que representan bienes Gravado | Adjustment in Income in shares or securities representing goods Taxed
      "074" | Ajuste en Alimentación Exento | Adjustment in Food Exempt
      "075" | Ajuste en Alimentación Gravado | Adjustment in Food Taxed
      "076" | Ajuste en Habitación Exento | Adjustment in Room Exempt
      "077" | Ajuste en Habitación Gravado | Adjustment in Room Taxed
      "078" | Ajuste en Premios por asistencia Exento | Adjustment in Attendance awards Exempt
      "079" | Ajuste en Pagos distintos a los listados Exento | Adjustment in Payments other than those listed Exempt
      "080" | Ajuste en Viáticos gravados | Adjustment in Taxable travel expenses
      "081" | Ajuste en Viáticos (entregados al trabajador) | Adjustment in Travel expenses (delivered to the worker)
      "082" | Ajuste en Fondo de ahorro Gravado | Adjustment in Savings Fund Taxed
      "083" | Ajuste en Caja de ahorro Gravado | Adjustment in Savings Box Taxed
      "084" | Ajuste en Prima de Seguro de vida Gravado | Adjustment in Life Insurance Premium Taxed
      "085" | Ajuste en Seguro de Gastos Médicos Mayores Gravado | Adjustment in Major Medical Expenses Insurance Taxed
      "086" | Ajuste en Subsidios por incapacidad Gravado | Adjustment in Disability Subsidies Taxed
      "087" | Ajuste en Becas para trabajadores y/o hijos Gravado | Adjustment in Scholarships for workers and / or children Taxed
      "088" | Ajuste en Seguro de retiro Gravado | Adjustment in Retirement insurance Taxed
      "089" | Ajuste en Vales de despensa Gravado | Adjustment in Food vouchers Taxed
      "090" | Ajuste en Vales de restaurante Gravado | Adjustment in Restaurant vouchers Taxed
      "091" | Ajuste en Vales de gasolina Gravado | Adjustment in Gasoline vouchers Taxed
      "092" | Ajuste en Vales de ropa Gravado | Adjustment in Clothing vouchers Taxed
      "093" | Ajuste en Ayuda para renta Gravado | Adjustment in Help for rent Taxed
      "094" | Ajuste en Ayuda para artículos escolares Gravado | Adjustment in Help for school supplies Taxed
      "095" | Ajuste en Ayuda para anteojos Gravado | Adjustment in Help for glasses Taxed
      "096" | Ajuste en Ayuda para transporte Gravado | Adjustment in Transportation help Taxed
      "097" | Ajuste en Ayuda para gastos de funeral Gravado | Adjustment in Help for funeral expenses Taxed
      "098" | Ajuste a ingresos asimilados a salarios gravados | Adjustment to income assimilated to taxed salaries
      "099" | Ajuste a ingresos por sueldos y salarios gravados | Adjustment to income for taxed wages and salaries
      "100" | Ajuste en Viáticos exentos | Adjustment in Exempt travel expenses
      "101" | ISR Retenido de ejercicio anterior | ISR Retained from previous exercise
      "102" | Ajuste a pagos por gratificaciones, primas, compensaciones, recompensas u otros gravados | Adjustment to payments for bonuses, bonuses, compensations, rewards or others taxed
      "103" | Ajuste a pagos en parcialidades derivados de una resolución judicial gravados | Adjustment to payments in installments derived from a judicial resolution taxed
      "104" | Ajuste a pagos en parcialidades derivados de una resolución judicial exentos | Adjustment to payments in installments derived from a judicial resolution exempt
      "105" | Ajuste a pagos en una sola exhibición derivados de una resolución judicial gravados | Adjustment to payments in a single exhibition derived from a judicial resolution taxed
      "106" | Ajuste a pagos en una sola exhibición derivados de una resolución judicial exentos | Adjustment to payments in a single exhibition derived from a judicial resolution exempt
      "107" | Ajuste al Subsidio Causado | Adjustment to Accrued Subsidy

      ### Tipo de Otro Pago

      (Type of Other Payment)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "001" | Reintegro de ISR pagado en exceso. | Refund of ISR paid in excess.
      "002" | Subsidio para el empleo (efectivamente entregado al trabajador). | Employment subsidy (effectively delivered to the worker).
      "003" | Viáticos (entregados al trabajador). | Travel expenses (delivered to the worker).
      "004" | Aplicación de saldo a favor por compensación anual. | Application of balance in favor by annual compensation.
      "005" | Reintegro de ISR retenido en exceso de ejercicio anterior | Refund of ISR retained in excess of previous exercise
      "006" | Alimentos en bienes (Servicios de comedor y comida). | Food in goods (Dining and food services).
      "007" | ISR ajustado por subsidio. | ISR adjusted by subsidy.
      "008" | Subsidio efectivamente entregado que no correspondía. | Subsidy effectively delivered that did not correspond.
      "009" | Reembolso de descuentos efectuados para el crédito de vivienda. | Refund of discounts made for housing credit.
      "999" | Pagos distintos a los listados. | Payments other than those listed.

      ### Tipo de Incapacidad

      (Type of Disability)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "01" | Riesgo de trabajo. | Work risk.
      "02" | Enfermedad en general. | General illness.
      "03" | Maternidad. | Maternity.
      "04" | Licencia por cuidados médicos de hijos diagnosticados con cáncer. | License for medical care of children diagnosed with cancer.

      ### Clave de retención

      (Retention Key)

      Key | Description (Spanish) | Description (English)
      :-----:|:----------- |:-----------
      "01" | Servicios profesionales. | Professional services.
      "02" | Regalías por derechos de autor. | Royalties for copyright.
      "03" | Autotransporte terrestre de carga. | Land cargo transportation.
      "04" | Servicios prestados por comisionistas. | Services provided by commission agents.
      "05" | Arrendamiento. | Lease.
      "06" | Enajenación de acciones. | Sale of shares.
      "07" | Enajenación de bienes objeto de la LIEPS, a través de mediadores, agentes, representantes, corredores, consignatarios o distribuidores. | Sale of goods subject to LIEPS, through mediators, agents, representatives, brokers, consignees or distributors.
      "08" | Enajenación de bienes inmuebles consignada en escritura pública. | Sale of real estate consigned in a public deed.
      "09" | Enajenación de otros bienes, no consignada en escritura pública. | Sale of other goods, not consigned in a public deed.
      "10" | Adquisición de desperdicios industriales. | Acquisition of industrial waste.
      "11" | Adquisición de bienes consignada en escritura pública. | Acquisition of goods consigned in a public deed.
      "12" | Adquisición de otros bienes, no consignada en escritura pública. | Acquisition of other goods, not consigned in a public deed.
      "13" | Otros retiros de AFORE. | Other withdrawals from AFORE.
      "14" | Dividendos o utilidades distribuidas. | Dividends or distributed profits.
      "15" | Remanente distribuible. | Distributable remnant.
      "16" | Intereses. | Interests.
      "17" | Arrendamiento en fideicomiso. | Lease in trust.
      "18" | Pagos realizados a favor de residentes en el extranjero. | Payments made in favor of residents abroad.
      "19" | Enajenación de acciones u operaciones en bolsa de valores. | Sale of shares or operations on the stock exchange.
      "20" | Obtención de premios. | Obtaining prizes.
      "21" | Fideicomisos que no realizan actividades empresariales. | Trusts that do not carry out business activities.
      "22" | Planes personales de retiro. | Personal retirement plans.
      "23" | Intereses reales deducibles por créditos hipotecarios. | Real interests deductible for mortgage loans.
      "24" | Operaciones Financieras Derivadas de Capital. | Capital Derivative Financial Operations.
      "25" | Otro tipo de retenciones. | Other types of retentions.
      "26" | Servicios mediante Plataformas Tecnológicas | Services through Technological Platforms

      ### Validez de obligaciones

      (Validity of obligations)

      | Validity | Exempt IVA | Rate 0% | Rate 8% Noth Border | Rate 8% South Border | Rate 16%
      |:-------:|:----------:|:-------:|:------------------------:|:----------------------:|:--------
      | "0" <td colspan="5">The taxpayer is not authorized to issue invoices</td>
      | "1" | Yes | Yes | No | No | Yes
      | "2" | Yes | Yes | Yes | No | Yes
      | "3" | Yes | Yes | No | Yes | Yes
      | "4" | Yes | Yes | Yes | Yes | Yes

      #### Situación del contribuyente

      (Taxpayer situation)

      | Value | Description
      |:-----:|:-----------|:-----------
      | "Previsto" (Announced) | The taxpayer receives a letter via tax mailbox or notifications by means of a notice board, in which his situation is established and he is asked to demonstrate the materiality of the invoiced operations.
      | "Presunto" (Pressumed) | The notified taxpayer is considered presumed when, on its website, the authority issues its data within the list of EFOS, that is, in the SAT's blacklists.
      | "Desvirtuado" (Disproved) | In this case, the taxpayer accused of non-existent operations has already provided the authority with the documentation and information necessary to refute the facts that led to the notification.
      | "Definitivo" (Definitive) | In this case, the EFO did not respond to the authority's call within 15 days, from the last notification; or could not refute the imputed facts.
      | "Sentencia favorable" (Favorable sentence) | Taxpayers EFOS "definitive" who are dissatisfied and file some means of defense, which concludes in their favor, are classified in the list of "favorable judgment".
      | "EFOS de información suprimida" (Redacted information EFOS) | In this category, the EFOS "presumed" and "definitive" are found that presented some means of defense (amparo, nullity trial) and, therefore, a judge ordered to suppress their data from the list, without being eliminated.

  - name: customer_model
    x-displayName: Customer object
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Customer" />
  - name: product_model
    x-displayName: Product object
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Product" />
  - name: invoice_model
    x-displayName: Invoice object
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Invoice" />
  - name: receipt_model
    x-displayName: Receipt object
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Receipt" />
  - name: retention_model
    x-displayName: Retention object
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Retention" />
  - name: organization_model
    x-displayName: Organization object
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Organization" />

x-tagGroups:
  - name: Resources
    tags:
      - customer
      - product
      - invoice
      - receipt
      - retention
      - organization
  - name: Tools
    tags:
      - tools
      - sat_keys
  - name: Webhooks
    tags:
      - events
      - webhooks
  - name: Models
    tags:
      - customer_model
      - product_model
      - invoice_model
      - receipt_model
      - retention_model
      - organization_model

paths:
  /customers:
    post:
      operationId: createCustomer
      tags:
        - customer
      summary: Create Customer
      description: |
        Register a new customer in Facturapi.

          This call validates that the fiscal data matches
          the records of the SAT for that RFC, otherwise the call
          will return an error indicating the issue.

          Once the customer is created and a response object is obtained,
          we recommend saving the ID in your database along with the customer information.
          Later, you can call the Create Invoice endpoint by passing the customer ID instead of repeating the information.
          
          Finally, keep in mind that the customers you create in the Test environment **are not shared**
          with the Live environment.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "legal_name": "Dunder Mifflin",
                    "email": "email@example.com",
                    "tax_id": "ABC101010111",
                    "tax_system": "601",
                    "address": {
                      "zip": "01234"
                    }
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.create({
              legal_name: 'Dunder Mifflin',
              email: 'email@example.com',
              tax_id: 'ABC101010111',
              tax_system: '601',
              address: {
                zip: '01234'
              }
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.CreateAsync(new Dictionary<string, object>
            {
              ["legal_name"] = "Dunder Mifflin",
              ["email"] = "email@example.com",
              ["tax_id"] = "ABC101010111",
              ["tax_system"] = "601",
              ["address"] = new Dictionary<string, object>
              {
                ["zip"] = "01234"
              }
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->create([
              "email" => "email@example.com",
              "legal_name" => "Dunder Mifflin",
              "tax_id" => "ABC101010111",
              "tax_system" => "601",
              "address" => [
                "zip" => "01234"
              ]
            ]);
      requestBody:
        $ref: "#/components/requestBodies/CustomerCreate"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "201":
          description: New `Customer` object just created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "200":
          description: A previously-registered `Customer` object with the same information.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listCustomers
      tags:
        - customer
      summary: List customers
      description: Returns a paginated list of all customers in an organization or performs a search according to parameters.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -G \
              -d 'q=Dunder' \
              -d 'date[gt]=2021-07-14T06:00:00.000Z' \
              -d 'date[lt]=2021-08-14T06:00:00.000Z' \
              -d 'page=1'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const searchResult = await facturapi.customers.list({
              q: 'Dunder',
              date: {
                gt: new Date('2021-07-14T06:00:00.000Z'),
                lt: new Date('2021-08-14T06:00:00.000Z')
              },
              page: 1
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var searchResult = await facturapi.Customer.ListAsync(new Dictionary<string, object>
            {
              ["q"] = "Dunder",
              ["date"] = new Dictionary<string, object>
                {
                  ["gt"] = new DateTime("2021-07-14T06:00:00.000Z"),
                  ["lt"] = new DateTime("2021-08-14T06:00:00.000Z")
                },
              ["page"] = 1
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $searchResult = $facturapi->Customers->all([
              "q" => "Dunder",
              "date" => [
                "gt" => new DateTime("2021-07-14T06:00:00.000Z"),
                "lt" => new DateTime("2021-08-14T06:00:00.000Z")
              ],
              "page" => 1
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Free text field. Search word matches with `legal_name` or `tax_id` fields.
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /customers/{customer_id}:
    get:
      operationId: getCustomer
      tags:
        - customer
      summary: Retrieve customer by ID
      description: Returns the 'Customer' object with the specified ID. If the customer does not exist, a 404 error will be returned.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.retrieve('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.RetrieveAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->retrieve( "5a3ee743f508333611ad6b3c" );
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: Customer ID
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Customer` object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: editCustomer
      tags:
        - customer
      summary: Edit Customer
      description: Updates the information of an existing customer, setting only the values for the paramenters that are sent. Undefined values will not be modified.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
              -X PUT
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "email": "jdoe@example.com",
                    "address": {
                      "street": "Santa Monica Ave."
                    }
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.update(
              '590ce6c56d04f840aa8438af',
              {
                email: 'jdoe@example.com',
                address: {
                  street: 'Santa Monica Ave.'
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.UpdateAsync(
              "590ce6c56d04f840aa8438af",
              new Dictionary<string, object>
              {
                ["email"] = "jdoe@example.com",
                ["address"] = new Dictionary<string, object>
                {
                  ["street"] = "Santa Monica Ave."
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->update("590ce6c56d04f840aa8438af", [
              "email" => "jdoe@example.com",
              "legal_name" => "Dunder Mifflin",
              "address" => [
                "street" => "Santa Monica Ave."
              ]
            ]);
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID of the object to edit
      requestBody:
        $ref: "#/components/requestBodies/CustomerEdit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Customer` object edited successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCustomer
      tags:
        - customer
      summary: Delete Customer
      description: Deletes a customer. The invoices linked to the customer will **not** be deleted.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const removedCustomer = await facturapi.customers.del('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.DeleteAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Customers->delete( "5a3fefd9f508333611ad6b43" );
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID of the object to delete
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Customer` object deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /customers/{customer_id}/tax-info-validation:
    get:
      operationId: validateCustomerTaxInfo
      tags:
        - customer
      summary: Validate Customer Tax Info
      description: |
        Validates that the customer's fiscal information matches the SAT records.

        Its main function is to validate that the registered customer data continues to meet the SAT validation.
        
        > **Note:**
        > The operations of creating a customer, editing a customer, and creating an invoice already perform a
        > validation of the customer's information, so it is **not** necessary to call this endpoint
        > before performing these operations.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af/tax-info-validation \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.validateTaxInfo('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.ValidateTaxInfoAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->validateTaxInfo( "5a3ee743f508333611ad6b3c" );
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID of the customer
      security:
        - "SecretLiveKey": []
      responses:
        "200":
          description: Validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_valid:
                    type: boolean
                    description: Indicates if the customer's fiscal information matches the SAT records
                    example: true
                  errors:
                    type: array
                    description: List of errors found in the validation
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Path to the field with the error
                          example: tax_system
                        message:
                          type: string
                          description: Error message
                          example: El RégimenFiscal no coincide con el registrado para el RFC en la lista de contribuyentes obligados del SAT.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /products:
    post:
      operationId: createProduct
      tags:
        - product
      summary: Create Product
      description: |
        Register a new product or service in your Facturapi catalog.

        You can use the product ID to create invoices without having to send all the product data each time.

        Keep in mind that the products you create in the Test environment **are not shared**
        with the Live environment.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "description": "Ukelele",
                    "product_key": "60131324",
                    "price": 345.60,
                    "sku": "ABC1234"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const product = await facturapi.products.create({
              description: 'Ukelele',
              product_key: '60131324',
              price: 345.60,
              sku: 'ABC1234'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.CreateAsync(new Dictionary<string, object>
            {
              ["description"] = "Ukelele",
              ["product_key"] = "60131324",
              ["price"] = 345.60,
              ["sku"] = "ABC1234"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $product = $facturapi->Products->create([
              "description" => "Ukelele",
              "product_key" => "60131324",
              "price" => 345.60,
              "sku" => "ABC1234"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ProductCreate"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: New `Product` object just created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listProducts
      tags:
        - product
      summary: List products
      description: Returns a paginated list of all products in an organization or performs a search according to parameters.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -G \
              -d 'q=ukelele' \
              -d 'page=1'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const searchResult = await facturapi.products.list({
              q: 'ukelele',
              page: 1
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var searchResult = await facturapi.Product.ListAsync(new Dictionary<string, object>
            {
              ["q"] = "ukelele",
              ["date"] = new Dictionary<string, object>
                {
                  ["gt"] = new DateTime("2021-07-14T06:00:00.000Z"),
                  ["lt"] = new DateTime("2021-08-14T06:00:00.000Z")
                },
              ["page"] = 1
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $searchResult = $facturapi->Products->all([
              "q" => "ukelele",
              "page" => 1
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Free text field. Search word matches with `description` or `sku` fields.
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /products/{product_id}:
    get:
      operationId: getProduct
      tags:
        - product
      summary: Retrieve product by ID
      description: Returns the `Product` object with the specified ID. If the product does not exist, a 404 error will be returned.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const product = await facturapi.products.retrieve('590e22c26d04f840aa8438b2');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.RetrieveAsync("590e22c26d04f840aa8438b2");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $product = $facturapi->Product->retrieve( "590e22c26d04f840aa8438b2" );
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
          description: Product ID
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Product` object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: editProduct
      tags:
        - product
      summary: Edit product
      description: |
        Updates the information of an existing product, setting only the values for the paramenters that are sent. Undefined values will not be modified.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
              -X PUT \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "price": 456.70
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const product = await facturapi.products.update(
              '590e22c26d04f840aa8438b2',
              {
                email: 'jdoe@example.com',
                address: {
                  street: 'Santa Monica Ave.'
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.UpdateAsync(
              "590e22c26d04f840aa8438b2",
              new Dictionary<string, object>
              {
                ["price"] = 456.70
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $product = $facturapi->Products->update("590e22c26d04f840aa8438b2", [
              "price" => 456.70
            ]);
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
          description: Product ID
      requestBody:
        $ref: "#/components/requestBodies/ProductEdit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Product` object edited successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteProduct
      tags:
        - product
      summary: Delete Product
      description: |
        Deletes the product from your organization. The invoices linked with the product **will not** be deleted.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const removedProduct = await facturapi.products.del('590e22c26d04f840aa8438b2');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.DeleteAsync("590e22c26d04f840aa8438b2");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Products->delete( "590e22c26d04f840aa8438b2" );
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
          description: Product ID to delete
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Product` object deleted successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices:
    post:
      operationId: createInvoice
      tags:
        - invoice
      summary: Create invoice (CFDI 4.0)
      description: |
        Creates a new Invoice. If the invoice is created in the Live environment, it will be **stamped and sent to the SAT**.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "customer": {
                  "legal_name": "Dunder Mifflin",
                  "email": "email@example.com",
                  "tax_id": "ABC101010111",
                  "tax_system": "601",
                  "address": {
                    "zip": "85900"
                  }
                },
                "items": [{
                  "quantity": 2,
                  "product": {
                    "description": "Ukelele",
                    "product_key": "60131324",
                    "price": 345.60
                  }
                }],
                "payment_form": "06",
                "folio_number": 914,
                "series": "F"
              }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.create({
              customer: {
                legal_name: 'Dunder Mifflin',
                email: 'email@example.com',
                tax_id: 'ABC101010111',
                tax_system: '601',
                address: {
                  zip: '85900'
                }
              },
              items: [{
                quantity: 2,
                product: {
                  description: 'Ukelele',
                  product_key: '60131324',
                  price: 345.60
                }
              }],
              payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO,
              folio_number: 914,
              series: 'F'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.CreateAsync(new Dictionary<string, object>
            {
              ["customer"] = new Dictionary<string, object>
              {
                ["legal_name"] = "Dunder Mifflin",
                ["email"] = "email@example.com",
                ["tax_id"] = "ABC101010111",
                ["tax_system"] = "601",
                ["address"] = new Dictionary<string, object>
                {
                  ["zip"] = "85900"
                }
              },
              ["items"] = new Dictionary<string, object>[]
              {
                new Dictionary<string, object>
                {
                  ["product"] = new Dictionary<string, object>
                  {
                    ["description"] = "Ukelele",
                    ["product_key"] = "60131324",
                    ["price"] = 345.60
                  }
                }
              },
              ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO,
              ["folio_number"] = 914,
              ["series"] = "F"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->create([
              "customer" => [
                "legal_name" => "Dunder Mifflin",
                "email" => "email@example.com",
                "tax_id" => "ABC101010111",
                "tax_system" => "601",
                "address" => [
                  "zip" => "85900"
                ]
              ],
              "items" => [
                [
                  "quantity" => 2,
                  "product" => [
                    "description" => "Ukelele",
                    "product_key" => "60131324",
                    "price" => 420.69,
                    "sku" => "ABC4567"
                  ]
                ] // Add as many products as you want to include in your invoice
              ],
              "payment_form" => \Facturapi\PaymentForm::EFECTIVO,
              "folio_number" => 581,
              "series" => "F"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/InvoiceCreate"
      parameters:
        - in: query
          name: async
          schema:
            type: boolean
          required: false
          description: |
            Useful for large invoices. If sent `false` or not sent, the call will wait for the SAT to respond by stamping the invoice.
            If sent `true`, the call will return immediately with the `invoice` object in status `pending`, and its status can be checked
            for a change to `valid` at a later time.
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Invoice` object"
          required: true
          content:
            application/json:
              schema:
                type: object
                discriminator:
                  propertyName: status
                  mapping:
                    pending: "#/components/schemas/Invoice"
                    draft: "#/components/schemas/InvoiceDraft"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    
    get:
      operationId: listInvoices
      tags:
        - invoice
      summary: List invoices
      description: |
        Returns a paginated list of all invoices in an organization or performs a search according to parameters.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # All invoices from the organization
            curl "https://www.facturapi.io/v2/invoices" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY"

            # All invoices issued to a certain customer
            curl "https://www.facturapi.io/v2/invoices" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "customer=58e93bd8e86eb318b0197456"

            # Page 3 of the search results for free text
            # of invoices issued to a certain customer between 2017 and 2019
            curl "https://www.facturapi.io/v2/invoices" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "q=Aspiradora+Robot&customer=58e93bd8e86eb318b0197456&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // All invoices from the organization
            const invoiceSearch = await facturapi.invoices.list();

            // All invoices issued to a certain customer
            const invoiceSearch = await facturapi.invoices.list({
              customer: '590ce6c56d04f840aa8438af'
            });

            // Page 3 of the search results for free text
            // of invoices issued to a certain customer between 2017 and 2019
            const invoiceSearch = await facturapi.invoices.list({
              q: 'Aspiradora Robot',
              customer: '590ce6c56d04f840aa8438af',
              date: {
                gte: new Date('2017-01-01T00:00:00.000Z'),
                lt: new Date('2020-01-01T00:00:00.000Z')
              },
              page: 3,
              limit: 10,
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            // All invoices from the organization
            var searchResult = await facturapi.Invoice.ListAsync();

            // Todas las facturas emitidas para cierto cliente
            var searchResult = await facturapi.Invoice.ListAsync(
              new Dictionary<string, object>
              {
                ["customer"] = "590ce6c56d04f840aa8438af"
              }
            );

            // Página 3 de los resultados de búsqueda de texto libre
            // de facturas emitidas por cierto cliente entre 2017 y 2019
            var searchResult = await facturapi.Invoice.ListAsync(
              new Dictionary<string, object>
              {
                ["q"] = "Aspiradora Robot",
                ["customer"] = "590ce6c56d04f840aa8438af",  
                ["date"] = new Dictionary<string, object>
                  {
                    ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                    ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                  },
                ["page"] = 3,
                ["limit"] = 10,
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // All invoices from the organization
            $invoices = $facturapi->Invoices->all();

            // All invoices issued to a certain customer
            $invoices = $facturapi->Invoices->all([
              customer => "590ce6c56d04f840aa8438af"
            ]);

            // Page 3 of the search results for free text
            // of invoices issued to a certain customer between 2017 and 2019
            $invoices = $facturapi->Invoices->all([
              q => "Aspiradora Robot",
              customer => "590ce6c56d04f840aa8438af"
              date => [
                gte => new DateTime("2017-01-01T00:00:00.000Z"),
                lt => new DateTime("2020-01-01T00:00:00.000Z")
              ],
              page => 3,
              limit => 10,
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |
            Text to search in the invoice.

            The search will be performed by **partial** matches in the fields:

            - `items[].product.description`
            - `customer.legal_name`

            And by **exact** matches in the fields:

            - `id`
            - `uuid`
            - `customer.tax_id`
            - `folio_number`
            - `total`
        - in: query
          name: customer
          schema:
            type: string
          description: Filter by customer ID. Exact match.
        - in: query
          name: type
          schema:
            type: string
            enum:
              - I  
              - E 
              - P 
              - N
              - T 
          description: Filter by invoice type. Exact match.
        - in: query
          name: payment_method
          schema:
            type: string
            enum:
              - PUE
              - PPD
          description: Payment method. Exact match.
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}:
    get:
      operationId: getInvoice
      tags:
        - invoice
      summary: Retrieve invoice by ID
      description: Returns the `Invoice` object with the specified ID. If the invoice does not exist, a 404 error will be returned.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.retrieve('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.RetrieveAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->retrieve( "58e93bd8e86eb318b019743d" );
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Invoice` object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: updateDraftInvoice
      tags:
        - invoice
      summary: Edit draft invoice
      description: |
        Updates the information of a draft invoice, setting only the values for
        the paramenters that are sent. Undefined values will not be modified.

        In the `Invoice` response object, Facturapi will automatically assign the
        `is_ready_to_stamp` field with the value `true` if the invoice passes the
        minimum validation required to be stamped; otherwise, the
        `is_ready_to_stamp` field will be `false`.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d \
              -X PUT \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "payment_form": "06"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.updateDraft(
              '58e93bd8e86eb318b019743d',
              {
                payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new Facturapi("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.UpdateDraftAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->update_draft("58e93bd8e86eb318b019743d", [
              "payment_form" => \Facturapi\PaymentForm::EFECTIVO
            ]);
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to edit
      requestBody:
        $ref: "#/components/requestBodies/InvoiceEdit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Invoice` object edited successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceDraft"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: cancelInvoice
      tags:
        - invoice
      summary: Cancel invoice
      description: |
        Creates a cancellation request to the SAT for the specified invoice.

        When using this method, 3 possible results can occur:

        - The call returns an error with the explanation of why the cancellation could not be completed.
        - The call is successful and returns an `invoice` object with the property `status: "canceled"`.
        - The call is successful, but the cancellation requires confirmation from your client, in which case the response will be the `invoice` object with the properties `status: "valid"` and `cancellation_status: "pending"`.

        In the third scenario, the value of `cancellation_status` will be automatically updated by Facturapi when your client accepts, rejects, or lets the request expire, so that when you query an invoice (using [Get Invoice](#operation/getInvoice)), the `cancellation_status` property will reflect the most recent status of the request.

        Check the possible values of `cancellation_status` below.

        After the cancellation, the invoice will no longer be valid, the object will change its `status` to `"canceled"` and will still be available for future queries.

        If the status of the invoice is `draft`, this method will delete it from the database.

        If the status of the invoice is `canceled`, this method will return an error.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d?motive=02 \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X DELETE
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.cancel(
              '58e93bd8e86eb318b019743d',
              { motive: '02' }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.CancelAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["motive"] = "02"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $canceled_invoice = $facturapi->Invoices->cancel(
              "58e93bd8e86eb318b019743d",
              [
                "motive" => "02"
              ]
            );
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to cancel
        - in: query
          name: motive
          required: true
          schema:
            type: string
            enum:
              - "01"
              - "02"
              - "03"
              - "04"
          description: |
            Key representing the motive for the cancellation of the invoice.

            Possible values:

            - `01`: **Invoice issued with errors with relation**. When the invoice contains any errors in quantities, keys, or any other data and the replacement invoice has already been issued, which should be indicated through the `substitution` attribute.
            - `02`: **Invoice issued with errors without relation**. When the invoice contains any errors in quantities, keys, or any other data and it is not required to be related to another invoice.
            - `03`: **Operation not carried out**. When the sale or transaction was not completed.
            - `04`: **Nominative operation related to the global invoice**. When it is necessary to cancel an invoice to the general public because the customer requests their invoice.
        - in: query
          name: substitution
          required: false
          schema:
            type: string
          description: |
            ID of the invoice that replaces the invoice being canceled.
            
            You can use either the ID assigned by Facturapi or the fiscal folio (UUID).
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Invoice` object after cancellation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}/copy:
    post:
      operationId: copyToDraftInvoice
      tags:
        - invoice
      summary: Copy to draft
      description: |
        Creates a new draft invoice with the same information as the specified invoice.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/copy \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.copyToDraft('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.CopyToDraftAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->copy_to_draft("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to copy
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Invoice` draft object created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceDraft"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}/stamp:
    post:
      operationId: stampDraftInvoice
      tags:
        - invoice
      summary: Stamp draft invoice
      description: |
        Stamps a draft invoice and sends it to the SAT for validation.

        When using this method, the value of the `is_ready_to_stamp` field (assigned by Facturapi)
        must be `true`. Otherwise, the call will return an error. To get the value of `is_ready_to_stamp`,
        use the [Get Invoice](#operation/getInvoice) method.

        This method does not allow editing the invoice, only stamping it. If you need to edit
        information in the invoice before stamping it, use the [Edit Draft Invoice](#operation/editDraftInvoice) method.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/stamp \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const stampedInvoice = await facturapi.invoices.stampDraft('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var stampedInvoice = await facturapi.Invoice.StampDraftAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $stamped_invoice = $facturapi->Invoices->stamp_draft("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to stamp
        - in: query
          name: async
          schema:
            type: boolean
          required: false
          description: |
            Useful for large invoices. If sent `false` or not sent, the call will wait for the SAT to respond by stamping the invoice.
            If sent `true`, the call will return immediately with the `invoice` object in status `pending`, and its status can be checked
            for a change to `valid` at a later time.
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Invoice` object stamped successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /invoices/{invoice_id}/cancellation_receipt/{format}:
    get:
      operationId: downloadCancellationReceiptXml
      tags:
        - invoice
      summary: Cancellation receipt
      description: Download the cancellation receipt of a canceled invoice in an xml or pdf file.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Cancellation receipt xml
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/cancellation_receipt/xml \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X GET
            
            # Cancellation receipt pdf
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/cancellation_receipt/pdf \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X GET
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Cancellation receipt xml
            await facturapi.invoices.downloadCancellationReceiptXml('58e93bd8e86eb318b019743d');

            // Cancellation receipt pdf
            await facturapi.invoices.downloadCancellationReceiptPdf('58e93bd8e86eb318b019743d');

        - lang: csharp
          label: C#
          source: |
            // Cancellation receipt xml
            await facturapi.Invoice.DownloadCancellationReceiptXmlAsync("58e93bd8e86eb318b019743d");
            // Cancellation receipt pdf
            await facturapi.Invoice.DownloadCancellationReceiptPdfAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Cancellation receipt xml
            $facturapi->Invoices->download_cancellation_receipt_xml("58e93bd8e86eb318b019743d");
            
            // Cancellation receipt pdf
            $facturapi->Invoices->download_cancellation_receipt_pdf("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to download the cancellation receipt
        - in: path
          name: format
          schema:
            type: string
            enum:
              - xml
              - pdf
          required: true
          description: Format of the file to download
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "Cancellation receipt file"
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /invoices/{invoice_id}/{format}:
    get:
      operationId: downloadInvoice
      tags:
        - invoice
      summary: Download invoice
      description: Download your invoice in PDF, XML, or both in a ZIP file.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            ## Download PDF and XML compressed in a ZIP file
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/zip \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Download only the PDF
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/pdf \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Download only the XML
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/xml \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Download PDF and XML compressed in a ZIP file
            const zipStream = await facturapi.invoices.downloadZip('58e93bd8e86eb318b019743d');
            const zipFile = fs.createWriteStream('./factura.zip');
            zipStream.pipe(zipFile);

            // Download only the PDF
            const pdfStream = await facturapi.invoices.downloadPdf('58e93bd8e86eb318b019743d');
            const pdfFile = fs.createWriteStream('./factura.pdf');
            pdfStream.pipe(pdfFile);

            // Download only the XML
            const xmlStream = await facturapi.invoices.downloadXml('58e93bd8e86eb318b019743d');
            const xmlFile = fs.createWriteStream('./factura.xml');
            xmlStream.pipe(xmlFile);
        - lang: csharp
          label: C#
          source: |
            // Download PDF and XML compressed in a ZIP file
            var zipStream = await facturapi.Invoice.DownloadZipAsync("58e93bd8e86eb318b019743d");
            // Download only the XML
            var xmlStream = await facturapi.Invoice.DownloadXmlAsync("58e93bd8e86eb318b019743d");
            // Download only the PDF
            var pdfStream = await facturapi.Invoice.DownloadPdfAsync("58e93bd8e86eb318b019743d");

            // Save the streams to a file
            var file = new System.IO.FileStream("C:\\route\\to\\save\\invoice.zip", FileMode.Create);
            zipStream.CopyTo(file);
            file.Close();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Stream containing the ZIP file with the PDF and XML files
            $zip = $facturapi->Invoices->download_zip("58e93bd8e86eb318b019743d");
            // Stream containing the PDF file
            $pdf = $facturapi->Invoices->download_pdf("58e93bd8e86eb318b019743d"); 
            // Stream containing the XML file
            $xml = $facturapi->Invoices->download_xml("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to download
        - in: path
          name: format
          schema:
            type: string
            enum:
              - xml
              - pdf
              - zip
          required: true
          description: Format of the file to download
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Official CFDI file in the specified format
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}/email:
    post:
      operationId: sendInvoiceByEmail
      tags:
        - invoice
      summary: Send invoice by email
      description: |
        Sends an email to the address of your client with the XML and PDF files attached to the message.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Send to the email registered by the client
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST

            # Send to a different email
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST \
              -H "Content-Type: application/json" \
              -d '{
                    "email": "another_email@example.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Send to the email registered by the client
            await facturapi.invoices.sendByEmail('58e93bd8e86eb318b019743d');

            // Send to a different email
            await facturapi.invoices.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { email: 'another@email.com' }
            );

            // Send to more than one email (max 10)
            await facturapi.invoices.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { 
                email: [
                  'first@email.com',
                  'second@example.com'
                ]
              }
            );
        - lang: csharp
          label: C#
          source: |
            // Send to the email registered by the client
            await facturapi.Invoice.SendByEmailAsync("58e93bd8e86eb318b019743d");

            // Send to a different email
            await facturapi.Invoice.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = "another@email.com"
              }
            );

            // Send to more than one email (max 10)
            await facturapi.Invoice.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = new String[]
                {
                  "first@email.com",
                  "second@email.com"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Send to the email registered by the client
            $facturapi->Invoices->send_by_email("58e93bd8e86eb318b019743d");

            // Send to a different email
            $facturapi->Invoices->send_by_email(
              "58e93bd8e86eb318b019743d",
              "another@email.com"
            );

            // Send to more than one email (max 10)
            $facturapi->Invoices->send_by_email(
              "58e93bd8e86eb318b019743d",
              [
                "first@email.com",
                "second@email.com"
              ]
            );
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to send
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: |
                    Email address to send the invoice. If not sent, the email registered by the customer will be used.
                  oneOf:
                    - type: string
                      format: email
                      description: Email address to send the invoice.
                      example: another@email.com
                    - type: array
                      example: ["first@email.com", "second@email.com"]
                      description: |
                        Array of email addresses to send the invoice. The maximum number of emails is 10.
                      maxLength: 10
                      items:
                        type: string
                        format: email
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Email sent successfully
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - ok
                properties:
                  ok:
                    type: boolean
                    description: |
                      `true` if the email was sent successfully, `false` otherwise.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}/status:
    put:
      operationId: updateInvoiceStatus
      tags:
        - invoice
      summary: |
        Update invoice status
      description: |
        Consults the status of a stamped invoice at the SAT and updates the invoice object with the most recent information.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/status \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X PUT
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.updateStatus('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new Facturapi
            var invoice = await facturapi.Invoice.UpdateStatusAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->update_status("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID of the invoice to update
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: "`Invoice` object updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /receipts:
    post:
      operationId: createReceipt
      tags:
        - receipt
      summary: Create e-receipt
      description: |
        Creates a new e-Receipt, which acts as a sales note.
        
        Every receipt will have an auto-generated URL that the client can visit to fill in their fiscal data in a microsite with the organization's branding.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "folio_number": 1234,
                    "payment_form": "03",
                    "items": [{
                      "quantity": 1,
                      "product": {
                        "description": "Ukelele",
                        "product_key": "60131324",
                        "price": 345.60,
                        "sku": "ABC1234"
                      }
                    }]
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const receipt = await facturapi.receipts.create({
              folio_number: 1234,
              payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO,
              items: [{
                quantity: 1,
                product: {
                  description: 'Ukelele',
                  product_key: '60131324',
                  price: 345.60,
                  sku: 'ABC1234'
                }
              }]
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var receipt = await facturapi.Receipt.CreateAsync(new Dictionary<string, object>
            {
              ["folio_number"] = 1234,
              ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO,
              ["items"] = new Dictionary<string, object>[]
              {
                new Dictionary<string, object> {
                  ["description"] = "Ukelele",
                  ["product_key"] = "60131324",
                  ["price"] = 345.60,
                  ["sku"] = "ABC1234"
                }
              }
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $receipt = $facturapi->Receipts->create([
              "folio_number" => 1234,
              "payment_form" => "03",
              "items" => [
                [
                  "product" => [
                    "description" => "Ukelele",
                    "product_key" => "60131324",
                    "price" => 345.60,
                    "sku" => "ABC1234"
                  ]
                ]
              ]
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ReceiptCreate"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: New `Receipt` object created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listReceipts
      tags:
        - receipt
      summary: List e-recipts
      description: |
        Returns a paginated list of all the receipts of an organization or performs a search according to parameters.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # All receipts of the organization
            curl "https://www.facturapi.io/v2/receipts" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY"

            # Page 3 of search results for free text search
            # of receipts created between 2017 and 2019
            curl "https://www.facturapi.io/v2/receipts" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "q=Aspiradora+Robot&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // All receipts of the organization
            const receiptSearch = await facturapi.receipts.list();

            // Page 3 of search results for free text search
            // of receipts created between 2017 and 2019
            const receiptSearch = await facturapi.receipts.list({
              q: 'Aspiradora Robot',
              date: {
                gte: new Date('2017-01-01T00:00:00.000Z'),
                lt: new Date('2020-01-01T00:00:00.000Z')
              },
              page: 3,
              limit: 10,
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            // All receipts of the organization
            var searchResult = await facturapi.Receipt.ListAsync();

            // Page 3 of search results for free text search
            // of receipts created between 2017 and 2019
            var searchResult = await facturapi.Receipt.ListAsync(
              new Dictionary<string, object>
              {
                ["q"] = "Aspiradora Robot",
                ["date"] = new Dictionary<string, object>
                  {
                    ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                    ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                  },
                ["page"] = 3,
                ["limit"] = 10,
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // All receipts of the organization
            $searchResult = $facturapi->Receipts->all();

            // Page 3 of search results for free text search
            // of receipts created between 2017 and 2019
            $searchResult = $facturapi->Receipts->all([
              q => "Aspiradora Robot",
              date => [
                gte => new DateTime("2017-01-01T00:00:00.000Z"),
                lt => new DateTime("2020-01-01T00:00:00.000Z")
              ],
              page => 3,
              limit => 10,
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |
            Search. Text to search in the description of the receipt's items or the SKU.
        - in: query
          name: payment_form
          schema:
            type: string
            minLength: 2
            maxLength: 2
          example: "02"
          description: |
            Code representing the payment form, according to the [SAT catalog](#forma-de-pago). If included, the receipts will be grouped and listed according to the payment form.
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReceiptSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/{receipt_id}:
    get:
      operationId: getReceipt
      tags:
        - receipt
      summary: Retrieve e-receipt by ID
      description: |
        Retrieves an e-Receipt by its ID.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const receipt = await facturapi.receipts.retrieve('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var receipt = await facturapi.Receipt.RetrieveAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $receipt = $facturapi->Receipts->retrieve( "58e93bd8e86eb318b019743d" );
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID of the receipt to retrieve
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Objeto `Receipt`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: cancelReceipt
      tags:
        - receipt
      summary: Cancel e-receipt
      description: |
        Cancel a receipt by changing its `status` property to `"canceled"`.
        
        Once canceled, the receipt cannot be invoiced.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/5ebd8e56f5687a013ca0df46 \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const receipt = await facturapi.receipts.cancel('5ebd8e56f5687a013ca0df46');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var receipt = await facturapi.Receipt.CancelAsync("5ebd8e56f5687a013ca0df46");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Receipts->cancel("5ebd8e56f5687a013ca0df46");
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID of the receipt to cancel
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Receipt object canceled successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/{receipt_id}/pdf:
    get:
      operationId: downloadReceiptPdf
      tags:
        - receipt
      summary: Download PDF
      description: Download the electronic receipt in PDF format.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d/pdf \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Download the electronic receipt in PDF format
            const pdfStream = await facturapi.receipts.downloadPdf('58e93bd8e86eb318b019743d');
            const pdfFile = fs.createWriteStream('./recibo.pdf');
            pdfStream.pipe(pdfFile);
        - lang: csharp
          label: C#
          source: |
            // Download the electronic receipt in PDF format
            var pdfStream = await facturapi.Receipt.DownloadPdfAsync("58e93bd8e86eb318b019743d");

            // Save the stream to a file
            var file = new System.IO.FileStream("C:\\route\\to\\save\\receipt.pdf", FileMode.Create);
            pdfStream.CopyTo(file);
            file.Close();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // stream containing the PDF file
            $pdf = $facturapi->Receipts->download_pdf("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID of the receipt to download
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: E-receipt in PDF format
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/{receipt_id}/email:
    post:
      operationId: sendReceiptByEmail
      tags:
        - receipt
      summary: Send e-receipt by email
      description: |
        Send the e-receipt by email to the customer.

        The email sent will be customized with the logo and colors of the organization that created it,
        and will include a button to invoice the receipt, as well as the receipt attached as a PDF to the message.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Send to a different email than the one registered by the customer
            curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST \
              -H "Content-Type: application/json" \
              -d '{
                    "email": "another_email@example.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            # Send to a different email than the one registered by the customer
            await facturapi.receipts.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { email: 'ejemplo@correo.com' }
            );

            # Send to multiple emails (max 10)
            await facturapi.receipts.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { 
                email: [
                  'primer@correo.com',
                  'segundo@correo.com'
                ]
              }
            );
        - lang: csharp
          label: C#
          source: |
            // Send to a different email than the one registered by the customer
            await facturapi.Receipt.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = "ejemplo@correo.com"
              }
            );

            // Send to multiple emails (max 10)
            await facturapi.Receipt.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = new String[]
                {
                  "primer@correo.com",
                  "segundo@correo.com"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Send to a different email than the one registered by the customer
            $facturapi->Receipts->send_by_email(
              "58e93bd8e86eb318b019743d",
              "ejemplo@correo.com"
            );

            // Send to multiple emails (max 10)
            $facturapi->Receipts->send_by_email(
              "58e93bd8e86eb318b019743d",
              [
                "primer@correo.com",
                "segundo@correo.com"
              ]
            );
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID of the e-receipt to send
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  description: |
                    Email address to send the e-receipt. If not sent, the email registered by the customer will be used.
                  oneOf:
                    - type: string
                      format: email
                      description: Email address to send the e-receipt.
                      example: other@email.com
                    - type: array
                      example: ["first@email.com", "second@email.com"]
                      description: |
                        Array of email addresses to send the e-receipt. The maximum number of emails is 10.
                      maxLength: 10
                      items:
                        type: string
                        format: email
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Generic response object
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - ok
                properties:
                  ok:
                    type: boolean
                    description: Indicates if the email was sent successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  
  /receipts/{receipt_id}/invoice:
    post:
      operationId: invoiceReceipt
      tags:
        - receipt
      summary: Convert e-receipt to invoice
      description: |
        Creates a new invoice from a receipt. Once invoiced, the receipt's `status` will change to `"invoiced_to_customer"`.

        Only open receipts (`status = "open"`) can be invoiced.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/5ebd8e56f5687a013ca0df46/invoice \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "customer": "58e93bd8e86eb318b0197456",
                    "folio_number": 914,
                    "series": "F"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const invoice = await facturapi.receipts.invoice('5ebd8e56f5687a013ca0df46', {
              customer: '58e93bd8e86eb318b0197456',
              folio_number: 914,
              series: 'F'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Receipt.InvoiceAsync("5ebd8e56f5687a013ca0df46", new Dictionary<string, object>
            {
              ["customer"] = "58e93bd8e86eb318b0197456",
              ["folio_number"] = 914,
              ["series"] = "F"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_test_API_KEY");

            $invoice = $facturapi->Receipts->invoice("5a3f3e35f508333611ad6b3e", [
              "customer" => "58e93bd8e86eb318b0197456",
              "folio_number" => 914,
              "series" => "F"
            ]);
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID of the receipt to invoice
      requestBody:
        $ref: "#/components/requestBodies/ReceiptInvoice"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Nuevo `Invoice` object created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/global-invoice:
    post:
      operationId: createGlobalInvoice
      tags:
        - receipt
      summary: Create global invoice
      description: |
        Creates a global invoice that will include all receipts with `status = "open"` from a certain period.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/global-invoice \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "from": "2021-01-01T05:00:00.000Z",
                    "to": "2021-01-31T04:59:59.999Z",
                    "periodicity": "month",
                    "months": "01",
                    "year": 2021,
                    "folio_number": 1234,
                    "series": "G"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const invoice = await facturapi.receipts.createGlobalInvoice({
              from: '2020-12-01T05:00:00.000Z',
              to: '2020-12-31T04:59:59.999Z',
              periodicity: 'month',
              months: '01',
              year: 2021
              folio_number: 1234,
              series: 'G'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Receipt.CreateGlobalInvoiceAsync(new Dictionary<string, object>
            {
              ["from"] = "2020-12-01T05:00:00.000Z",
              ["to"] = "2020-12-31T04:59:59.999Z",
              ["periodicity"] = "month",
              ["months"] = "01",
              ["year"] = 2021,
              ["folio_number"] = 1234,
              ["series"] = "G"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_test_API_KEY");

            $invoice = $facturapi->Receipts->createGlobalInvoice([
              "from" => "2020-12-01T05:00:00.000Z",
              "to" => "2020-12-31T04:59:59.999Z",
              "periodicity" => "month",
              "months" => "01",
              "year" => 2021,
              "folio_number" => 1234,
              "series" => "G"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ReceiptCreateGlobalInvoice"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: New `Invoice` object creaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /retentions:
    post:
      operationId: createRetention
      tags:
        - retention
      summary: Create retention
      description: |
        Create a new Retention. If the invoice is created in Live environment, it will be **stamped and sent to SAT**.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/retentions \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "customer": "58e93bd8e86eb318b0197456",
                    "cve_retenc": "26",
                    "periodo": {
                      "mes_ini": 1,
                      "mes_fin": 12,
                      "ejerc": 2020
                    },
                    "totales": {
                      "monto_tot_operacion": 244.654321,
                      "monto_tot_exent": 145.123456,
                      "imp_retenidos": [
                        {
                          "monto_ret": 40,
                          "base_ret": 250
                        }
                      ]
                    }
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const retention = await facturapi.retentions.create({
              customer: '58e93bd8e86eb318b0197456',
              cve_retenc: '26',
              periodo: {
                mes_ini: 1,
                mes_fin: 12,
                ejerc: 2020
              },
              totales: {
                monto_tot_operacion: 244.654321,
                monto_tot_exent: 145.123456,
                imp_retenidos: [
                  {
                    monto_ret: 40,
                    base_ret: 250
                  }
                ]
              }
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var retention = await facturapi.Retention.CreateAsync(new Dictionary<string, object>
            {
              ["customer"] = "58e93bd8e86eb318b0197456",
              ["cve_retenc"] = "26",
              ["periodo"] = new Dictionary<string, object>
              {
                ["mes_ini"] = 1,
                ["mes_fin"] = 12,
                ["ejerc"] = 2020
              },
              ["totales"] = new Dictionary<string, object>
              {
                ["monto_tot_operacion"] = 244.654321,
                ["monto_tot_exent"] = 145.123456,
                ["imp_retenidos"] = new Dictionary<string, object>[]
                {
                  new Dictionary<string, object>
                  {
                    ["]
                    ["monto_ret"] = 40,
                    ["base_ret"] = 250
                  }
                }
              }
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $retention = $facturapi->Retentions->create([
              "customer" => "58e93bd8e86eb318b0197456",
              "cve_retenc" => "26",
              "periodo" => [
                "mes_ini" => 1,
                "mes_fin" => 12,
                "ejerc" => 2020
              ],
              "totales" => [
                "monto_tot_operacion" => 244.654321,
                "monto_tot_exent" => 145.123456,
                "imp_retenidos" => [
                  [
                    "impuesto" => "ISR",
                    "monto_ret" => 40,
                    "base_ret" => 250
                  ]
                ]
              ]
            ]);
      requestBody:
        $ref: "#/components/requestBodies/RetentionCreate"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: New `Retention` object created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retention"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listRetentions
      tags:
        - retention
      summary: List retentions
      description: |
        Returns a paginated list of all the retentions of an organization or performs a search according to parameters.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # All retentions of the organization
            curl https://www.facturapi.io/v2/retentions \
              -H "Authorization: Bearer sk_test_API_KEY"

            # All retentions issued for a certain customer
            curl "https://www.facturapi.io/v2/retentions" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "customer=58e93bd8e86eb318b0197456"

            # Page 3 of search results for free text search
            # of retentions issued between 2017 and 2019
            curl "https://www.facturapi.io/v2/retentions" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "q=John+Doe6&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // All retentions of the organization
            const retentionSearch = await facturapi.retentions.list();

            // All retentions issued for a certain customer
            const retentionSearch = await facturapi.retentions.list({
              customer: '590ce6c56d04f840aa8438af'
            });

            // Page 3 of search results for free text search
            // of retentions issued between 2017 and 2019
            const retentionSearch = await facturapi.retentions.list({
              q: 'John Doe',
              date: {
                gte: new Date('2017-01-01T00:00:00.000Z'),
                lt: new Date('2020-01-01T00:00:00.000Z')
              },
              page: 3,
              limit: 10,
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            // All retentions of the organization
            var searchResult = await facturapi.Retention.ListAsync();

            // All retentions issued for a certain customer
            var searchResult = await facturapi.Retention.ListAsync(
              new Dictionary<string, object>
              {
                ["customer"] = "590ce6c56d04f840aa8438af"
              }
            );

            // Page 3 of search results for free text search
            // of retentions issued between 2017 and 2019
            var searchResult = await facturapi.Retention.ListAsync(
              new Dictionary<string, object>
              {
                ["q"] = "John Doe",
                ["date"] = new Dictionary<string, object>
                  {
                    ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                    ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                  },
                ["page"] = 3,
                ["limit"] = 10,
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // All retentions of the organization
            $retentions = $facturapi->Retentions->all();

            // All retentions issued for a certain customer
            $retentions = $facturapi->Retentions->all([
              customer => "590ce6c56d04f840aa8438af"
            ]);

            // Page 3 of search results for free text search
            // of retentions issued between 2017 and 2019
            $retentions = $facturapi->Retentions->all([
              q => "John Doe",
              date => [
                gte => new DateTime("2017-01-01T00:00:00.000Z"),
                lt => new DateTime("2020-01-01T00:00:00.000Z")
              ],
              page => 3,
              limit => 10,
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Text search. Finds retentions with the specified text in the customer's `legal_name` or `tax_id`.
        - in: query
          name: customer
          schema:
            type: string
          description: ID of the customer to filter by. Only retentions issued to this customer will be returned.
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetentionSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /retentions/{retention_id}:
    get:
      operationId: getRetention
      tags:
        - retention
      summary: Retrieve retention by ID
      description: |
        Retrieves a retention by its ID.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/retentions/6062d9fb226600001cd22f71 \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const retention = await facturapi.retentions.retrieve('6062d9fb226600001cd22f71');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var retention = await facturapi.Retention.RetrieveAsync("6062d9fb226600001cd22f71");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $retention = $facturapi->Retentions->retrieve( "6062d9fb226600001cd22f71" );
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID of the retention to retrieve
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Retention` object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retention"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: cancelRetention
      tags:
        - retention
      summary: Cancel retention
      description: |
        Request a cancellation of a retention from the SAT.

        Unlike regular invoices, retention cancellations are immediate and do not require authorization from the recipient.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/retentions/6062d9fb226600001cd22f71 \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X DELETE
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const canceledRetention = await facturapi.retentions.cancel('6062d9fb226600001cd22f71');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var canceledRetention = await facturapi.Retention.CancelAsync("6062d9fb226600001cd22f71");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $canceledRetention = $facturapi->Retentions->cancel("6062d9fb226600001cd22f71");
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID of the retention to cancel
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Retention` object canceled successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retention"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /retentions/{retention_id}/{format}:
    get:
      operationId: downloadRetention
      tags:
        - retention
      summary: Download retention
      description: Download a retention in PDF, XML or both in a ZIP file.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            ## Download PDF and XML compressed in a ZIP file
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/zip \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Download only the PDF
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/pdf \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Download only the XML
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/xml \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Download PDF and XML compressed in a ZIP file
            const zipStream = await facturapi.retentions.downloadZip('58e93bd8e86eb318b019743d');
            const zipFile = fs.createWriteStream('./retencion.zip');
            zipStream.pipe(zipFile);

            // Download only the PDF
            const pdfStream = await facturapi.retentions.downloadPdf('58e93bd8e86eb318b019743d');
            const pdfFile = fs.createWriteStream('./retencion.pdf');
            pdfStream.pipe(pdfFile);

            // Download only the XML
            const xmlStream = await facturapi.retentions.downloadXml('58e93bd8e86eb318b019743d');
            const xmlFile = fs.createWriteStream('./retencion.xml');
            xmlStream.pipe(xmlFile);
        - lang: csharp
          label: C#
          source: |
            // Download PDF and XML compressed in a ZIP file
            var zipStream = await facturapi.Retention.DownloadZipAsync("58e93bd8e86eb318b019743d");
            // Download only the XML
            var xmlStream = await facturapi.Retention.DownloadXmlAsync("58e93bd8e86eb318b019743d");
            // Download only the PDF
            var pdfStream = await facturapi.Retention.DownloadPdfAsync("58e93bd8e86eb318b019743d");

            // Para guardar la descarga en un archivo
            var file = new System.IO.FileStream("C:\\route\\to\\save\\retention.zip", FileMode.Create);
            zipStream.CopyTo(file);
            file.Close();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // stream containing the PDF and XML as a ZIP file
            $zip = $facturapi->Retentions->download_zip("58e93bd8e86eb318b019743d");
            // stream containing the PDF file
            $pdf = $facturapi->Retentions->download_pdf("58e93bd8e86eb318b019743d"); 
            // stream containing the XML file
            $xml = $facturapi->Retentions->download_xml("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID of the retention to download
        - in: path
          name: format
          schema:
            type: string
            enum:
              - xml
              - pdf
              - zip
          required: true
          description: Format to download
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Official retention CFDI document in the requested format
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /retentions/{retention_id}/email:
    post:
      operationId: sendRetentionByEmail
      tags:
        - retention
      summary: Send retention by email
      description: |
        Send an email to the customer's address with the XML and PDF files attached to the message.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Send to the customer's email
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST

            # Send to another email address
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X POST \
              -H "Content-Type: application/json" \
              -d '{
                    "email": "another_email@example.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Send to the customer's email
            await facturapi.retentions.sendByEmail('58e93bd8e86eb318b019743d');

            // Send to another email address
            await facturapi.retentions.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { email: 'otro@correo.com' }
            );

            // Send to more than one email (max 10)
            await facturapi.retentions.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { 
                email: [
                  'primer@correo.com',
                  'segundo@correo.com'
                ]
              }
            );
        - lang: csharp
          label: C#
          source: |
            // Send to the customer's email
            await facturapi.Retention.SendByEmailAsync("58e93bd8e86eb318b019743d");

            // Send to another email
            await facturapi.Retention.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = "otro@correo.com"
              }
            );

            // Send to more than one email (max 10)
            await facturapi.Retention.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = new String[]
                {
                  "primer@correo.com",
                  "segundo@correo.com"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Send to the customer's email
            $facturapi->Retentions->send_by_email("58e93bd8e86eb318b019743d");

            // Send to another email
            $facturapi->Retentions->send_by_email(
              "58e93bd8e86eb318b019743d",
              "otro@correo.com"
            );

            // Send to more than one email (max 10)
            $facturapi->Retentions->send_by_email(
              "58e93bd8e86eb318b019743d",
              [
                "primer@correo.com",
                "segundo@correo.com"
              ]
            );
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID of the retention to send
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Email address to send the retention. If this parameter is not sent, the retention will be sent to the email that the customer has registered.
                  oneOf:
                    - type: string
                      format: email
                      description: Email address to send the retention.
                      example: another@email.com
                    - type: array
                      example: ["first@correo.com", "second@correo.com"]
                      description: |
                        Array of email addresses to send the retention. The maximum number of emails that can be sent is 10.
                      maxLength: 10
                      items:
                        type: string
                        format: email
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Generic response indicating if the email was sent successfully
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - ok
                properties:
                  ok:
                    type: boolean
                    description: Indicates if the email was sent successfully
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /organizations:
    post:
      operationId: createOrganization
      tags:
        - organization
      summary: Create organization
      description: |
        Create a new Organization that will belong to your user account.
        
        After creating the organization and before being able to issue invoices
        with the organization, you will need to finish setting it up by calling
        the [Update legal data](#operation/editOrganizationLegal) and
        [Upload certificates (CSD)](#operation/uploadOrganizationCertificate) methods.

        Remember that the stamps of your subscription can be consumed by any of
        the organizations registered under your account.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                  "name": "Skynet"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.create({
              name: 'Skynet'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.CreateAsync(new Dictionary<string, object>
            {
              ["name"] = "Skynet"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");
            $organization = $facturapi->Organizations->create([
              "name" => "Skynet"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/OrganizationCreate"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: New `Organization` object created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listOrganizations
      tags:
        - organization
      summary: List organizations
      description: |
        Returns a paginated list of all the organizations registered under your account, or performs a search according to parameters.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const organizationResults = await facturapi.organizations.list();
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            var searchResult = await facturapi.Organization.ListAsync();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $organizations = $facturapi->Organizations->all()
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Free text search. Text to search in `name` (commercial name) or `legal_name` (fiscal name) or `tax_id` (RFC).
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/legal:
    put:
      operationId: editOrganizationLegal
      tags:
        - organization
      summary: Edit legal data
      description: |
        Update the legal information of the organization.

        If you are looking for how to edit the RFC, remember that the `tax_id`
        property is automatically assigned when uploading the user's certificates
        (Certificado de Sello Digital or CSD).
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/legal \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "name": "Skynet",
                    "legal_name": "Skynet",
                    "tax_system": "601",
                    "website": "www.sky.net",
                    "phone": "555-555-5555",
                    "address": {
                      "exterior": "1414",
                      "interior": "12",
                      "zip": "44940",
                      "neighborhood": "Villa Toscana",
                      "city": "Guadalajara",
                      "municipality": "Guadalajara",
                      "state": "Jalisco",
                      "country": "México"
                    }
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.updateLegal(
              '5a2a307be93a2f00129ea035',
              {
                name: 'Skynet',
                legal_name: 'Skynet',
                tax_system: Facturapi.TaxSystem.GENERAL_LEY_DE_PERSONAS_MORALES,
                website: 'www.sky.net',
                phone: '555-555-5555',
                address: {
                  exterior: '1414',
                  interior: '12',
                  zip: '44940',
                  neighborhood: 'Villa Toscana',
                  city: 'Guadalajara',
                  municipality: 'Guadalajara',
                  state: 'Jalisco',
                  country: 'México'
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.UpdateLegalAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["name"] = "Skynet",
                ["legal_name"] = "Skynet",
                ["tax_system"] = "601",
                ["website"] = "www.sky.net",
                ["phone"] = "555-555-5555",
                ["address"] = new Dictionary<string, object>
                {
                  ["exterior"] = "1414",
                  ["interior"] = "12",
                  ["zip"] = "44940",
                  ["neighborhood"] = "Villa Toscana",
                  ["city"] = "Guadalajara",
                  ["municipality"] = "Guadalajara",
                  ["state"] = "Jalisco",
                  ["country"] = "México"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");
            $organization = $facturapi->Organizations->updateLegal(
              "5a2a307be93a2f00129ea035", [
                "name" => "Skynet",
                "legal_name" => "Skynet",
                "tax_system" => "601",
                "website" => "www.sky.net",
                "phone" => "555-555-5555",
                "address" => [
                  "exterior" => "1414",
                  "interior" => "12",
                  "zip" => "44940",
                  "neighborhood" => "Villa Toscana",
                  "city" => "Guadalajara",
                  "municipality" => "Guadalajara",
                  "state" => "Jalisco",
                  "country" => "México"
                )
              ]
            ];
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization to edit
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditLegal"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/certificate:
    put:
      operationId: uploadOrganizationCertificate
      tags:
        - organization
      summary: Upload certificates (CSD)
      description: |
        Upload the files of the Digital Seal Certificate (Certificado de Sello Digital or CSD) provided by the SAT.

        This call should also be used to replace existing certificates in case new ones are requested.

        When updating your certificates, the RFC will be read and automatically assigned to `legal.tax_id`.

        > **Don't use this endpoint to upload the FIEL certificate.**
        > The CSD is different from the FIEL certificate (Firma Electrónica). Please ask your accountant for the CSD.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/certificate \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F 'cer=@/path/to/your/CSD.cer' \
              -F 'key=@/path/to/your/CSD.key' \
              -F 'password=CONTRASEÑA_DEL_CERTIFICADO'
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const cerFileStream = fs.createReadStream('/path/to/your/CSD.cer');
            const keyFileStream = fs.createReadStream('/path/to/your/CSD.key');

            const organization = await facturapi.organizations.uploadCertificate(
              '5a2a307be93a2f00129ea035',
              cerFileStream,
              keyFileStream,
              'CONTRASEÑA_DEL_CERTIFICADO'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var cerFileStream = File.OpenRead(@"C:\path\to\your\CSD.cer");
            var keyFileStream = File.OpenRead(@"C:\path\to\your\CSD.key");

            var organization = await facturapi.Organization.UploadCertificateAsync(
              "5a2a307be93a2f00129ea035",
              cerFileStream,
              keyFileStream,
              "CONTRASEÑA_DEL_CERTIFICADO"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->uploadCertificate(
              "5a2a307be93a2f00129ea035",
              [
                "cerFile" => "/path/to/CSD.cer",
                "keyFile" => "/path/to/CSD.key",
                "password" => "mYp455w0rD1553cUr3!"
              ]
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization to upload certificates
      requestBody:
        $ref: "#/components/requestBodies/OrganizationUploadCerts"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganizationCertificate
      tags:
        - organization
      summary: Delete certificates (CSD)
      description: |
        Removes the certificates (CSD) from your organization.

        Deleting the certificates will not affect the invoices already issued, but you will not be able to issue new invoices until you upload new certificates.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/certificate \
              -X DELETE \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.deleteCertificate(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.DeleteCertificateAsync("5a2a307be93a2f00129ea035");
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->deleteCertificate("5a2a307be93a2f00129ea035");
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization to delete certificates
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationDeleteCerts"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/logo:
    put:
      operationId: uploadOrganizationLogo
      tags:
        - organization
      summary: Upload logo
      description: |
        Upload the organization's logo. The logo will be displayed on the PDFs and emails sent to your customers.
        
        The file must be an image in JPG or PNG format and have a size not greater than 500 KB. The recommended dimensions are 800 × 500px.

        If the organization already has a logo, this call replaces the previous logo.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/logo \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F 'file=@/path/to/your/logo.jpg'
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const fileStream = fs.createReadStream('/path/to/your/logo.jpg');
            const organization = await facturapi.organizations.uploadLogo(
              '5a2a307be93a2f00129ea035',
              fileStream
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var fileStream = File.OpenRead(@"C:\path\to\your\logo.jpg");

            var organization = await facturapi.Organization.UploadLogoAsync(
              "5a2a307be93a2f00129ea035",
              fileStream
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->uploadLogo(
              "5a2a307be93a2f00129ea035",
              "/path/to/logo.jpg"
            ));
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      requestBody:
        $ref: "#/components/requestBodies/OrganizationUploadLogo"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/customization:
    put:
      operationId: editOrganizationCustomization
      tags:
        - organization
      summary: Edit customization
      description: |
        Update the information related to the organization's identity or branding.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/customization \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "color": "#BADA55",
                    "pdf_extra": {
                      "codes": false,
                      "product_key": true
                    }
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.updateCustomization(
              '5a2a307be93a2f00129ea035',
              {
                color: '#BADA55',
                pdf_extra: {
                  codes: false,
                  product_key: true
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var organization = await facturapi.Organization.UpdateCustomizationAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["color"] = "#BADA55",
                ["pdf_extra"] = new Dictionary<string, object>
                {
                  ["codes"] = false,
                  ["product_key"] = true
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->updateCustomization(
              "5a2a307be93a2f00129ea035",
              array(
                "color" => "#BADA55",
                "pdf_extra" => array(
                  "codes" => false,
                  "product_key" => true
                )
              )
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditCustomization"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/receipts:
    put:
      operationId: editOrganizationReceiptsSettings
      tags:
        - organization
      summary: Edit receipts settings
      description: |
        Update the organization's receipts settings.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/receipts \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "invoicing_period": "month",
                    "duration_days": 14,
                    "next_folio_number": 100
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.updateReceiptSettings(
              '5a2a307be93a2f00129ea035',
              {
                invoicing_period: "month",
                duration_days: 14,
                next_folio_number: 100
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var organization = await facturapi.Organization.UpdateReceiptSettingsAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["invoicing_period"] = "month",
                ["duration_days"] = 14,
                ["next_folio_number"] = 100
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->updateReceiptSettings(
              "5a2a307be93a2f00129ea035",
              [
                "invoicing_period" => "month",
                "duration_days" => 14,
                "next_folio_number" => 100
              ]
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditReceiptsSettings"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/domain-check:
    get:
      operationId: checkDomainAvailability
      tags:
        - organization
      summary: Check domain availability
      description: |
        Check if an identifier is available to choose as a domain for the autofactura portal.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/domain-check?domain=empresa-demo \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.checkDomainIsAvailable({
              domain: 'empresa-demo'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.CheckDomainIsAvailableAsync(
              new Dictionary<string, object>
              {
                ["domain"] = "empresa-demo"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->checkDomainIsAvailable(
              ["domain" => "empresa-demo"]
            );
      parameters:
        - in: query
          name: domain
          required: true
          schema:
            $ref: "#/components/schemas/DomainField"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: |
            Response indicating if the domain is available.
          required: true
          content:
            application/json:
              schema:
                type: object
                required:
                  - available
                properties:
                  available:
                    type: boolean
                    example: true
                    description: Indicates if the domain is available
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/domain:
    put:
      operationId: editOrganizationDomain
      tags:
        - organization
      summary: Choose self-invoice domain
      description: |
        Choose the domain that this organization will use in its self-invoice microsite.
        Once you choose the domain, you must contact us if you need to change it.

        The domain you choose will be the one that appears in the `self_invoice_url`
        field when creating a new receipt, as follows:

        `https://factura.space/{DOMAIN}/{RECEIPT_KEY}`
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/domain \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "domain": "empresa-demo"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.updateDomain(
              '5a2a307be93a2f00129ea035',
              { domain: 'empresa-demo' }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var organization = await facturapi.Organization.UpdateDomainAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["domain"] = "empresa-demo"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->updateDomain(
              "5a2a307be93a2f00129ea035",
              array( "domain" => "empresa-demo" )
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditDomain"
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Modified `Organization` object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}:
    get:
      operationId: getOrganization
      tags:
        - organization
      summary: Retrieve organization by ID
      description: |
        Retrieve the organization by its ID.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035 \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.retrieve(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.RetrieveAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->retrieve("5a2a307be93a2f00129ea035");
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: "`Organization` object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganization
      tags:
        - organization
      summary: Delete organization
      description: |
        Delete the organization from your Facturapi account. Once deleted, you
        will not be able to access its resources, such as clients, products,
        invoices, receipts, or retentions.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035 \
              -X DELETE \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.del(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.DeleteAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->delete(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: "`Organization` object deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/apikeys/test:
    get:
      operationId: getTestApiKey
      tags:
        - organization
      summary: Retrieve Test API Key
      description: |
        Retrieve API Key for the Test environment of the organization.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/test \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const apiKeys = await facturapi.organizations.getTestApiKey(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var apiKeys = await facturapi.Organization.GetTestApiKeyAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->getTestApiKey(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Test API Key
          content:
            application/json:
              schema:
                type: string
                example: sk_test_API_KEY
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: renewTestApiKey
      tags:
        - organization
      summary: Renew Test API Key
      description: |
        Renew the Test environment secret key of the organization and immediately invalidate the previous one.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/test \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const newTestApiKey = await facturapi.organizations.renewTestApiKey(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var newTestApiKey = await facturapi.Organization.RenewTestApiKeyAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $new_test_api_key = $facturapi->Organizations->renewTestApiKey(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Test API Key
          content:
            application/json:
              schema:
                type: string
                example: sk_test_API_KEY
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/apikeys/live:
    put:
      operationId: renewLiveApiKey
      tags:
        - organization
      summary: Renew Live API Key
      description: |
        Generate a new Live environment secret key for the organization.
        This operation does not invalidate previously generated keys.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/live \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const newLiveApiKey = await facturapi.organizations.renewLiveApiKey(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var newLiveApiKey = await facturapi.Organization.RenewLiveApiKeyAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $new_live_api_key = $facturapi->Organizations->renewLiveApiKey(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID of the organization
      security:
        - "SecretUsertKey": []
      responses:
        "200":
          description: Live API Key
          content:
            application/json:
              schema:
                type: string
                example: sk_live_API_KEY
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /webhooks:
    post:
      operationId: createWebhook
      tags:
        - webhooks
      summary: Create webhook
      description: |
        Register a new webhook in your Facturapi organization.
        
        Use this call to receive notifications of asynchronous events to the API.
        
        Test and live environment webhooks are independent.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/webhooks \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "enabled_events": ["receipt.self_invoice_complete"],
                    "url": "http://webhook_api.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.webhooks.create({
                    "enabled_events": ["receipt.self_invoice_complete"],
                    "url": "http://webhook_api.com"
                  });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Webhook.CreateAsync(new Dictionary<string, object>
            {
              ["enabled_events"] = new Dictionary<string, object>["receipt.self_invoice_complete"],
              ["url"] = "http://webhook_api.com"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Webhooks->create([
              "enabled_events" => ["receipt.self_invoice_complete"],
              "url" => "http://webhook_api.com"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/WebhookCreate"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "201":
          description: New `Webhook` object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "200":
          description: An existing `Webhook` object with the same URL was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listWebhooks
      tags:
        - webhooks
      summary: List webhooks
      description: |
        Returns a list of webhooks created previously for the organization.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/webhooks \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -G \
              -d 'page=1'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const searchResult = await facturapi.webhooks.list({
              limit: 0,
              page: 1
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var searchResult = await facturapi.Webhooks.ListAsync(new Dictionary<string, object>
            {
              ["page"] = 1
              ["limit"] = 0,
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $searchResult = $facturapi->Webhooks->all([
              "page" => 1
            ]);
      parameters:
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /webhooks/{webhook_id}:
    get:
      operationId: getWebhook
      tags:
        - webhooks
      summary: Retrieve webhook by ID
      description: |
        Retrieve the webhook subscription by its ID.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/webhooks/590ce6c56d04f840aa8438af \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.Webhooks.retrieve('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Webhooks.RetrieveAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Webhooks->retrieve( "5a3ee743f508333611ad6b3c" );
      parameters:
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
          description: ID of the webhook
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Webhook` object"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: editWebhook
      tags:
        - webhooks
      summary: Edit webhook
      description: |
        Update the information of an existing webhook with the parameters you send in the request.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/webhooks/590ce6c56d04f840aa8438af \
              -X PUT
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "status": "disabled",
                    "enabled_events": ["receipt.self_invoice_complete"]
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.webhooks.update(
              '590ce6c56d04f840aa8438af',
              {
                "status": "disabled",
                "enabled_events": ["receipt.self_invoice_complete"]
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Webhooks.UpdateAsync(
              "590ce6c56d04f840aa8438af",
              new Dictionary<string, object>
              {
                ["status"] = "disabled",
                ["address"] = new Dictionary<string>["receipt.self_invoice_complete"]
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Webhooks->update("590ce6c56d04f840aa8438af", [
                "status" => "disabled",
                "address" => ["receipt.self_invoice_complete"]
              ]
            ]);
      parameters:
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
          description: ID of the webhook
      requestBody:
        $ref: "#/components/requestBodies/WebhookEdit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Webhook` object edited successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteWebhook
      tags:
        - webhooks
      summary: Delete Webhook
      description: |
        Deletes the webhook subscription from the organization.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/webhooks/590ce6c56d04f840aa8438af \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const removedCustomer = await facturapi.webhooks.del('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Webhooks.DeleteAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Webhooks->delete( "5a3fefd9f508333611ad6b43" );
      parameters:
        - in: path
          name: webhook_id
          schema:
            type: string
          required: true
          description: ID of the webhook
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: "`Webhook` object deleted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
          
  /check:
    get:
      tags:
        - tools
      summary: Health check
      description: |
        Check the health of the Facturapi API.
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: API is operational
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        "401":
          description: Error de autenticación. Asegúrate de estar usando tu llave secreta.
        "502":
          description: Servicio temporalmente no disponible.
          
  /tools/tax_id_validation:
    get:
      tags:
        - tools
      summary: Validate RFC (tax_id)
      description: |
        Check the status of an RFC in the list of **EFOS** (Empresas que
        Facturan Operaciones Simuladas). When appearing in this list, the RFC is
        or was suspected of engaging in simulated fiscal operations (factureras).

        The response (detailed below) includes the results of this validation.
        It includes the boolean property `is_valid`, which Facturapi resolves by
        interpreting the response. A value of `true` for this property indicates
        that the RFC has no issues to resolve and is free of problems; and the
        opposite for `false`.

        Additionally, you can check the `data` property to see the raw values of
        the query to the SAT.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/tools/tax_id_validation?tax_id=BBA830831LJ2 \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const validation = await facturapi.tools.validateTaxId('BBA830831LJ2');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            
            var customer = await facturapi.Tools.ValidateTaxIdAsync("BBA830831LJ2");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            
            $customer = $facturapi->Tools->validateTaxId("BBA830831LJ2");
      parameters:
        - in: query
          name: tax_id
          required: true
          schema:
            type: string
            description: RFC a validar
            example: BBA830831LJ2
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Validation result
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaxIdValidationResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /catalogs/products:
    get:
      tags:
        - sat_keys
      summary: Product/Service Key
      description: Search in the SAT Product/Service catalog, which contains the key to include in the invoice.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/catalogs/products?q=ukelele \
              -H "Authorization: Bearer sk_test_API_KEY" 
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const searchResult = await facturapi.catalogs.searchProducts({
              q: 'ukelele'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            var searchResult = await facturapi.Catalog.SearchProducts(
              new Dictionary<string, object>
              {
                ["q"] = "ukelele"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $result = $facturapi->Catalogs->searchProducts([
              "q" => "ukelele"
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Text search. Text to search in the product/service classification description.
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCatalogSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /catalogs/units:
    get:
      tags:
        - sat_keys
      summary: Units of Measure
      description: Search in the SAT Units of Measure catalog.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/catalogs/units?q=pulgada \
              -H "Authorization: Bearer sk_test_API_KEY" 
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const searchResult = await facturapi.catalogs.searchUnits({
              q: 'pulgada'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            var searchResult = await facturapi.Catalog.SearchUnits(
              new Dictionary<string, object>
              {
                ["q"] = "pulgada"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $result = $facturapi->Catalogs->searchUnits([
              "q" => "pulgada"
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Query. Text to search in the description of the unit of measure.
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "SecretLiveKey": []
        - "SecretTestKey": []
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitCatalogSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
x-webhooks:
  "Global invoice created":
    post:
      summary: Global invoice created
      description: |
        Notifies about the creation of a global invoice from e-Receipts.
      tags:
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Type of event
                      exacmple: "invoice.global_invoice_created"
                      enum:
                        - invoice.global_invoice_created
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of object associated with the event
                          enum:
                            - invoice
                        object:
                          $ref: "#/components/schemas/Invoice"
  "Invoice status updated":
    post:
      summary: Invoice status updated
      description: |
        Notifies about changes in the `status` field of an invoice.

        Used in the case of having created the invoice asynchronously (`async` param).
      tags:
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Type of event
                      exacmple: "invoice.status_updated"
                      enum:
                        - invoice.status_updated
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of object associated with the event
                          enum:
                            - invoice
                        object:
                          $ref: "#/components/schemas/Invoice"
  "Cancellation status updated":
    post:
      tags:
        - events
      summary: Cancellation status updated
      description: |
        Notifies about changes in the `cancellation_status` field of an invoice.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Type of event
                      enum:
                        - invoice.cancellation_status_updated
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of object associated with the event
                          enum:
                            - invoice
                        object:
                          $ref: "#/components/schemas/Invoice"
  "Self-invoice completed":
    post:
      tags:
        - events
      summary: Self-invoice completed
      description: |
        Notifies about the completion of a self-invoice.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Type of event
                      exacmple: "receipt.self_invoice_complete"
                      enum:
                        - receipt.self_invoice_complete
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of object associated with the event
                          enum:
                            - receipt
                        object:
                          $ref: "#/components/schemas/Receipt"
  "Receipt status updated":
    post:
      tags:
        - events
      summary: Receipt status updated
      description: |
        Notifies about changes in the `status` field of a receipt.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Type of event
                      enum:
                        - receipt.status_updated
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of object associated with the event
                          enum:
                            - receipt
                        object:
                          $ref: "#/components/schemas/Receipt"
components:
  responses:
    BadRequest:
      description: Error in some of the request parameters
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    Unauthenticated:
      description: Authentication error
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    Conflict:
      description: |
        Conflict in the request. The operation that is being attempted cannot be completed due to conflicts in the current state of the resource.
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    NotFound:
      description: Resource not found
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    UnexpectedError:
      required: true
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"

  requestBodies:
    CustomerCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CustomerCreateInput"
    CustomerEdit:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/CustomerProperties"
    ProductCreate:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProductProperties"
    ProductEdit:
      required: true
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProductProperties"
    InvoiceCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvoiceCreateInput"
    InvoiceCreatePending:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/InvoiceIngresoInput"
              - $ref: "#/components/schemas/InvoiceEgresoInput"
              - $ref: "#/components/schemas/InvoicePagoInput"
              - $ref: "#/components/schemas/InvoiceNominaInput"
              - $ref: "#/components/schemas/InvoiceTrasladoInput"
    InvoiceEdit:
      required: true
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/InvoiceIngresoEditInput"
              - $ref: "#/components/schemas/InvoiceEgresoEditInput"
              - $ref: "#/components/schemas/InvoicePagoEditInput"
              - $ref: "#/components/schemas/InvoiceNominaEditInput"
              - $ref: "#/components/schemas/InvoiceTrasladoEditInput"
    ReceiptCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReceiptInput"
    ReceiptInvoice:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvoiceReceiptInput"
    ReceiptCreateGlobalInvoice:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GlobalInvoiceInput"
    RetentionCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RetentionInput"
    OrganizationCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationCreateInput"
    OrganizationEditLegal:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationLegalInput"
    OrganizationUploadCerts:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationCertsInput"
    OrganizationUploadLogo:
      required: true
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationLogoInput"
    OrganizationEditCustomization:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationCustomizationInput"
    OrganizationEditReceiptsSettings:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationReceiptsInput"
    OrganizationEditDomain:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationDomainInput"
    WebhookCreate:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebhookCreateInput"

    WebhookEdit:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/WebhookCreateEdit"

  parameters:
    SearchDate:
      in: query
      name: date
      style: deepObject
      schema:
        $ref: "#/components/schemas/DateRange"
      description: Object with requested date range.
    SearchPage:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
      description: Page of results to return, starting from page 1.
    SearchLimit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        default: 50
        maximum: 100
      description: Number from 1 to 100 representing the maximum amount of results to return for pagination purposes.

  schemas:
    EventBase:
      type: object
      properties:
        id:
          type: string
          description: ID of the event
          exacmple: 61f81a81bd4661b11b9b404e
        created_at:
          type: string
          format: date-time
          description: Creation date and time of the event
          exacmple: 2022-03-30T00:00:00Z
        livemode:
          type: boolean
          description: Indicates if the event was generated in Test mode (false) or Live mode (true).
          exacmple: false
        organization:
          type: string
          description: ID of the organization this event is related to
          exacmple: 61f81a7fbd4661b11b9b3f27
    DateRange:
      type: object
      properties:
        gt:
          type: string
          format: date-time
          title: Greater than
          description: Lower exclusive limit of the date range to request.
        gte:
          type: string
          format: date-time
          title: Greater than or equals
          description: Lower inclusive limit of the date range to request.
        lt:
          type: string
          format: date-time
          title: Lesser than
          description: Upper exclusive limit of the date range to request.
        lte:
          type: string
          format: date-time
          title: Lesser than or equals
          description: Upper inclusive limit of the date range to request.
    GenericError:
      type: object
      properties:
        message:
          type: string
          title: Error description
          description: Indicates what went wrong and may include a suggestion on how to fix the error.

    # Common base objects
    SearchResult:
      type: object
      properties:
        page:
          type: integer
          example: 1
          title: Página
          description: The current page number within the search results
        total_pages:
          type: integer
          example: 1
          title: Total pages
          description: The total number of pages available in the search results
        total_results:
          type: integer
          example: 1
          title: Total results
          description: The total number of results available in the search
    ResourceAutoGeneratedProps:
      type: object
      required:
        - id
        - created_at
        - livemode
      properties:
        id:
          type: string
          description: ID of the object
          example: "590ce6c56d04f840aa8438af"
        created_at:
          type: string
          format: date-time
          description: Creation date and time
          example: "2017-05-05T20:55:33.468Z"
        livemode:
          type: boolean
          description: Indicates if the object was created in Live mode (true) or Test mode (false).
          example: false

    # Global objects
    TaxIdValidationResult:
      type: object
      properties:
        efos:
          type: object
          description: |
            Result of the validation in the list of Companies that
            Issue Simulated Operations (factureras or EFOS) of the SAT.
          properties:
            is_valid:
              type: boolean
              example: true
              description: |
                Indicates if the RFC has any issues related to this list.
                `true`: The RFC is not in the EFOS list or its situation was
                appealed and resulted in a favorable outcome. `false`: The RFC
                is registered as "Presumed" or "Definitive" in the EFOS list.
            data:
              type: object
              description: |
                Object with the result of the search at the SAT.
                All the information contained in this object comes from the SAT.
              properties:
                mensaje:
                  type: string
                  description: |
                    Available only when the RFC was not found in the list,
                    which is good.
                fechaLista:
                  type: string
                  example: Information updated on September 17, 2023
                  description: Text indicating the date of the list update.
                detalles:
                  type: array
                  description: Array with the details of the search in the EFOS list.
                  items:
                    type: object
                    properties:
                      rfc:
                        type: string
                        example: NOR170627727
                        description: The RFC consulted, as a confirmation.
                      razonSocial:
                        type: string
                        example: NORMANDIA FERRE,
                        description: Taxpayer's fiscal name.
                      situacionContribuyente:
                        type: string
                        example: Definitivo
                        description: |
                          Text indicating the current situation. Check
                          [this table](#situación-del-contribuyente) for details on the possible values.
                      numFechaPresuncion:
                        type: string
                        example: 500-05-2020-23758 de fecha 03 de noviembre de 2020
                        description: Text with identifier and date of the presumption report.
                      pubFechaSatPresuntos:
                        type: string
                        format: "DD/MM/YYYY"
                        example:  03/11/2020
                        description: Date of publication of the presumption.
                      numGlobalPresuncion:
                        type: string
                        example: 500-05-2020-23758 de fecha 03 de noviembre de 2020
                        description: Text with identifier and date of publication in the global presumption list.
                      pubFechaDofPresuntos:
                        type: string
                        format: "DD/MM/YYYY"
                        example: 18/11/2020
                        description: Date of publication in the Official Gazette of the Federation (DOF).
                      pubSatDefinitivos: 
                        type: string
                        example: 500-05-2021-151
                        description: Text with identifier of the publication of the "Definitive" status.
                      pubDofDefinitivos: 
                        type: string
                        format: "DD/MM/YYYY"
                        example: 25/05/2021
                        description: Date of publication of the "Definitive" status in the DOF.
                      numFechaSentFav:
                        type: string
                        example: 500-05-2021-15156 de fecha 25 de mayo de 2021
                        description: Text with identifier and date of favorable sentence.
                      pubSatSentFav: 
                        type: string
                        example: 08/06/2021
                        format: "DD/MM/YYYY"
                        description: Date of favorable sentence.
                      
    ProductCatalogResult:
      type: object
      properties:
        key:
          type: string
          description: Key from the SAT catalog
          example: 60131324
        description:
          type: string
          description: Description
          example: Ukelele
        score:
          type: number
          description: |
            Number from 0 to 1 representing the level of match of the
            result with respect to the search query.
          example: 0.8
    UnitCatalogResult:
      type: object
      properties:
        key:
          type: string
          description: Key from the SAT catalog
          example: INH
        description:
          type: string
          description: Description
          example: Pulgada
        score:
          type: number
          description: |
            Number from 0 to 1 representing the level of match of the
            result with respect to the search query.
          example: 0.9

    ProductCatalogSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/ProductCatalogResult"
    UnitCatalogSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/UnitCatalogResult"

    
    LocalTax:
      type: object
      required:
        - rate
        - type
      properties:
        rate:
          type: number
          example: 0.10
          description: Tax rate in decimal format.
        base:
          type: number
          default: 100% of subtotal
          description: Tax base amount.
        type:
          type: string
          description: Tax name. Free text.
        withholding:
          type: boolean
          default: false
          description: Indicates if it is a withholding tax (`true`) or a transferred tax (`false`).
    BaseTax:
      title: Tax
      type: object
      required:
        - rate
      discriminator:
        propertyName: type
        mapping:
          IVA: "#/components/schemas/BaseTax"
          ISR: "#/components/schemas/BaseTax"
          IEPS: "#/components/schemas/IepsTax"
      properties:
        rate:
          type: number
          example: 0.16
          description: Tax rate in decimal format.
        base:
          type: number
          default: 100% of subtotal
          description: Tax base amount.
        type:
          type: string
          default: IVA
          description: Type of tax
          enum:
            - IVA
            - ISR
            - IEPS
        factor:
          type: string
          default: Tasa
          enum:
            - Tasa
            - Cuota
            - Exento
          description: Factor type. Tasa (rate), Cuota (amount), or Exento (exempt).
        withholding:
          type: boolean
          default: false
          description: Indicates if it is a withholding tax (`true`) or a transferred tax (`false`).
    IepsTax:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseTax"
        - type: object
          properties:
            ieps_mode:
              type: string
              default: sum_before_taxes
              enum:
                - sum_before_taxes
                - break_down
                - unit
                - subtract_before_break_down
              description: |
                Indicates in which way the tax is calculated.

                `"sum_before_taxes"`: Apply the IEPS to the subtotal first and use the result as the base for the rest of the taxes in the product.

                `"break_down"`: Charge and break down the IEPS at the same level as the rest of the taxes in the product.

                `"unit"`: Apply the IEPS before the unit price, and use the original unit price as the base for the rest of the taxes.

                `"subtract_before_break_down"`: Apply the IEPS only to calculate taxes like IVA de traslado and retentions, and use the original unit price as the base for the rest of the taxes.
                
                Consult with your accountant which case applies to your company and product.

    Stamp:
      type: object
      description: Information about the digital stamp added by the PAC.
      properties:
        signature:
          type: string
          description: Digital signature of the fiscal document.
        date:
          type: string
          format: date-time
          description: Stamp date in ISO8601 format (UTC String).
        sat_cert_number:
          type: string
          description: SAT certificate serial number used for stamping.
        sat_signature:
          type: string
          description: Digital stamp of the fiscal document.

    LineItem:
      type: object
      properties:
        quantity:
          type: number
          description: Quantity of units included in the same concept.
          example: 1
        discount:
          type: number
          description: Total discount amount applied to this concept.
          example: 0
        product:
          $ref: "#/components/schemas/LineItemProduct"
          description: |
            Object with information about the product or service invoiced.
        parts:
          $ref: "#/components/schemas/Parts"
          description: Object with information about the parts conforming this item or product.
    ThirdParty:
      type: object
      description: |
        Object with information about the third-party contributor, on behalf of whom the operation is carried out.

        Corresponds to the "ACuentaTerceros" field in the CFDI.
      properties:
        legal_name:
          type: string
          description: Name or business name of the third party.
          example: "The Michael Scott Paper Company"
        tax_id:
          type: string
          description: RFC of the third party.
          example: "MIC920101HN7"
        tax_system:
          type: string
          maxLength: 3
          minLength: 3
          description: Fiscal regime of the third party.
          example: "601"
        zip:
          type: string
          description: Postal code of the third party.
          example: "01234"
    LineItemInput:
      title: LineItem
      required:
        - product
      type: object
      description: Concepts included in the document
      properties:
        quantity:
          type: number
          required: false
          default: 1
          description: Quantity of units included in the same concept.
          example: 1
        discount:
          type: number
          description: Total discount amount applied to this concept.
          default: 0
          example: 0
        product:
          description: Object with information about the product or service invoiced.
          oneOf:
            - $ref: "#/components/schemas/LineItemProductInput"
            - type: string
              title: product_id
              description: ID of a product previously registered in Facturapi
        parts:
          type: array
          items:
            $ref: "#/components/schemas/PartInput"
        customs_keys:
          type: array
          items:
            type: string
          description: Customs entry numbers (pedimento) associated with this concept.
        complement:
          type: string
          format: xml
          description: XML code of your complement.
        third_party:
          allOf:
            - type: object
              required:
                - legal_name
                - tax_id
                - tax_system
                - zip
            - $ref: "#/components/schemas/ThirdParty"
        property_tax_account:
          type: string
          description: Bank account number for property tax.
          example: "0102030405"
    LineItemEgresoInput:
      title: LineItem
      required:
        - product
      type: object
      description: Concepts included in the document
      properties:
        quantity:
          type: number
          default: 1
          description: Quantity of units included in the same concept.
          example: 1
        discount:
          type: number
          description: Total discount amount applied to this concept.
          default: 0
          example: 0
        product:
          description: Object with information about the product or service invoiced.
          oneOf:
            - $ref: "#/components/schemas/LineItemProductEgresoInput"
            - type: string
              title: product_id
              description: ID of a product previously registered in Facturapi
        parts:
          type: array
          items:
            $ref: "#/components/schemas/PartInput"
        customs_keys:
          type: array
          items:
            type: string
          description: Customs entry numbers (pedimento) associated with this concept.
        complement:
          type: string
          format: xml
          description: XML code of your complement.
        third_party:
          allOf:
            - type: object
              required:
                - legal_name
                - tax_id
                - tax_system
                - zip
            - $ref: "#/components/schemas/ThirdParty"
    LineItemTrasladoInput:
      title: LineItem
      required:
        - product
      type: object
      description: Concepts included in the document
      properties:
        quantity:
          type: number
          default: 1
          description: Quantity of units included in the same concept.
          example: 1
        product:
          description: Object with information about the product or service invoiced.
          oneOf:
            - $ref: "#/components/schemas/LineItemTrasladoProductInput"
            - type: string
              title: product_id
              description: ID of a product previously registered in Facturapi
        customs_keys:
          type: array
          items:
            type: string
          description: Customs entry numbers (pedimento) associated with this concept.
        complement:
          type: string
          format: xml
          description: XML code of your complement.
        parts:
          type: array
          items:
            $ref: "#/components/schemas/PartInput"
        third_party:
          type: object
          required:
            - legal_name
            - tax_id
            - tax_system
            - zip
          properties:
            legal_name:
              type: string
              description: Name or business name of the third party.
              example: "The Michael Scott Paper Company"
            tax_id:
              type: string
              description: RFC of the third party.
              example: "STA920101HN7"
            tax_system:
              type: string
              maxLength: 3
              minLength: 3
              description: Fiscal regime of the third party.
              example: "601"
            zip:
              type: string
              description: Postal code of the third party.
              example: "01234"

    CustomComplementData:
      title: string
      type: string
      format: xml
      description: XML code of your complement as you want it to be inserted in the XML. It must contain only one root XML node.
    CustomComplementProperties:
      title: CustomComplement
      type: object
      properties:
        type:
          type: string
          enum:
            - custom
          description: Type of complement.
        data:
          $ref: '#/components/schemas/CustomComplementData'
    CustomComplementInput:
      title: CustomComplement
      allOf:
        - type: object
          required:
            - type
            - data
        - $ref: "#/components/schemas/CustomComplementProperties"
    NominaComplementDataInput:
      title: NominaComplementData
      description: |
        Object with the information of the payroll complement.
      allOf:
        - type: object
          required:
            - fecha_inicial_pago
            - fecha_final_pago
            - num_dias_pagados
            - receptor
            - percepciones
        - $ref: "#/components/schemas/NominaComplementDataDirectProperties"
        - $ref: "#/components/schemas/NominaComplementDataNestedInput"
    NominaComplementDataProperties:
      description: Payroll (nómina) complement
      allOf:
        - $ref: "#/components/schemas/NominaComplementDataDirectProperties"
        - $ref: "#/components/schemas/NominaComplementDataNestedProperties"
    NominaComplementDataDirectProperties:
      type: object
      properties:
        tipo_nomina:
          type: string
          default: O
          enum:
            - O
            - E
          description: |
            Type of payroll.
            - `"O"` (Ordinary): For payments made in a regular manner, such as salaries.
            - `"E"` (Extraordinary): For payments outside the ordinary, such as settlements, bonuses, or Christmas bonuses.
        fecha_pago:
          type: string
          format: date
          default: now
          description: Payment date of the payroll to the worker.
        fecha_inicial_pago:
          type: string
          format: date
          description: Initial date of the payment period.
        fecha_final_pago:
          type: string
          format: date
          description: Final date of the payment period.
        num_dias_pagados:
          type: number
          minimum: 0
          exclusiveMinimum: true
          description: Number of days paid. It can be an integer or a fraction.
    NominaComplementDataNestedInput:
      type: object
      properties:
        emisor:
          $ref: "#/components/schemas/NominaEmisorProperties"
        receptor:
          $ref: "#/components/schemas/NominaReceptorInput"
        percepciones:
          $ref: "#/components/schemas/NominaPercepcionesInput"
        deducciones:
          type: array
          description: Array of objects where applicable deductions are detailed.
          items:
            $ref: "#/components/schemas/NominaDeduccionInput"
        otros_pagos:
          type: array
          description: Array of objects where other applicable payments are detailed.
          items:
            title: OtroPago
            allOf:
              - $ref: "#/components/schemas/NominaOtroPagoInput"
              - type: object
                properties:
                  compensacion_saldos_a_favor:
                    $ref: "#/components/schemas/NominaCompensacionInput"
        incapacidades:
          type: array
          description: Array of objects with information about paid incapacities.
          items:
            $ref: "#/components/schemas/NominaIncapacidadInput"
    NominaComplementDataNestedProperties:
      type: object
      properties:
        emisor:
          $ref: "#/components/schemas/NominaEmisorProperties"
        receptor:
          $ref: "#/components/schemas/NominaReceptorProperties"
        percepciones:
          $ref: "#/components/schemas/NominaPercepcionesProperties"
        deducciones:
          type: array
          description: Array of objects where applicable deductions are detailed.
          items:
            $ref: "#/components/schemas/NominaDeduccionProperties"
        otros_pagos:
          type: array
          description: Array of objects where other applicable payments are detailed.
          items:
            allOf:
              - $ref: "#/components/schemas/NominaOtroPagoDirectProperties"
              - type: object
                properties:
                  compensacion_saldos_a_favor:
                    $ref: "#/components/schemas/NominaCompensacionProperties"
        incapacidades:
          type: array
          description: Array of objects with information about paid incapacities.
          items:
            $ref: "#/components/schemas/NominaIncapacidadProperties"

    NominaIncapacidadInput:
      title: Incapacidad
      allOf:
        - type: object
          required:
            - dias_incapacidad
            - tipo_incapacidad
        - $ref: "#/components/schemas/NominaIncapacidadProperties"
    NominaIncapacidadProperties:
      type: object
      properties:
        dias_incapacidad:
          type: integer
          # description: Número de días enteros que el trabajador se incapacitó en el periodo.
          description: Number of days the worker was incapacitated in the period.
        tipo_incapacidad:
          type: string
          description: Key from the catalog [Type of incapacity](#tipo-de-incapacidad).
        importe_monetario:
          type: number
          description: Monetary amount of the paid incapacity.
    NominaOtroPagoInput:
      title: OtroPago
      allOf:
        - type: object
          required:
            - tipo_otro_pago
            - clave
            - importe
        - $ref: "#/components/schemas/NominaOtroPagoDirectProperties"
        - type: object
          properties:
            compensacion_saldos_a_favor:
              $ref: "#/components/schemas/NominaCompensacionInput"
    NominaOtroPagoDirectProperties:
      type: object
      properties:
        tipo_otro_pago:
          type: string
          description: Key from the catalog [Type of Other Payment](#tipo-de-otro-pago).
        clave:
          type: string
          minLength: 3
          maxLength: 15
          description: Key of another payroll payment, specific to each employer's accounting.
        concepto:
          type: string
          description: Alternative description corresponding to the key used.
        importe:
          type: number
          description: Amount for another payment concept.
        subsidio_causado:
          type: number
          description: |
            Caused subsidy according to the subsidy table for employment
            published in Annex 8 of the current Fiscal Miscellaneous Resolution.

            This value will be inserted within the `SubsidioAlEmpleo` node, and is
            required when the value of `tipo_otro_pago` is `"002"`.
    NominaCompensacionInput:
      allOf:
        - type: object
          required:
            - saldo_a_favor
            - ano
            - remanente_sal_fav
        - $ref: "#/components/schemas/NominaCompensacionProperties"
    NominaCompensacionProperties:
      type: object
      description: Object with information about the compensation of balances in favor of a worker.
      properties:
        saldo_a_favor:
          type: number
          description: Amount for a balance in favor determined by the employer to the worker in previous periods or exercises.
        ano:
          type: integer
          description: Year in which the balance in favor of the worker was determined.
        remanente_sal_fav:
          type: number
          description: Remaining balance in favor of the worker.
    NominaDeduccionInput:
      title: Deduccion
      allOf:
        - type: object
          required:
            - tipo_deduccion
            - clave
            - importe
        - $ref: "#/components/schemas/NominaDeduccionProperties"
    NominaDeduccionProperties:
      type: object
      properties:
        tipo_deduccion:
          type: string
          description: Key from the catalog [Type of deduction](#tipo-de-deducción).
        concepto:
          type: string
          description: Deduction concept. If not sent, the description of the deduction type catalog will be used.
        clave:
          type: string
          minLength: 3
          maxLength: 15
          description: Internal control key assigned by the employer to each deduction (discount) of payroll specific to its accounting.
        importe:
          type: number
          description: Amount of the deduction.
    NominaPercepcionesInput:
      type: object
      title: Percepciones
      description: Object to indicate the applicable earnings.
      required:
        - percepcion
      properties:
        percepcion:
          type: array
          description: Object with detailed information of each earning.
          items:
            $ref: "#/components/schemas/NominaPercepcionInput"
        jubilacion_pension_retiro:
          $ref: "#/components/schemas/NominaJubilacionInput"
        separacion_indemnizacion:
          $ref: "#/components/schemas/NominaSeparacionInput"
    NominaPercepcionesProperties:
      type: object
      title: Percepciones
      description: Object to indicate the applicable earnings.
      properties:
        percepcion:
          type: array
          description: Object with detailed information of each earning.
          items:
            $ref: "#/components/schemas/NominaPercepcionProperties"
        jubilacion_pension_retiro:
          $ref: "#/components/schemas/NominaJubilacionProperties"
        separacion_indemnizacion:
          $ref: "#/components/schemas/NominaSeparacionProperties"
    NominaSeparacionInput:
      title: Separacion
      allOf:
        - type: object
          required:
            - total_pagado
            - num_anos_servicio
            - ultimo_sueldo_mens_ord
            - ingreso_acumulable
            - ingreso_no_acumulable
        - $ref: "#/components/schemas/NominaSeparacionProperties"
    NominaSeparacionProperties:
      type: object
      title: Jubilacion
      description: Object with detailed information of payments for separation (dismissal) or compensation.
      properties:
        total_pagado:
          type: number
          description: Total amount paid for separation or compensation.
        num_anos_servicio:
          type: integer
          description: Number of years of service worked by the worker, rounded up to the nearest whole number.
        ultimo_sueldo_mens_ord:
          type: number
          description: Last ordinary monthly salary received by the worker.
        ingreso_acumulable:
          type: number
          description: Amount for accumulable income.
        ingreso_no_acumulable:
          type: number
          description: Amount for non-accumulable income.
    NominaJubilacionInput:
      title: Jubilacion
      allOf:
        - type: object
          required:
            - ingreso_acumulable
            - ingreso_no_acumulable
        - $ref: "#/components/schemas/NominaJubilacionProperties"
    NominaJubilacionProperties:
      type: object
      description: Object with detailed information of payments for retirement, pensions, or retirement benefits.
      properties:
        total_una_exhibicion:
          type: number
          description: Total amount paid in a single installment. 
        total_parcialidad:
          type: number
          description: Total amount paid in separate installments.
        monto_diario:
          type: number
          description: Daily amount received by the worker when the payment is made in installments.
        ingreso_acumulable:
          type: number
          description: Accumulable income received by the worker.
        ingreso_no_acumulable:
          type: number
          description: Non-accumulable income received by the worker.
    NominaPercepcionProperties:
      title: Percepcion
      allOf:
        - $ref: "#/components/schemas/NominaPercepcionDirectProperties"
        - $ref: "#/components/schemas/NominaPercepcionNestedProperties"
    NominaPercepcionInput:
      title: Percepcion
      allOf:
        - type: object
          required:
            - tipo_percepcion
            - clave
            - importe_gravado
            - importe_exento
        - $ref: "#/components/schemas/NominaPercepcionDirectProperties"
        - $ref: "#/components/schemas/NominaPercepcionNestedInput"
    NominaPercepcionDirectProperties:
      type: object
      properties:
        tipo_percepcion:
          type: string
          description: Key from the catalog [Type of earnings](#tipo-de-percepcion).
        concepto:
          type: string
          description: Earnings concept. If not sent, the description of the earnings type catalog will be used.
        clave:
          type: string
          minLength: 3
          maxLength: 15
          description: Internal control key assigned by the employer to each payroll earning specific to its accounting.
        importe_gravado:
          type: number
          description: Taxable amount for the concept indicated in the type of earnings.
        importe_exento:
          type: number
          description: Exempt amount for the concept indicated in the type of earnings.
    NominaPercepcionNestedInput:
      type: object
      properties:
        acciones_o_titulos:
          $ref: "#/components/schemas/NominaAccionesInput"
        horas_extra:
          type: array
          description: Arreglo de objetos para expresar las horas extra aplicables. Requerido cuando el tipo de percepción es “019” (Horas extras).
          items:
            $ref: "#/components/schemas/NominaHorasExtraInput"
    NominaPercepcionNestedProperties:
      type: object
      properties:
        acciones_o_titulos:
          $ref: "#/components/schemas/NominaAccionesProperties"
        horas_extra:
          type: array
          description: Arreglo de objetos para expresar las horas extra aplicables. Requerido cuando el tipo de percepción es “019” (Horas extras).
          items:
            $ref: "#/components/schemas/NominaHorasExtraProperties"
    NominaHorasExtraInput:
      title: HorasExtra
      allOf:
        - type: object
          required:
            - dias
            - tipo_horas
            - horas_extra
            - importe_pagado
        - $ref: "#/components/schemas/NominaHorasExtraProperties"
    NominaHorasExtraProperties:
      type: object
      title: HorasExtra
      properties:
        dias:
          type: integer
          description: Número de días en que el trabajador laboró horas extra adicionales a su jornada normal de trabajo.
        tipo_horas:
          type: string
          description: Clave del catálogo [Tipo de Horas](#tipo-de-Horas).
        horas_extra:
          type: integer
          description: Número de horas extra trabajadas en el periodo.
        importe_pagado:
          type: number
          description: Importe pagado por las horas extra.
    NominaAccionesInput:
      title: Accion
      allOf:
        - type: object
          required:
            - valor_mercado
            - precio_al_otorgarse
        - $ref: "#/components/schemas/NominaAccionesProperties"
    NominaAccionesProperties:
      type: object
      title: Accion
      description: Objeto para expresar ingresos por acciones o títulos valor que representan bienes. Es requerido cuando existan ingresos por sueldos derivados de adquisición de acciones o títulos.
      properties:
        valor_mercado:
          type: number
          description: Valor de mercado de las Acciones o Títulos valor al ejercer la opción.
        precio_al_otorgarse:
          type: number
          description: Precio establecido al otorgarse la opción de ingresos en acciones o títulos valor.
    NominaReceptorProperties:
      type: object
      title: Receptor
      description: Información del trabajador.
      allOf:
        - $ref: "#/components/schemas/NominaReceptorDirectProperties"
        - $ref: "#/components/schemas/NominaReceptorNestedProperties"
    NominaReceptorInput:
      type: object
      title: Receptor
      description: Información del trabajador.
      allOf:
        - type: object
          required:
            - curp
            - tipo_contrato
            - tipo_regimen
            - num_empleado
            - periodicidad_pago
            - clave_ent_fed
        - $ref: "#/components/schemas/NominaReceptorDirectProperties"
        - $ref: "#/components/schemas/NominaReceptorNestedInput"
    NominaReceptorDirectProperties:
      type: object
      properties:
        curp:
          type: string
          description: CURP del trabajador.
        num_seguridad_social:
          type: string
          description: Número de seguridad social.
        fecha_inicio_rel_laboral:
          type: string
          format: date
          description: Fecha de inicio de la relación laboral entre el empleador y el empleado.
        antiguedad:
          oneOf:
            - type: string
            - type: boolean
          default: true
          description: Antigüedad del empleado en el formato especificado por el SAT. Si se envía un `string`, se espera que éste contenga la antigüedad en el formato que especifica el SAT. Si se envía el valor booleano `false`, este campo no se incluirá en la factura. Si se envía el valor booleano `true` y `fecha_inicio_rel_laboral` existe, este valor se calculará con la diferencia entre la fecha de inicio de relación laboral y la fecha de pago.
        tipo_contrato:
          type: string
          description: Clave del catálogo del SAT [Tipo de Contrato](#tipo-de-contrato).
        sindicalizado:
          type: boolean
          default: false
          description: Indica si el trabajador está asociado a un sindicato.
        tipo_jornada:
          type: string
          description: Clave del catálogo del SAT [Tipo de Jornada](#tipo-de-jornada).
        tipo_regimen:
          type: string
          description: Clave del catálogo del SAT [Tipo de Régimen](#tipo-de-régimen).
        num_empleado:
          type: string
          minLength: 1
          maxLength: 15
          description: Número interno de empleado, asignado por el empleador.
        departamento:
          type: string
          description: Nombre del departamento o área a la que pertenece el trabajador.
        puesto:
          type: string
          description: Nombre del puesto asignado al empleado o el nombre de la actividad que realiza.
        riesgo_puesto:
          type: string
          description: Clave del catálogo del SAT [Riesgo del Puesto](#riesgo-del-puesto).
        periodicidad_pago:
          type: string
          description: Clave del catálogo del SAT [Periodicidad de Pago](#periodicidad-del-pago).
        banco:
          type: string
          description: Clave del banco de acuerdo al catálogo del SAT “Bancos” que puedes consultar utilizando nuestra [herramienta de búsqueda](https://dashboard.facturapi.io/catalogs/bank).
        cuenta_bancaria:
          type: string
          description: |
            Número de cuenta bancaria (11 caracteres) o número de teléfono celular (10 caracteres) o número de tarjeta (15 ó 16 caracteres) o la CLABE (18 caracteres) o número de monedero electrónico donde se realiza el depósito de nómina.
        salario_base_cot_apor:
          type: number
          description: Importe de la retribución en efectivo por cuota diaria, gratificaciones, percepciones, alimentación, habitación, primas, comisiones, prestaciones en especie, etc.
        salario_diario_integrado:
          type: number
          description: Salario que se integra con los pagos hechos en efectivo por cuota diaria, gratificaciones, percepciones, habitación, primas, comisiones, prestaciones en especie y cualquier otra cantidad o prestación que se entregue al trabajador por su trabajo.
        clave_ent_fed:
          type: string
          description: Clave de la entidad federativa en donde el trabajador prestó sus servicios al empleador, que puedes consultar utilizando nuestra [herramienta de búsqueda](https://dashboard.facturapi.io/catalogs/state).
    NominaReceptorNestedProperties:
      type: object
      properties:
        sub_contratacion:
          type: array
          description: Arreglo de objetos para expresar información sobre la empresa que se beneficia del trabajo del empleado, en casos donde el emisor preste servicios de subcontratación.
          items:
            $ref: "#/components/schemas/NominaSubContratacionProperties"
    NominaReceptorNestedInput:
      type: object
      properties:
        sub_contratacion:
          type: array
          description: Arreglo de objetos para expresar información sobre la empresa que se beneficia del trabajo del empleado, en casos donde el emisor preste servicios de subcontratación.
          items:
            allOf:
              - $ref: "#/components/schemas/NominaSubContratacionRequiredProperties"
              - $ref: "#/components/schemas/NominaSubContratacionProperties"
    NominaSubContratacionRequiredProperties:
      type: object
      required:
        - rfc_labora
        - porcentaje_tiempo
    NominaSubContratacionProperties:
      type: object
      properties:
        rfc_labora:
          type: string
          description: RFC de la persona o empresa que subcontrata, es decir, de la persona o empresa en donde el trabajador prestó directamente sus servicios.
        porcentaje_tiempo:
          type: number
          minimum: 0.001
          maximum: 100.000
          description: Porcentaje de tiempo en que el trabajador prestó sus servicios a la persona o empresa que lo subcontrató.
    NominaEmisorProperties:
      type: object
      title: Emisor
      description: Información del emisor, en caso de ser requerida.
      properties:
        curp:
          type: string
          minLength: 18
          maxLength: 18
          description: Requerido cuando el empleador es persona física. CURP del empleador.
        registro_patronal:
          type: string
          description: Clave de registro patronal asignada por la institución de seguridad social al patrón.
        rfc_patron_origen:
          minLength: 12
          maxLength: 13
          type: string
          description: RFC de la persona que fungió como patrón. Se usa cuando el pago se realiza a través de un tercero.
        entidad_sncf:
          type: object
          description: Información para que las entidades adheridas al Sistema Nacional de Coordinación Fiscal realicen la identificación del origen de los recursos.
          properties:
            origen_recurso:
              type: string
              enum:
                - IP
                - IF
                - IM
              description: |
                Clave de origen de recurso.

                - `“IP”`: Ingresos Propios
                - `“IF”`: Ingresos Federales
                - `“IM”`: Ingresos mixtos.
            monto_recurso_propio:
              type: number
              description: |
                Importe de recursos propios. Requerido cuando el origen del recurso es por ingresos mixtos.

    PagoOrCustomComplementProperties:
      title: Complement
      type: object
      discriminator:
        propertyName: type
        mapping:
          pago: "#/components/schemas/PagoComplementProperties"
          custom: "#/components/schemas/CustomComplementProperties"
      properties:
        type:
          type: string
          enum:
            - pago
            - custom
          description: Tipo de complemento.

    PagoOrCustomComplementInput:
      type: object
      title: Complement
      discriminator:
        propertyName: type
        mapping:
          pago: "#/components/schemas/PagoComplementInput"
          custom: "#/components/schemas/CustomComplementInput"
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - nomina
            - custom
          description: Tipo de complemento.
    PagoComplementProperties:
      allOf:
        - $ref: "#/components/schemas/NominaOrCustomComplementProperties"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/NominaComplementDataProperties"
    PagoComplementInput:
      allOf:
        - $ref: "#/components/schemas/PagoOrCustomComplementInput"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/PagoComplementDataInput"
    PagoComplementDataInput:
      type: array
      title: PagoComplementData
      description: Pagos a incluir en este comprobante. Lo más común es incluir un sólo pago. Un caso en el que se debe de agregar más de uno es cuando el pago se realiza con 2 formas de pago distintas; por ejemplo, cuando se paga una parte con tarjeta y otra en efectivo.
      items:
        $ref: "#/components/schemas/PaymentInput"

    NominaOrCustomComplementProperties:
      title: Complement
      type: object
      discriminator:
        propertyName: type
        mapping:
          nomina: "#/components/schemas/NominaComplementProperties"
          custom: "#/components/schemas/CustomComplementProperties"
      properties:
        type:
          type: string
          enum:
            - nomina
            - custom
          description: Tipo de complemento.

    NominaOrCustomComplementInput:
      type: object
      title: Complement
      discriminator:
        propertyName: type
        mapping:
          nomina: "#/components/schemas/NominaComplementInput"
          custom: "#/components/schemas/CustomComplementInput"
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - nomina
            - custom
          description: Tipo de complemento.
    NominaComplementProperties:
      allOf:
        - $ref: "#/components/schemas/NominaOrCustomComplementProperties"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/NominaComplementDataProperties"
    NominaComplementInput:
      allOf:
        - $ref: "#/components/schemas/NominaOrCustomComplementInput"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/NominaComplementDataInput"
    NamespaceRequiredProperties:
      type: object
      required:
        - prefix
        - uri
        - schema_location
    NamespaceProperties:
      type: object
      title: Namespace
      properties:
        prefix:
          type: string
          description: Prefijo o nombre del namespace.
          example: iedu
        uri:
          type: string
          format: url
          description: Dirección URL asociada al namespace.
          example: http://www.sat.gob.mx/iedu
        schema_location:
          type: string
          format: url
          example: http://www.sat.gob.mx/sitio_interet/cfd/iedu/iedu.xsd
          description: Dirección URL del esquema de validación XSD.

    CommonAddressProperties:
      type: object
      properties:
        street:
          type: string
          description: Nombre de la calle
          example: Blvd. Atardecer
        exterior:
          type: string
          description: Número exterior.
          example: 142
        interior:
          type: string
          description: Número interior.
          example: 4
        neighborhood:
          type: string
          description: Colonia
          example: Centro
        city:
          type: string
          description: Ciudad
          example: Huatabampo
        municipality:
          type: string
          description: Municipio o delegación
          example: Huatabampo
        zip:
          type: string
          description: Código postal
          example: 86500

    # Main resources
    Webhook:
      title: Objeto Webhook
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/WebhookProperties"
    WebhookSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Webhook"
    WebhookProperties:
      properties:
        organization:
          type: string
          description: |
            Id de la organización la cual se está dando de alta el webhook.
        livemode:
          type: boolean 
          example: false
          description: Ambiente en el cual se está dando de alta el webhook.
        enabled_events:
          type: string
          example: ["receipt.cancellation_status"]
          description: Eventos dados de alta para el webhook.
        url:
          type: string
          format: email
          description: Http ruta para el webhook
          example: http://webhook_api.com
        status:
          type: string
          description:  Status del webhook
          example: enabled
    WebhookCreateInput:
      title: Webhook
      allOf:
        - type: object
          required:
            - enabled_events
            - url
          properties:
            url:
              type: string
              description: URL del webhook a dar de alta.
              example: http://webhook_api.com
            enabled_events:
              type: array
              items:
                type: string
                enum: 
                  - "receipt.self_invoice_complete"
                  - "receipt.cancellation_status_updated"
                  - "receipt.status_updated"
              description: Los eventos que puedes dar de alta para el webhook. 
              example: ["receipt.self_invoice_complete"]
    WebhookCreateEdit:
      title: Webhook
      allOf:
        - type: object
          required:
            - enabled_events
            - url
          properties:
            status:
              type: string
              description: Estatus del webhook
              enum:
                - "disabled"
                - "enabled"
              example: disabled
            enabled_events:
              type: array
              items:
                type: string
                enum: 
                  - "receipt.self_invoice_complete"
                  - "receipt.cancellation_status_updated"
                  - "receipt.status_updated"
              description: Los eventos que puedes dar de alta para el webhook. 
              example: ["receipt.self_invoice_complete"]


    Customer:
      title: Objeto Customer
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/CustomerProperties"
    CustomerSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Customer"
    CustomerProperties:
      allOf:
        - $ref: "#/components/schemas/CustomerCommonProperties"
        - type: object
          properties:
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: Domicilio fiscal.
                  properties:
                    state:
                      type: string
                      description: Si el país es México ("MEX"), contiene el nombre del Estado o Entidad Federativa. Para extranjeros contiene el código de Estado de acuerdo al estándar [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), que puedes consultar en nuestro [Catálogo de Estados](https://dashboard.facturapi.io/catalogs/state).
                      example: Sonora
                    country:
                      type: string
                      description: Código de país acorde al estándar [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3), del [Catálogo de Países](https://dashboard.facturapi.io/catalogs/country).
                      example: MEX
                      default: MEX
    CustomerCommonProperties:
      type: object
      properties:
        legal_name:
          type: string
          description: |
            Nombre Fiscal o Razón Social del cliente. *sin* el régimen societario (ej.: S.A. de C.V.).
          example: Dunder Mifflin
        tax_id:
          type: string
          example: ABC101010111
          description: En clientes de México contiene el RFC del cliente. Para extranjeros es opcional y representa el número de registro de identificacón tributaria, es decir, el equivalente al RFC en el país del cliente.
        tax_system:
          type: string
          example: "601"
          maxLength: 3
          minLength: 3
          description: Requerido para clientes nacionales. Clave del régimen fiscal del cliente, del catálogo de [Regímenes Fiscales](#r%C3%A9gimen-fiscal).
        email:
          type: string
          format: email
          description: Dirección de correo electrónico al cual enviar las facturas generadas.
          example: email@example.com
        phone:
          type: string
          description: Teléfono del cliente.
          example: 6474010101
    CustomerCreateInput:
      title: Customer
      allOf:
        - $ref: "#/components/schemas/CustomerCommonProperties"
        - type: object
          required:
          - legal_name
          - tax_id
          - tax_system
          - address
          properties:
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: Domicilio fiscal.
                  required:
                    - zip
                  properties:
                    state:
                      type: string
                      description: Si el país es México ("MEX"), contiene el nombre del Estado o Entidad Federativa. Para extranjeros contiene el código de Estado de acuerdo al estándar [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), que puedes consultar en nuestro [Catálogo de Estados](https://dashboard.facturapi.io/catalogs/state).
                      example: Sonora
                    country:
                      type: string
                      description: Código de país acorde al estándar [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3), del [Catálogo de Países](https://dashboard.facturapi.io/catalogs/country).
                      example: MEX
                      default: MEX

    LineItemProductInput:
      title: Product
      allOf:
        - $ref: "#/components/schemas/ProductProperties"
    
    LineItemProductEgresoInput:
      title: Product
      allOf:
        - $ref: "#/components/schemas/ProductEgresoProperties"

    LineItemTrasladoProductInput:
      title: Product
      required:
        - description
      type: object
      properties:
        description:
          type: string
          description: Descripción del bien o servicio como aparecerá en la factura.
          example: Ukelele
        product_key:
          type: string
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          example: 60131324
        unit_key:
          type: string
          default: H87
          description: |
            Clave de unidad de medida, del catálogo del SAT. El valor por default `"H87"` (elemento) es la clave para representar una pieza o unidad de venta (lápiz, cuaderno, televisión, etc).
            Si la unidad de tu producto es kilogramos, litros, horas u otra unidad, te proporcionamos una manera conveniente de encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
        unit_name:
          type: string
          default: Elemento
          description: Palabra que representa la unidad de medida de tu producto. Debe estar relacionada con la clave de unidad `unit_key`.
        sku:
          type: string
          description: Identificador de uso interno designado por la empresa. Puede tener cualquier valor.

    LineItemProduct:
      allOf:
        - type: object
          properties:
            id:
              nullable: true
              type: string
              description: ID del producto base. Sólo presente si se utilizó como base un objeto `Product` guardado previamente.
              example: 58e93bd8e86eb318b0197454
        - $ref: "#/components/schemas/ProductProperties"
    Parts:
      type: object
      properties:
        description:
          type: string
          description: Descripción del producto o servicio.
        product_key:
          type: string
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra herramienta de búsqueda de claves.
        quantity:
          type: number
          description: Cantidad
          example: 1
        sku:
          type: string
          description: Identificador de uso interno designado por la empresa. Puede tener cualquier valor.
        unit_price:
          type: number
          description: Precio unitario
        unit_name:
          type: string
          description: Nombre de la unidad de medida que expresa la cantidad.
        customs_keys:
          type: array
          items:
            type: string
          description: Números de customs entryo (pedimento) aduanal asociados a esta parte.
    PartInput:
      allOf:
        - type: object
          required:
            - description
            - product_key
        - $ref: "#/components/schemas/Parts"
    Product:
      title: Objeto Product
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/ProductProperties"
    ProductSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Product"
    ProductProperties:
      type: object
      required:
        - description
        - product_key
        - price
      properties:
        description:
          type: string
          description: Descripción del bien o servicio como aparecerá en la factura.
          example: Ukelele
        product_key:
          type: string
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          example: 60131324
        price:
          type: number
          description: Precio por unidad del bien o servicio. Este valor representará el precio con IVA incluído o sin él, dependiendo del valor de `tax_included`.
          example: 345.60
        tax_included:
          type: boolean
          default: true
          nullable: true
          description: |
            - `true`: Indica que todos los impuestos aplicables están incluídos en el precio (atributo price) y se desglosarán automáticamente al emitir la factura.
            - `false`: Indica que el atributo price no incluye impuestos, por lo que aquellos impuestos a aplicar se sumarán en el precio final.
        taxability:
          type: string
          default: |
            '01' si el array `taxes` está vacío; '02' si el array `taxes` tiene por lo menos un elemento.
          enum:
            - "01"
            - "02"
            - "03"
            - "04"
            - "05"
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
            - `05`: Sí objeto de impuesto, IVA crédito PODEBI.
        taxes:
          type: array
          default: IVA trasladado 16%
          nullable: true
          example:
            [{
              "type": "IVA",
              "rate": 0.16
            }]
          description: Lista de impuestos que deberán aplicarse a este producto. Si el parámetro se omite o es nulo, se guardará con un elemento que representa el IVA trasladado del 16%, que es el impuesto más común. En caso de mandar explícitamente un arreglo vacío, se entiende que el producto está exento de impuestos.
          items:
            $ref: "#/components/schemas/BaseTax"
        local_taxes:
          type: array
          description: Arreglo de impuestos locales (estatales o municipales), en caso de haberlos.
          default: []
          items:
            $ref: "#/components/schemas/LocalTax"
        unit_key:
          type: string
          default: H87
          nullable: true
          description: |
            Clave de unidad de medida, del catálogo del SAT. El valor por default `"H87"` (elemento) es la clave para representar una pieza o unidad de venta (lápiz, cuaderno, televisión, etc).
            Si la unidad de tu producto es kilogramos, litros, horas u otra unidad, puedes encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
        unit_name:
          type: string
          default: Elemento
          nullable: true
          description: Palabra que representa la unidad de medida de tu producto. Debe estar relacionada con la clave de unidad `unit_key`.
        sku:
          type: string
          nullable: true
          description: Identificador de uso interno designado por la empresa. Puede tener cualquier valor.
    ProductEgresoProperties:
      type: object
      properties:
        description:
          type: string
          description: Resumen de la operación en una sola descripción. Deben mencionarse cada uno de los productos que contempla el descuento, devolución o bonificación aplicada y que contienen las facturas relacionadas. Si el egreso está basado en un pocentaje (como al aplicar un 30% de descuento), dicho porcentaje debe incluirse en la descripción junto al nombre del producto que corresponda.
          example: Ukelele
        product_key:
          type: string
          nullable: true
          default: 84111506
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          example: 84111506
        price:
          type: number
          description: Suma total de la cantidad devuelta, descontada o bonificada.
          example: 345.60
        tax_included:
          type: boolean
          nullable: true
          default: true
          description: |
            - `true`: Indica que todos los impuestos aplicables están incluídos en el precio (atributo price) y se desglosarán automáticamente al emitir la factura.
            - `false`: Indica que el atributo price no incluye impuestos, por lo que aquellos impuestos a aplicar se sumarán en el precio final.
        taxability:
          type: string
          nullable: true
          default: "02"
          enum:
            - "01"
            - "02"
            - "03"
            - "04"
            - "05"
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
            - `05`: Sí objeto de impuesto, IVA crédito PODEBI.
        taxes:
          type: array
          nullable: true
          default: IVA trasladado 16%
          description: Lista de impuestos que deberán aplicarse a este producto. Si el parámetro se omite o es nulo, se guardará con un elemento que representa el IVA trasladado del 16%, que es el impuesto más común. En caso de mandar explícitamente un arreglo vacío, se entiende que el producto está exento de impuestos.
          items:
            $ref: "#/components/schemas/BaseTax"
        local_taxes:
          type: array
          nullable: true
          description: Arreglo de impuestos locales (estatales o municipales), en caso de haberlos.
          default: []
          items:
            $ref: "#/components/schemas/LocalTax"
        unit_key:
          type: string
          nullable: true
          default: ACT
          description: |
            Clave de unidad de medida, del catálogo del SAT.
            Puedes encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
        unit_name:
          type: string
          nullable: true
          default: Actividad
          description: Palabra que representa la unidad de medida de tu producto. Debe estar relacionada con la clave de unidad `unit_key`.
      required:
        - description
        - price
    PaymentInput:
      title: Payment
      required:
        - payment_form
        - related_documents
      type: object
      properties:
        payment_form:
          type: string
          example: "03"
          description: Código de la forma de pago según el [catálogo del SAT](#forma-de-pago). También puedes utilizar la constante `PaymentForm` incluída en nuestras librerías.
        related_documents:
          type: array
          description: Arreglo que incluye un elemento por cada comprobante de ingreso relacionado a este pago. Lo más común es que el pago esté relacionado a un sólo comprobante de ingreso. Un caso en el que se agrega más de un elemento es cuando se recibe (por ejemplo) un sólo depósito que ampara el pago de 2 facturas relacionadas. En lugar de expedir un comprobante de recepción de pago por cada factura, debes expedir sólo uno relacionando los 2 comprobantes.
          items:
            type: object
            required:
              - uuid
              - amount
              - taxes
              - installment
              - last_balance
            properties:
              uuid:
                type: string
                format: uuid
                description: Folio fiscal ó UUID del comprobante de ingreso relacionado.
              amount:
                type: number
                description: |
                  Cantidad del pago correspondiente al comprobante relacionado,
                  usando el método de pago indicado en este elemento del arreglo
                  de pagos. Este valor debe ser expresado en la moneda definida
                  en `related_documents[].currency`.
              taxes:
                type: array
                description: |
                  Arreglo con impuestos del documento relacionado que aplican al pago realizado.
                items:
                  type: object
                  required:
                    - base
                    - type
                    - rate
                  properties:
                    base:
                      type: number
                      description: |
                        Base utilizada para el cálculo del impuestos.
                    type:
                      type: string
                      enum:
                        - IVA
                        - ISR
                        - IEPS
                      description: |
                        Tipo de impuesto.
                    rate:
                      type: number
                      example: 0.16
                      description: |
                        Tasa o cuota del impuesto
                    factor:
                      type: string
                      default: Tasa
                      enum:
                        - Tasa
                        - Cuota   
                        - Exento
                      description: Tipo factor.
                    withholding:
                      type: boolean
                      default: false
                      description: Indica si el impuesto es una retención (`true`) o un traslado (`false`).
              taxability:
                type: string
                default: |
                  '01' si el array `taxes` está vacío; '02' si el array `taxes` tiene por lo menos un elemento.
                enum:
                  - "01"
                  - "02"
                  - "03"
                  - "04"
                  - "05"
                description: |
                  Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

                  - `01`: No objeto de impuesto.
                  - `02`: Sí objeto de impuesto.
                  - `03`: Sí objeto de impuesto, pero no obligado a desglose.
                  - `04`: Sí objeto de impuesto, y no causa impuesto.
                  - `05`: Sí objeto de impuesto, IVA crédito PODEBI.

              installment:
                type: integer
                description: Número de parcialidad del pago.
              last_balance:
                type: number
                description: Cantidad que estaba pendiente por pagar antes de recibir este pago. Este valor se expresa en la moneda definida en `payments[].related[].currency`.
              currency:
                type: string
                minLength: 3
                maxLength: 3
                default: MXN
                description: Si la moneda utilizada en la factura relacionada no es moneda nacional (MXN), debe especificarse su valor acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
              exchange:
                type: number
                description: |
                  Obligatorio cuando la moneda del documento relacionado es distinta a la moneda de pago. Tipo de cambio entre las dos monedas al momento del pago. Ejemplo: La factura de iingreso relacionada se registra en USD, mientras que el pago actual se realiza en MXN, este atributo debería registrarse como `0.45` (USD/MXN).
              folio_number:
                type: integer
                description: Opcionalmente se puede incluir el número de folio del documento relacionado.
              series:
                type: string
                description: Opcionalmente se puede incluir la serie del documento relacionado.
        currency:
          type: string
          minLength: 3
          maxLength: 3
          default: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          default: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        date:
          type: string
          format: date-time
          default: now
          description: Fecha en que se recibió el pago. Sólo es necesario incluirla si el pago se efectuó en una fecha anterior a la emisión de este comprobante. No se permiten fechas futuras.
        numOperacion:
          type: string
          description: Número de cheque, de autorización, de referencia, clave de rastreo SPEI, línea de captura o algún número de referencia que permita identificar la operación correspondiente al pago efectuado.
        rfcEmisorCtaOrd:
          type: string
          description: RFC de la entidad emisora de la cuenta de origen, es decir, la operadora, banco, institución financiera, emisor de monedero electrónico, etc.
        nomBancoOrdExt:
          type: string
          description: Nombre del banco ordenante.
        ctaOrdenante:
          type: string
          description: Número de cuenta con la que se realizó el pago.
        rfcEmisorCtaBen:
          type: string
          description: RFC de la entidad de la cuenta operadora destino, es decir, la operadora, banco, institución financiera, emisor de monedero electrónico, etc.
        ctaBeneficiario:
          type: string
          description: Número de cuenta donde se recibió el pago.
        tipoCadPago:
          type: string
          enum:
            - 01
          description: |
            Clave del tipo de cadena de pago que genera la entidad receptora del pago.
            Si existe este campo, es obligatorio registrar los campos `certPago`, `cadPago` y `selloPago`.
        certPago:
          type: string
          format: base64
          description: Certificado que corresponde al pago, como una cadena de texto en formato base 64.
        cadPago:
          type: string
          description: Cadena original del comprobante de pago generado por la entidad emisora de la cuenta beneficiaria.
        selloPago:
          type: string
          format: base64
          description: Sello digital que se asocie al pago expresado como una cadena de texto en formato base 64.
    CuustomerInfo:
      type: object
      description: Objeto con información parcial del cliente receptor del comprobante. Para obtener el objeto `Customer` completo, deberás consultarlo con el método de [Obtener Cliente]('#/operation/getCustomer').
      properties:
        id:
          type: string
          description: ID del objeto `customer` relacionado a la factura, en caso de no haber sido eliminado
          example: 58e93bd8e86eb318b0197456
        legal_name:
          type: string
          description: |
            Nombre Fiscal o Razón Social del cliente, *sin* incluir el régimen societario (ej.: S.A. de C.V.).
          example: Dunder Mifflin
        tax_id:
          type: string
          description: RFC del cliente.
          example: ABC101010111
        address:
          type: object
          properties:
            country:
              type: string
              format: ISO 3166-1 alpha-3
              description: Código de País acorde al estándar ISO 3166-1 alpha-3, del Catálogo de Países.
              example: MEX
    RelatedDocumentInput:
      allOf:
        - type: object
          required:
            - relationship
            - related
        - $ref: '#/components/schemas/RelatedDocument'
    RelatedDocument:
      type: object
      properties:
        relationship:
          type: string
          description: Clave de relación del catálogo del SAT (que puedes consultar en [esta tabla](#relacion-entre-facturas)). Es requerido cuando se envíe el parámetro `related`.
        documents:
          type: array
          default: []
          items:
            type: string
          description: Folios fiscales (UUID) de facturas relacionadas.
    Invoice:
      title: Objeto Invoice
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/InvoiceProperties"
    InvoiceDraft:
      title: Objeto Invoice con status draft
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/InvoiceDraftProperties"
    InvoiceSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Invoice"
    InvoiceRequiredProperties:
      type: object
      required:
        - description
        - invoice_key
        - price
    InvoiceProperties:
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - valid
            - canceled
            - draft
          description: |
            Estado actual de la factura.
          example: valid
        cancellation_status:
          type: string
          enum:
            - none
            - pending
            - accepted
            - rejected
            - expired
          description: |
            Estado actual de la solicitud de cancelación, en caso de haberla realizado. Puedes leer más a detalle en la sección de [Cancelar Factura](#operation/deleteInvoice)).
          example: none
        verification_url:
          type: string
          format: uri
          description: Dirección URL para verificar el estado del CFDI en el portal del SAT. Este link es el mismo que aparece en el código QR, en el PDF de la factura.
          example: https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
        date:
          type: string
          format: date-time
          default: now
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC String).
        address:
          allOf:
            - $ref: "#/components/schemas/CommonAddressProperties"
            - type: object
              description: Domicilio de expedición de la factura.
              properties:
                state:
                  type: string
                  description: Nombre del Estado o Entidad Federativa.
                  example: Sonora
        type:
          type: string
          enum:
            - I
            - E
            - P
            - N
            - T
          description: |
            Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
        customer:
          $ref: "#/components/schemas/CuustomerInfo"
        total:
          type: number
          description: Monto total facturado.
          example: 10944.82
        uuid:
          type: string
          format: uuid
          description: Folio fiscal de la factura, asignado por el SAT.
          example: 39c85a3f-275b-4341-b259-e8971d9f8a94
        folio_number:
          type: integer
          description: Número de folio autoincremental para control interno y sin validez fiscal.
          example: 914
        series:
          type: string
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal. En el PDF se imprime junto al //www.facturapi.io/img/logo.svg
          example: F
        external_id:
          type: string
          description: Identificador que puedes usar para relacionar esta factura con tus registros para después buscar por este número.
        idempotency_key:
          type: string
          description: Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        payment_form:
          type: string
          description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
          example: 06
        is_ready_to_stamp:
          type: boolean
          description: |
            Este campo es asignado automáticamente por Facturapi. Indica si una factura
            con status `draft` está completa y lista para intentar timbrarse. Si el valor es `true`, puedes
            intentar timbrar la factura con el método [Timbrar Factura]('#/operation/stampInvoice').
            Si el valor es `false`, debes usar el método [Actualizar Factura]('#/operation/updateDraftInvoice')
            para completar los campos faltantes.

            En una factura con status diferente a `draft`, este campo siempre será `false`.
        items:
          type: array
          description: Conceptos incluidos en el comprobante
          items:
            $ref: "#/components/schemas/LineItem"
        related_documents:
          type: array
          description: Documentos relacionados con la factura.
          items:
            $ref: "#/components/schemas/RelatedDocument"
        currency:
          type: string
          example: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          minimum: 0
          example: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/NominaOrCustomComplementProperties"
          description: Complementos a incluir en la factura.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda`.
          items:
            $ref: "#/components/schemas/NamespaceProperties"
        stamp:
          $ref: "#/components/schemas/Stamp"
    InvoiceDraftProperties:
      type: object
      properties:
        status:
          type: string
          enum:
            - pending
            - valid
            - canceled
            - draft
          description: |
            Estado actual de la factura.
          example: draft
        cancellation_status:
          type: string
          enum:
            - none
            - pending
            - accepted
            - rejected
            - expired
          description: |
            Estado actual de la solicitud de cancelación, en caso de haberla realizado. Puedes leer más a detalle en la sección de [Cancelar Factura](#operation/deleteInvoice)).
          example: none
        verification_url:
          type: string
          format: uri
          description: Dirección URL para verificar el estado del CFDI en el portal del SAT. Este link es el mismo que aparece en el código QR, en el PDF de la factura.
          example: null
        date:
          type: string
          format: date-time
          example: null
          description: Fecha de timbrado del comprobante en formato ISO8601 (UTC String). Si el estado es `draft`, este campo es nulo.
        address:
          allOf:
            - $ref: "#/components/schemas/CommonAddressProperties"
            - type: object
              description: Domicilio de expedición de la factura.
              properties:
                state:
                  type: string
                  description: Nombre del Estado o Entidad Federativa.
                  example: Sonora
        type:
          type: string
          enum:
            - I
            - E
            - P
            - N
            - T
          description: |
            Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
        customer:
          $ref: "#/components/schemas/CuustomerInfo"
        total:
          type: number
          description: Monto total facturado.
          example: 0
        uuid:
          type: string
          format: uuid
          description: Folio fiscal de la factura, asignado por el SAT, en caso de haber sido timbrada.
          example: 0
        folio_number:
          type: integer
          description: Número de folio autoincremental para control interno y sin validez fiscal.
          example: 914
        series:
          type: string
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal. En el PDF se imprime junto al //www.facturapi.io/img/logo.svg
          example: F
        external_id:
          type: string
          description: Identificador que puedes usar para relacionar esta factura con tus registros para después buscar por este número.
        idempotency_key:
          type: string
          description: Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        payment_form:
          type: string
          description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
          example: 06
        items:
          type: array
          description: Conceptos incluidos en el comprobante
          items:
            $ref: "#/components/schemas/LineItem"
        related_documents:
          type: array
          description: Documentos relacionados con la factura.
          items:
            $ref: "#/components/schemas/RelatedDocument"
        currency:
          type: string
          example: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          minimum: 0
          example: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/NominaOrCustomComplementProperties"
          description: Complementos a incluir en la factura.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda`.
          items:
            $ref: "#/components/schemas/NamespaceProperties"
        is_ready_to_stamp:
          type: boolean
          description: |
            Este campo es asignado automáticamente por Facturapi. Indica si una factura
            con status `draft` está completa y lista para intentar timbrarse. Si el valor es `true`, puedes
            intentar timbrar la factura con el método [Timbrar Factura]('#/operation/stampInvoice').
            Si el valor es `false`, debes usar el método [Actualizar Factura]('#/operation/updateDraftInvoice')
            para completar los campos faltantes.

            En una factura con status diferente a `draft`, este campo siempre será `false`.
        stamp:
          allOf:
            - $ref: "#/components/schemas/Stamp"
            - type: object
              example: null

    InvoiceableCommonInput:
      type: object
      properties:
        folio_number:
          type: integer
          default: autoincremental
          description: Número de folio asignado por la empresa para control interno. Si se omite, se asignará el valor autoincremental de la organización.
        series:
          type: string
          maxLength: 25
          nullable: true
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal.
        pdf_custom_section:
          type: string
          nullable: true
          format: xml
          description: |
            En caso de que necesites incluir más información en el PDF, este campo te permite enviar código HTML con tu propio contenido.

            Por seguridad, el código que puedes enviar está limitado a las siguientes etiquetas: `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `div`, `p`, `span`, `small`, `br`, `b`, `i`, `ul`, `ol`, `li`, `strong`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `th` y `td`. No se permiten atributos ni estilos.
        addenda:
          type: string
          nullable: true
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          default: []
          description: Si incluiste el parámetro `complements`, este campo es opcional; en cambio si inclusite el parámetro `addenda`, debes enviar la información necesaria para incluir estos namespaces en el documento XML.
          items:
            allOf:
              - $ref: "#/components/schemas/NamespaceRequiredProperties"
              - $ref: "#/components/schemas/NamespaceProperties"
        pdf_options:
          type: object
          description: Configura qué campos opcionales se queiren mostrar en el PDF. El SAT no obliga a mostrar estos campos, pero pueden activarse según la preferencia del cliente para la factura en curso. Utiliza este campo para peticiones de generación de facturas en las cuales necesites utilizar una configuración distinta al campo pdf_extra de la organización.
          properties:
            codes:
              type: boolean
              default: true
              description: |
                Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
            product_key:
              type: boolean
              default: true
              description: |
                Mostrar la clave de producto-servicio.
            round_unit_price:
              type: boolean
              default: false
              description: |
                Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
            tax_breakdown:
              type: boolean
              default: true
              description: |
                Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
            ieps_breakdown:
              type: boolean
              default: true
              description: |
                Mostrar el desglose de ieps en el PDF. Si se desactiva, solo se mostrarán los impuestos relacionados al IVA en el subtotal.    
    InvoiceableCommonEditInput:
      type: object
      properties:
        folio_number:
          type: integer
          description: Número de folio asignado por la empresa para control interno. Si se omite, se asignará el valor autoincremental de la organización.
        series:
          type: string
          maxLength: 25
          nullable: true
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal.
        pdf_custom_section:
          type: string
          nullable: true
          format: xml
          description: |
            En caso de que necesites incluir más información en el PDF, este campo te permite enviar código HTML con tu propio contenido.

            Por seguridad, el código que puedes enviar está limitado a las siguientes etiquetas: `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `div`, `p`, `span`, `small`, `br`, `b`, `i`, `ul`, `ol`, `li`, `strong`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `th` y `td`. No se permiten atributos ni estilos.
        addenda:
          type: string
          nullable: true
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Si incluiste el parámetro `complements`, este campo es opcional; en cambio si inclusite el parámetro `addenda`, debes enviar la información necesaria para incluir estos namespaces en el documento XML.
          items:
            allOf:
              - $ref: "#/components/schemas/NamespaceRequiredProperties"
              - $ref: "#/components/schemas/NamespaceProperties"
        pdf_options:
          type: object
          description: Configura qué campos opcionales se queiren mostrar en el PDF. El SAT no obliga a mostrar estos campos, pero pueden activarse según la preferencia del cliente para la factura en curso. Utiliza este campo para peticiones de generación de facturas en las cuales necesites utilizar una configuración distinta al campo pdf_extra de la organización.
          properties:
            codes:
              type: boolean
              default: true
              description: |
                Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
            product_key:
              type: boolean
              default: true
              description: |
                Mostrar la clave de producto-servicio.
            round_unit_price:
              type: boolean
              default: false
              description: |
                Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
            tax_breakdown:
              type: boolean
              default: true
              description: |
                Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
            ieps_breakdown:
              type: boolean
              default: true
              description: |
                Mostrar el desglose de ieps en el PDF. Si se desactiva, solo se mostrarán los impuestos relacionados al IVA en el subtotal.    
    InvoiceCommonInputProperties:
      allOf:
        - type: object
          properties:
            customer:
              description: Cliente receptor de la factura.
              oneOf:
                - $ref: "#/components/schemas/CustomerCreateInput"
                - type: string
                  title: customer_id
                  description: ID del objeto 'customer' previamente registrado en Facturapi.
                  example: 58e93bd8e86eb318b0197456
            status:
              type: string
              enum:
                - pending
                - draft
              default: pending  
              description: |
                Estado inicial de la factura. Si se envía `draft`, la factura se guardará como borrador y no se timbrará ni se
                enviará al SAT. También al enviar `draft`, todos los campos requeridos se vuelven
                opcionales. Si se omite, el estado por default es `pending` y una vez timbrada (en la respuesta) este
                campo se actualizará a `valid`. Para facturas asíncronas, este campo se quedará en `pending` hasta que
                se timbre la factura.
              exacmple: draft
            date:
              type: string
              format: date-time
              default: now
              description: Fecha de expedición del comprobante en formato ISO8601 (UTC String). No puede ser anterior a 72 horas en el pasado, ni posterior al presente.
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: |
                    Puedes usar este parámetro para especificar el domicilio de expedición de la factura.
                    Este campo es opcional y si no se envía, la factura se expedirá con el domicilio de
                    la organización.
                  required:
                    - zip
                  properties:
                    state:
                      type: string
                      description: Nombre del Estado o Entidad Federativa.
                      example: Sonora
            external_id:
              type: string
              nullable: true
              description: Identificador opcional que puedes usar para relacionar esta factura con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
            idempotency_key:
              type: string
              nullable: true
              description: |
                Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
                Si se deja en blanco, no se tomará en cuenta.
        - $ref: "#/components/schemas/InvoiceableCommonInput"
    InvoiceCommonEditInputProperties:
      allOf:
        - type: object
          properties:
            customer:
              description: Cliente receptor de la factura.
              oneOf:
                - $ref: "#/components/schemas/CustomerCreateInput"
                - type: string
                  title: customer_id
                  description: ID del objeto 'customer' previamente registrado en Facturapi.
                  example: 58e93bd8e86eb318b0197456
            status:
              type: string
              enum:
                - draft
              description: |
                Estado inicial de la factura. Sólo es posible editar una factura con status `draft`,
                y no es posible cambiar el status al editar, por lo que el único valor permitido es `draft`.
              exacmple: draft
            date:
              type: string
              format: date-time
              description: Fecha de expedición del comprobante en formato ISO8601 (UTC String). No puede ser anterior a 72 horas en el pasado, ni posterior al presente.
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: |
                    Puedes usar este parámetro para especificar el domicilio de expedición de la factura.
                    Este campo es opcional y si no se envía, la factura se expedirá con el domicilio de
                    la organización.
                  required:
                    - zip
                  properties:
                    state:
                      type: string
                      description: Nombre del Estado o Entidad Federativa.
                      example: Sonora
            external_id:
              type: string
              nullable: true
              description: Identificador opcional que puedes usar para relacionar esta factura con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
            idempotency_key:
              type: string
              nullable: true
              description: |
                Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
                Si se deja en blanco, no se tomará en cuenta.
        - $ref: "#/components/schemas/InvoiceableCommonEditInput"
    InvoiceCreateInput:
      type: object
      oneOf:
        - title: Ingreso
          discriminator:
            propertyName: status
            mapping:
              pending: "#/components/schemas/InvoiceIngresoInput"
              draft: "#/components/schemas/InvoiceIngresoEditInput"
            properties:
              status:
                type: string
                enum:
                  - pending
                  - draft
                default: pending
                description: |
                  Estado inicial de la factura. Si se envía `draft`, la factura se guardará como borrador y no se timbrará ni se
                  enviará al SAT. También al enviar `draft`, todos los campos requeridos se vuelven
                  opcionales. Si se omite, el estado por default es `pending` y una vez timbrada (en la respuesta) este
                  campo se actualizará a `valid`. Para facturas asíncronas, este campo se quedará en `pending` hasta que
                  se timbre la factura.
                exacmple: draft
        - title: Egreso
          discriminator:
            propertyName: status
            mapping:
              pending: "#/components/schemas/InvoiceEgresoInput"
              draft: "#/components/schemas/InvoiceEgresoEditInput"
          properties:
            status:
                type: string
                enum:
                  - pending
                  - draft
                default: pending
                description: |
                  Estado inicial de la factura. Si se envía `draft`, la factura se guardará como borrador y no se timbrará ni se
                  enviará al SAT. También al enviar `draft`, todos los campos requeridos se vuelven
                  opcionales. Si se omite, el estado por default es `pending` y una vez timbrada (en la respuesta) este
                  campo se actualizará a `valid`. Para facturas asíncronas, este campo se quedará en `pending` hasta que
                  se timbre la factura.
                exacmple: draft
        - title: Pago
          discriminator:
            propertyName: status
            mapping:
              pending: "#/components/schemas/InvoicePagoInput"
              draft: "#/components/schemas/InvoicePagoEditInput"
          properties:
            status:
                type: string
                enum:
                  - pending
                  - draft
                default: pending
                description: |
                  Estado inicial de la factura. Si se envía `draft`, la factura se guardará como borrador y no se timbrará ni se
                  enviará al SAT. También al enviar `draft`, todos los campos requeridos se vuelven
                  opcionales. Si se omite, el estado por default es `pending` y una vez timbrada (en la respuesta) este
                  campo se actualizará a `valid`. Para facturas asíncronas, este campo se quedará en `pending` hasta que
                  se timbre la factura.
                exacmple: draft
        - title: Nómina
          discriminator:
            propertyName: status
            mapping:
              pending: "#/components/schemas/InvoiceNominaInput"
              draft: "#/components/schemas/InvoiceNominaEditInput"
          properties:
            status:
                type: string
                enum:
                  - pending
                  - draft
                default: pending
                description: |
                  Estado inicial de la factura. Si se envía `draft`, la factura se guardará como borrador y no se timbrará ni se
                  enviará al SAT. También al enviar `draft`, todos los campos requeridos se vuelven
                  opcionales. Si se omite, el estado por default es `pending` y una vez timbrada (en la respuesta) este
                  campo se actualizará a `valid`. Para facturas asíncronas, este campo se quedará en `pending` hasta que
                  se timbre la factura.
                exacmple: draft
        - title: Traslado
          discriminator:
            propertyName: status
            mapping:
              pending: "#/components/schemas/InvoiceTrasladoInput"
              draft: "#/components/schemas/InvoiceTrasladoEditInput"
          properties:
            status:
                type: string
                enum:
                  - pending
                  - draft
                default: pending
                description: |
                  Estado inicial de la factura. Si se envía `draft`, la factura se guardará como borrador y no se timbrará ni se
                  enviará al SAT. También al enviar `draft`, todos los campos requeridos se vuelven
                  opcionales. Si se omite, el estado por default es `pending` y una vez timbrada (en la respuesta) este
                  campo se actualizará a `valid`. Para facturas asíncronas, este campo se quedará en `pending` hasta que
                  se timbre la factura.
                exacmple: draft
    InvoiceIngresoInput:
      title: Ingreso
      required:
        - customer
        - items
        - payment_form
        - use
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
              default: I
              description: Tipo de comprobante. El valor default es `“I”` (Ingreso).
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en la factura.

                El número máximo de elementos que puedes incluir en una factura es de 5,000. Si necesitas
                emitir una factura con más de 5,000 conceptos, puedes dividir la transacción en varias facturas.
              items:
                $ref: "#/components/schemas/LineItemInput"
            payment_form:
              type: string
              minLength: 2
              maxLength: 2
              example: "03"
              description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
            payment_method:
              type: string
              default: PUE
              enum:
                - PUE
                - PPD
              description: |
                Código del método de pago según el catálogo del SAT.

                - `PUE`: Pago en Una sola Exhibición
                - `PPD`: Pago en Parcialidades o Diferido
            use:
              type: string
              default: G01
              description: |
                Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos
                en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en
                nuestras librerías.

                Para factura global debe ingresarse la clave `S01`.
            currency:
              type: string
              default: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              default: 1
              description: |
                Tipo de cambio conforme a la moneda usada. Representa el número de pesos
                mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            conditions:
              type: string
              nullable: true
              minLength: 1
              maxLength: 1000
              description: Condiciones de pago
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            global:
              type: object
              nullable: true
              required:
                - periodicity
                - months
                - year
              description: |
                Objeto requerido al crear una factura global.
              properties:
                periodicity:
                  type: string
                  nullable: true
                  description: |
                    Periodicidad que abarca la factura global.

                    - `day`: Diario
                    - `week`: Semanal
                    - `fortnight`: Quincenal
                    - `month`: Mensual
                    - `two_months`: Bimestral
                  enum:
                    - day
                    - week
                    - fortnight
                    - month
                    - two_months
                months:
                  type: string
                  description: |
                    Clave que representa el mes o bimestre de la factura. Consulta
                    los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
                  example: "01"
                year:
                  type: integer
                  description: Año de la factura.
                  example: 2022
            export:
              type: string
              default: "01"
              enum:
                - "01"
                - "02"
                - "03"
                - "04"
              description: |
                Indica si el comprobante ampara una operación de exportación.

                - `01`: No aplica
                - `02`: Definitiva con clave A1
                - `03`: Temporal
                - `04`: Definitiva con clave distinta a A1 o cuando no existe enajenación en términos del CFF
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en la factura. Puedes incluir cualquier complemento en la
                factura si tú mismo construyes el nodo XML del complemento y usas el tipo `custom`.
                Es necesario agregar la información del complemento al PDF por separado usando el
                parámetro `pdf_custom_section`.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceEgresoInput:
      title: Egreso
      allOf:
        - type: object
          required:
            - type
            - customer
            - payment_form
            - items
          properties:
            type:
              type: string
              enum:
                - E
            payment_form:
              type: string
              minLength: 2
              maxLength: 2
              example: "03"
              description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
            related_documents:
              type: array
              description: Documentos relacionados con la nota de crédito.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en la nota de crédito.

                El número máximo de elementos que puedes incluir en el comprobante es de 5,000. Si necesitas
                emitir un comprobante con más de 5,000 conceptos, puedes dividir la transacción en varios comprobantes.
              items:
                $ref: "#/components/schemas/LineItemEgresoInput"
            use:
              type: string
              default: G01
              description: Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            currency:
              type: string
              default: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              default: 1
              description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en el comprobante. Puedes incluir cualquier
                complemento en el comprobante si tú mismo construyes el nodo XML del
                complemento y usas el tipo `custom`. Es necesario agregar la información
                del complemento al PDF por separado usando el parámetro `pdf_custom_section`.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoicePagoInput:
      title: Pago
      allOf:
        - type: object
          required:
            - type
            - customer
            - complements
          properties:
            type:
              type: string
              enum:
                - P
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            third_party:
              allOf:
                - type: object
                  required:
                    - legal_name
                    - tax_id
                    - tax_system
                    - zip
                - $ref: "#/components/schemas/ThirdParty"
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/PagoOrCustomComplementInput"
              description: Complementos a incluir en la factura.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceNominaInput:
      title: Nómina
      allOf:
        - type: object
          required:
            - type
            - customer
            - complements
          properties:
            type:
              type: string
              enum:
                - N
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/NominaOrCustomComplementInput"
              description: Complementos a incluir en la factura.
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceTrasladoInput:
      title: Traslado
      allOf:
        - type: object
          required:
            - type
            - items
            - customer
          properties:
            type:
              type: string
              enum:
                - T
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en el comprobante de Traslado.

                El número máximo de elementos que puedes incluir en un comprobante es de 5,000. Si necesitas
                emitir un comprobante con más de 5,000 conceptos, puedes dividir la transacción en varios comprobantes.
              items:
                $ref: "#/components/schemas/LineItemTrasladoInput"
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en el comprobante. Puedes incluir cualquier complemento en
                el comprobante si tú mismo construyes el nodo XML del complemento y usas el tipo
                `custom`. Es necesario agregar la información del complemento al PDF por separado
                usando el parámetro `pdf_custom_section`.
            use:
              type: string
              default: G01
              description: |
                Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en
                [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            currency:
              type: string
              default: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              default: 1
              description: |
                Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos
                (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            related_documents:
              type: array
              description: Documentos relacionados con el comprobante.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceIngresoEditInput:
      title: Ingreso
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
                - E
                - P
                - N
                - T
              description: |
                Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en la factura.

                El número máximo de elementos que puedes incluir en una factura es de 5,000. Si necesitas
                emitir una factura con más de 5,000 conceptos, puedes dividir la transacción en varias facturas.
              items:
                $ref: "#/components/schemas/LineItemInput"
            payment_form:
              type: string
              minLength: 2
              maxLength: 2
              example: "03"
              description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
            payment_method:
              type: string
              enum:
                - PUE
                - PPD
              description: |
                Código del método de pago según el catálogo del SAT.

                - `PUE`: Pago en Una sola Exhibición
                - `PPD`: Pago en Parcialidades o Diferido
            use:
              type: string
              example: G01
              description: |
                Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos
                en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en
                nuestras librerías.

                Para factura global debe ingresarse la clave `S01`.
            currency:
              type: string
              example: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              description: |
                Tipo de cambio conforme a la moneda usada. Representa el número de pesos
                mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            conditions:
              type: string
              nullable: true
              minLength: 1
              maxLength: 1000
              description: Condiciones de pago
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            global:
              type: object
              nullable: true
              required:
                - periodicity
                - months
                - year
              description: |
                Objeto requerido al crear una factura global.
              properties:
                periodicity:
                  type: string
                  nullable: true
                  description: |
                    Periodicidad que abarca la factura global.

                    - `day`: Diario
                    - `week`: Semanal
                    - `fortnight`: Quincenal
                    - `month`: Mensual
                    - `two_months`: Bimestral
                  enum:
                    - day
                    - week
                    - fortnight
                    - month
                    - two_months
                months:
                  type: string
                  description: |
                    Clave que representa el mes o bimestre de la factura. Consulta
                    los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
                  example: "01"
                year:
                  type: integer
                  description: Año de la factura.
                  example: 2022
            export:
              type: string
              enum:
                - "01"
                - "02"
                - "03"
                - "04"
              description: |
                Indica si el comprobante ampara una operación de exportación.

                - `01`: No aplica
                - `02`: Definitiva con clave A1
                - `03`: Temporal
                - `04`: Definitiva con clave distinta a A1 o cuando no existe enajenación en términos del CFF
            complements:
              type: array
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en la factura. Puedes incluir cualquier complemento en la
                factura si tú mismo construyes el nodo XML del complemento y usas el tipo `custom`.
                Es necesario agregar la información del complemento al PDF por separado usando el
                parámetro `pdf_custom_section`.
        - $ref: "#/components/schemas/InvoiceCommonEditInputProperties"
    InvoiceEgresoEditInput:
      title: Egreso
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
                - E
                - P
                - N
                - T
              description: |
                Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
            payment_form:
              type: string
              minLength: 2
              maxLength: 2
              example: "03"
              description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
            related_documents:
              type: array
              description: Documentos relacionados con la nota de crédito.
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en la nota de crédito.

                El número máximo de elementos que puedes incluir en el comprobante es de 5,000. Si necesitas
                emitir un comprobante con más de 5,000 conceptos, puedes dividir la transacción en varios comprobantes.
              items:
                $ref: "#/components/schemas/LineItemEgresoInput"
            use:
              type: string
              example: G01
              description: Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            currency:
              type: string
              example: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            complements:
              type: array
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en el comprobante. Puedes incluir cualquier
                complemento en el comprobante si tú mismo construyes el nodo XML del
                complemento y usas el tipo `custom`. Es necesario agregar la información
                del complemento al PDF por separado usando el parámetro `pdf_custom_section`.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoicePagoEditInput:
      title: Pago
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
                - E
                - P
                - N
                - T
              description: |
                Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            third_party:
              allOf:
                - type: object
                  required:
                    - legal_name
                    - tax_id
                    - tax_system
                    - zip
                - $ref: "#/components/schemas/ThirdParty"
            complements:
              type: array
              items:
                $ref: "#/components/schemas/PagoOrCustomComplementInput"
              description: Complementos a incluir en la factura.
        - $ref: "#/components/schemas/InvoiceCommonEditInputProperties"
    InvoiceNominaEditInput:
      title: Nómina
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
                - E
                - P
                - N
                - T
              description: |
                Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
            complements:
              type: array
              items:
                $ref: "#/components/schemas/NominaOrCustomComplementInput"
              description: Complementos a incluir en la factura.
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
        - $ref: "#/components/schemas/InvoiceCommonEditInputProperties"
    InvoiceTrasladoEditInput:
      title: Traslado
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
                - E
                - P
                - N
                - T
              description: |
                Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en el comprobante de Traslado.

                El número máximo de elementos que puedes incluir en un comprobante es de 5,000. Si necesitas
                emitir un comprobante con más de 5,000 conceptos, puedes dividir la transacción en varios comprobantes.
              items:
                $ref: "#/components/schemas/LineItemTrasladoInput"
            complements:
              type: array
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en el comprobante. Puedes incluir cualquier complemento en
                el comprobante si tú mismo construyes el nodo XML del complemento y usas el tipo
                `custom`. Es necesario agregar la información del complemento al PDF por separado
                usando el parámetro `pdf_custom_section`.
            use:
              type: string
              example: G01
              description: |
                Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en
                [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            currency:
              type: string
              example: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              description: |
                Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos
                (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            related_documents:
              type: array
              description: Documentos relacionados con el comprobante.
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
        - $ref: "#/components/schemas/InvoiceCommonEditInputProperties"

    Receipt:
      title: Objeto Receipt
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/ReceiptProperties"
    ReceiptProperties:
      allOf:
        - type: object
          properties:
            date:
              type: string
              format: date-time
              example: 2021-09-10T15:21:23.456Z
              description: Fecha de emisión del recibo.
            expires_at:
              type: string
              format: date-time
              example: 2021-09-17T15:21:23.456Z
              description: |
                Fecha de expiración en formato ISO8601 (UTC String).
                Es la fecha límite para que el cliente pueda facturar su recibo en el portal de autofactura.
                Se calcula automáticamente a partir de las configuraciones de recibo de la organización.
            status:
              type: string
              enum:
                - open
                - canceled
                - invoiced_to_customer
                - invoiced_globally
              description: Estado actual del recibo.
            self_invoice_url:
              type: string
              format: url
              example: https://factura.space/empresa-demo/r9YqYarL
              description: |
                Dirección URL para realizar autofactura. Incluye el `key` del recibo.
                Puedes usarla para generar un botón o un QR de facturación para tus clientes.
            total:
              type: number
              example: 356.78
              description: Monto total de la operación
            invoice:
              type: string
              example: 614496b471d422de4b6cfcc4
              description: ID de la factura asociada, en caso de estar facturado.
            key:
              type: string
              example: r9YqYarL
              description: Autogenerado. Identificador único alfanumérico corto, útil para acceder a la autofactura desde tu micrositio en factura.space
            items:
              type: array
              description: Conceptos incluidos en el recibo
              items:
                $ref: "#/components/schemas/LineItem"
            external_id:
              type: string
              description: Identificador que puedes usar para relacionar este recibo con tus registros para después buscar por este número.
            idempotency_key:
              type: string
              description: Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        - $ref: "#/components/schemas/ReceiptEditableProperties"
    ReceiptInput:
      allOf:
        - type: object
          required:
            - items
            - payment_form
          properties:
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en el recibo.

                El número máximo de elementos que puedes incluir en un recxibo es de 5,000. Si necesitas
                emitir una recibo con más de 5,000 conceptos, prueba dividir la transacción en varios recibos.
              items:
                $ref: "#/components/schemas/LineItemInput"
          
        - $ref: "#/components/schemas/ReceiptEditableProperties"
        - type: object
          properties:
            idempotency_key:
              type: string
              nullable: true
              description: |
                Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
                Si se deja en blanco, no se tomará en cuenta.
    ReceiptEditableProperties:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: 2021-09-10T15:21:23.456Z
          description: Fecha de emisión del recibo. Por defecto se utiliza la fecha actual.
        payment_form:
          type: string
          example: "03"
          description: Código que representa la forma de pago, según el [catálogo del SAT](#forma-de-pago).
        folio_number:
          type: integer
          example: 120
          description: Autoincremental. Número de folio del recibo para control interno y sin validez fiscal.
        currency:
          type: string
          example: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          minimum: 0
          example: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        branch:
          type: string
          description: Nombre de la sucursal donde se expidió el recibo.
        external_id:
          type: string
          nullable: true
          description: Identificador opcional que puedes usar para relacionar este recibo con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
    ReceiptSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Receipt"
    InvoiceReceiptInput:
      type: object
      required:
        - customer
      allOf:
        - type: object
          properties:
            customer:
              description: Cliente receptor de la factura.
              oneOf:
                - $ref: "#/components/schemas/CustomerCreateInput"
                - type: string
                  title: customer_id
                  description: ID del objeto 'customer' previamente registrado en Facturapi.
                  example: 58e93bd8e86eb318b0197456
            use:
              type: string
              default: G01
              description: Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            conditions:
              type: string
              nullable: true
              minLength: 1
              maxLength: 1000
              description: Condiciones de pago
        - $ref: "#/components/schemas/InvoiceableCommonInput"
    GlobalInvoiceInput:
      type: object
      required:
        - periodicity
      properties:
        from:
          type: string
          format: date
          default: Inicio del último periodo
          example: 2022-01-01T00:00:00.000
          description: |
            Fecha inicial de los recibos que se incluirán en la factura global.
            Por default, este valor es el inicio del último periodo (día, semana,
            quincena o mes), según el valor de "Periodicidad" (`periodicity`)
            en la configuración de recibos de tu organización. Este valor es requerido cuando se envíe el campo `receipts`.
        to:
          type: string
          format: date
          default: Fin del último periodo
          example: 2022-31-01T23:59:59.999
          description: |
            Fecha final de los recibos que se incluirán en la factura global.
            Por default, este valor es el fin del último periodo (día, semana,
            quincena o mes), según el valor de "Periodicidad" (`periodicity`)
            en la configuración de recibos de tu organización. Este valor es requerido cuando se envíe el campo `receipts`.
        periodicity:
          type: string
          default: Propiedad `periodicity` de la configuración de recibos de la organización.
          enum:
            - day
            - week
            - fortnight
            - month
            - two_months
          description: |
            Periodicidad que corresponde al rango de fechas utilizado.
            Si se omite, se tomará la configuración de recibos de la organización. 
            Si omites enviar los campos `from` y `to`, las fechas que se asignarán por default dependerán del valor de periodicity.
        months:
          type: string
          default: Mes contenido en el rango de fechas utilizado.
          description: |
            Clave que representa el mes o bimestre de la factura. Consulta
            los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
          example: "01"
        folio_number:
          type: integer
          default: autoincremental
          description: |
            Número de folio asignado por la empresa para control interno.
            Si se omite, se asignará el valor autoincremental de la organización.
        series:
          type: string
          maxLength: 25
          nullable: true
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal.
        date:
          type: string
          format: date
          default: Valor del atributo `to`
          example: 2022-01-01T00:00:00.000
          description: |
            Fecha de emisión de la factura.
        payment_form:
          type: string
          minLength: 2
          maxLength: 2
          example: "02"
          description: |
            description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago). Si se incluye, los recibos se agruparán y se crearán la factura global por la forma de pago.
        receipts:
          type: array
          description: |
            Recibos a incluir en la factura global. Si se incluye este parámetro, los parámetros `from` y `to` serán requeridos y tendrán que cumplir con el campo `periodicity`.
          items:
            type: string
            format: hex
            length: 24
            description: ID de un recibo previamente registrado en Facturapi.
            example: 614496b471d422de4b6cfcc4
    Retention:
      title: Objeto Retention
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/RetentionReadOnlyProperties"
        - $ref: "#/components/schemas/RetentionProperties"
    RetentionReadOnlyProperties:
      type: object
      properties:
        status:
          type: string
          enum:
            - valid
            - canceled
          description: |
            Estado actual de la retención.
          example: valid
        verification_url:
          type: string
          format: uri
          description: Dirección URL para verificar el estado de la retención en el portal del SAT. Este link es el mismo que aparece en el código QR, en el PDF de la retención.
          example: https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
        type:
          type: string
          enum:
            - Retención
          example: Retención
          description: Tipo de comprobante.
        uuid:
          type: string
          format: uuid
          description: Folio fiscal de la retención, asignado por el SAT.
          example: 39c85a3f-275b-4341-b259-e8971d9f8a94
        stamp:
          $ref: "#/components/schemas/Stamp"
        customer:
          $ref: "#/components/schemas/CuustomerInfo"
    RetentionProperties:
      type: object
      properties:
        cve_retenc:
          type: string
          example: 01
          description: Clave de la retención o información de pagos de acuerdo al catálogo del SAT.
        fecha_exp:
          type: string
          format: date-time
          example: "2021-09-15T06:03:23.000Z"
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC String).
        desc_retenc:
          type: string
          description: Si la clave de la retención es “25” (Otro tipo de retenciones), este campo se usa para registrar la descripción de la retención.
        folio_int:
          type: string
          description: Identificador alfanumérico para control interno de la empresa y sin relevancia fiscal.
        periodo:
          type: object
          description: Información sobre el periodo de la retención.
          properties:
            mes_ini:
              type: integer
              minimum: 1
              maximum: 12
              description: Mes inicial del periodo de la retención.
            mes_fin:
              type: integer
              minimum: 1
              maximum: 12
              description: Mes final del periodo de la retención.
            ejerc:
              type: integer
              description: Año o ejercicio fiscal en que se realizó la retención.
        totales:
          type: object
          description: Información sobre el total de retenciones efectuadas en el periodo correspondiente.
          properties:
            monto_tot_operacion:
              type: number
              minimum: 0
              description: Monto total de la operación, con precisión de hasta 6 decimales.
            monto_tot_grav:
              type: number
              minimum: 0
              description: Monto total gravado.
            monto_tot_exent:
              type: number
              minimum: 0
              description: Monto total exento.
            monto_tot_ret:
              type: number
              minimum: 0
              description: Suma de los montos de impuestos retenidos.
            imp_retenidos:
              type: array
              description: Colección de impuestos retenidos.
              items:
                type: object
                properties:
                  base:
                    type: number
                    minimum: 0
                    description: Base del impuesto retenido.
                  impuesto:
                    type: string
                    enum:
                      - IVA
                      - ISR
                    example: IVA
                    description: Clave del tipo de impuesto retenido, del catálogo del SAT.
                  monto:
                    type: number
                    minimum: 0
                    description: Importe del impuesto retenido
                  tipo_pago_ret:
                    type: string
                    enum:
                      - 01
                      - 02
                      - 03
                      - 04
                    description: |
                      - `01`: Pago definitivo IVA
                      - `02`: Pago definitivo IEPS
                      - `03`: Pago definitivo ISR Plataformas
                      - `04`: Pago provisional ISR
        external_id:
          type: string
          description: Identificador opcional que puedes usar para relacionar esta retención con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
        idempotency_key:
          type: string
          nullable: true
          description: |
            Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
            Si se deja en blanco, no se tomará en cuenta.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/CustomComplementData"
          description: |
            Arreglo de complementos a incluir en la factura. Cada elemento contiene
            un `string` con el código XML del complemento.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda`.
          items:
            $ref: "#/components/schemas/NamespaceProperties"
    RetentionSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Retention"
    RetentionInput:
      type: object
      required:
        - customer
        - cve_retenc
        - periodo
        - totales
      properties:
        customer:
          description: Cliente receptor de la factura.
          oneOf:
            - $ref: "#/components/schemas/CustomerCreateInput"
            - type: string
              title: customer_id
              description: ID del objeto 'customer' previamente registrado en Facturapi.
              example: 58e93bd8e86eb318b0197456
        cve_retenc:
          type: string
          example: 26
          description: Clave de la retención o información de pagos de acuerdo al [catálogo del SAT](#clave-de-retencion).
        fecha_exp:
          type: string
          format: date-time
          example: "2021-09-15T06:03:23.000Z"
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC String).
        desc_retenc:
          type: string
          description: Si la clave de la retención es “25” (Otro tipo de retenciones), este campo se usa para registrar la descripción de la retención.
        folio_int:
          type: string
          example: R123
          description: Identificador alfanumérico para control interno de la empresa y sin relevancia fiscal.
        periodo:
          type: object
          description: Información sobre el periodo de la retención.
          required:
            - mes_ini
            - mes_fin
            - ejerc
          properties:
            mes_ini:
              type: integer
              minimum: 1
              maximum: 12
              example: 9
              description: Mes inicial del periodo de la retención.
            mes_fin:
              type: integer
              minimum: 1
              maximum: 12
              example: 9
              description: Mes final del periodo de la retención.
            ejerc:
              type: integer
              example: 2021
              description: Año o ejercicio fiscal en que se realizó la retención.
        totales:
          type: object
          description: Información sobre el total de retenciones efectuadas en el periodo correspondiente.
          required:
            - monto_tot_operacion
            - monto_tot_exent
            - imp_retenidos
          properties:
            monto_tot_operacion:
              type: number
              minimum: 0
              description: Monto total de la operación, con precisión de hasta 6 decimales.
            monto_tot_grav:
              type: number
              minimum: 0
              description: Monto total gravado.
            monto_tot_exent:
              type: number
              minimum: 0
              description: Monto total exento.
            monto_tot_ret:
              type: number
              minimum: 0
              description: Suma de los montos de impuestos retenidos.
            imp_retenidos:
              type: array
              description: Colección de impuestos retenidos.
              required:
                - monto_ret
              items:
                type: object
                required:
                  - monto_ret
                  - tipo_pago_ret
                properties:
                  base_ret:
                    type: number
                    minimum: 0
                    description: Base del impuesto retenido.
                  impuesto:
                    type: string
                    enum:
                      - IVA
                      - ISR
                    example: IVA
                    description: Clave del tipo de impuesto retenido, del catálogo del SAT.
                  monto_ret:
                    type: number
                    minimum: 0
                    description: Importe del impuesto retenido
                  tipo_pago_ret:
                    type: string
                    enum:
                      - 01
                      - 02
                      - 03
                      - 04
                    description: |
                      - `01`: Pago definitivo IVA
                      - `02`: Pago definitivo IEPS
                      - `03`: Pago definitivo ISR Plataformas
                      - `04`: Pago provisional ISR
        external_id:
          type: string
          description: Identificador opcional que puedes usar para relacionar esta retención con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
        idempotency_key:
          type: string
          description: |
            Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/CustomComplementData"
          description: |
            Arreglo de complementos a incluir en la factura. Cada elemento del arreglo deberá contener
            un `string` con el código XML de tu complemento tal cual como quieres que se inserte en el
            XML del CFDI. Sólo se permite un nodo XML raíz por elemento del arreglo.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda`.
          items:
            allOf:
              - $ref: "#/components/schemas/NamespaceRequiredProperties"
              - $ref: "#/components/schemas/NamespaceProperties"

    OrganizationAddress:
      allOf:
        - $ref: "#/components/schemas/CommonAddressProperties"
        - type: object
          description: Domicilio fiscal de la organización emisora.
          properties:
            state:
              type: string
              description: Nombre del Estado o Entidad Federativa.
              example: Sonora
    OrganizationSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Organization"
    Organization:
      title: Objeto Organization
      type: object
      properties:
        id:
          type: string
          description: ID del objeto
          example: "5a2a307be93a2f00129ea035"
        created_at:
          type: string
          format: date-time
          description: Fecha de registro
          example: "2017-05-05T20:55:33.468Z"
        is_production_ready:
          type: boolean
          description: Indica si la organización tiene información necesaria para facturar en ambiente Live.
        pending_steps:
          type: array
          description: Lista de pasos que se necesitan completar para que esta organización pueda emitir facturas válidas en ambiente Live.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - legal
                  - logo
                  - certificate
                description: Código que representa el tiop de paso que se requiere completar
              description:
                type: string
                description: Texto que describe el paso que se requiere completar y que puedes usar para mostrárselo al usuario.
        legal:
          type: object
          description: Datos fiscales de la empresa.
          properties:
            name:
              type: string
              description: Nombre comercial de la organización.
            legal_name:
              type: string
              description: |
                Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.).
            tax_system:
              type: string
              example: "601"
              maxLength: 3
              minLength: 3
              description: Código de Régimen Fiscal, del [catálogo del SAT](#tipo-de-régimen).
            website:
              type: string
              description: Sitio web de la organización, que se utilizará al enviar la factura por correo electrónico.
            phone:
              type: string
              description: Teléfono de la organización, que aparecerá en el PDF de la factura.
            address:
              allOf:
                - type: object
                  description: Domicilio fiscal de la organización.
                - $ref: "#/components/schemas/OrganizationAddress"
        customization:
          type: object
          description: |
            Configuración de personalización de la organización, que se utilizarán para reflejar el branding y
            las preferencias de PDFs de la organización. Estos datos se pueden actualizar en cualquier momento.
          properties:
            has_logo:
              type: boolean
              description: Indica si la organización ya tiene un logotipo cargado.
            color:
              type: string
              format: hex
              example: BADA55
              description: Color distintivo de la marca en representación Hexadecimal RGB de 6 caracteres.
            next_folio_number:
              type: integer
              example: 123
              description: Número de folio que se asignará a la siguiente factura en ambiente Live (y que se incrementará automáticamente por cada nueva factura).
            next_folio_number_test:
              type: integer
              example: 123
              description: Número de folio que se asignará a la siguiente factura en ambiente Test (y que se incrementará automáticamente por cada nueva factura).
            pdf_extra:
              type: object
              description: Configura qué campos opcionales se queiren mostrar en el PDF. El SAT no obliga a mostrar estos campos, pero pueden activarse según la preferencia de la organización.
              properties:
                codes:
                  type: boolean
                  default: true
                  description: |
                    Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
                product_key:
                  type: boolean
                  default: true
                  description: |
                    Mostrar la clave de producto-servicio.
                round_unit_price:
                  type: boolean
                  default: false
                  description: |
                    Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
                tax_breakdown:
                  type: boolean
                  default: true
                  description: |
                    Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
                ieps_breakdown:
                  type: boolean
                  default: true
                  description: |
                    Mostrar el desglose de ieps en el PDF. Si se desactiva, solo se mostrarán los impuestos relacionados al IVA en el subtotal.    
        certificate:
          type: object
          description: |
            Información últil sobre el certificado de sello digital (CSD) de la organización, que se utilizará para firmar las facturas.
          properties:
            has_certificates:
              type: boolean
              description: Indica si la organización ya tiene el Certificado de Sello Digital (CSD) cargado.
            updated_at:
              type: string
              format: date-time
              example: "2023-05-05T20:55:33.468Z"
              description: Fecha de la última actualización del certificado.
            expires_at:
              type: string
              format: date-time
              example: "2025-05-05T20:55:33.468Z"
              description: Fecha de expiración del certificado.

    OrganizationDeleteCerts: 
      type: object
      properties:
        updated_at:
          type: string
          format: date-time
          description: Fecha de eliminación del certificado CSD.

    OrganizationCreateInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre comercial de la organización.
    OrganizationLegalInput:
      type: object
      required:
        - name
        - legal_name
        - tax_system
        - address
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre comercial de la organización.
        legal_name:
          type: string
          maxLength: 100
          description: |
            Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.).
        tax_system:
          type: string
          maxLength: 3
          minLength: 3
          example: "601"
          description: Código del Régimen Fiscal, del [catálogo del SAT](#régimen-fiscal).
        website:
          type: string
          description: Sitio web de la organización, que aparecerá en el PDF y correos de facturas y recibos.
        support_email:
          type: string
          description: Dirección de correo electrónico para aclaraciones. Aparecerá en el PDF y correos de facturas y recibos.
        phone:
          type: string
          description: Teléfono de la organización, que aparecerá en el PDF y correos de facturas y recibos.
        address:
          allOf:
            - type: object
              description: Domicilio fiscal de la organización emisora.
              required:
                - zip
                - street
                - exterior
            - $ref: "#/components/schemas/OrganizationAddress"
    OrganizationCertsInput:
      type: object
      required:
        - cerFile
        - keyFile
        - password
      properties:
        cerFile:
          type: string
          format: binary
          description: Contenido binario del archivo con extensión `.cer` del certificado CSD.
        keyFile:
          type: string
          format: binary
          description: Contenido binario del archivo con extensión `.key` del certificado CSD.
        password:
          type: string
          description: Contraseña de la llave del certificado.
    OrganizationLogoInput:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: |
            Contenido binario del archivo con la imagen que se usará como
            logotipo. Formatos soportados:
            - jpg
            - png
            - svg
    OrganizationCustomizationInput:
      type: object
      properties:
        color:
          type: string
          format: hex
          example: BADA55
          description: Color distintivo de la marca en representación Hexadecimal RGB de 6 caracteres.
        next_folio_number:
          type: integer
          example: 123
          description: Número de folio que se asignará a la siguiente factura en ambiente Live (y que se incrementará automáticamente por cada nueva factura).
        next_folio_number_test:
          type: integer
          example: 123
          description: Número de folio que se asignará a la siguiente factura en ambiente Test (y que se incrementará automáticamente por cada nueva factura).
        pdf_extra:
          type: object
          description: Configura qué campos opcionales se queiren mostrar en el PDF. El SAT no obliga a mostrar estos campos, pero pueden activarse según la preferencia de la organización.
          properties:
            codes:
              type: boolean
              default: true
              description: |
                Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
            product_key:
              type: boolean
              default: true
              description: |
                Mostrar la clave de producto-servicio.
            round_unit_price:
              type: boolean
              default: false
              description: |
                Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
            tax_breakdown:
              type: boolean
              default: true
              description: |
                Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
                        ieps_breakdown:
            ieps_breakdown:  
              type: boolean
              default: true
              description: |
                Mostrar el desglose de ieps en el PDF. Si se desactiva, solo se mostrarán los impuestos relacionados al IVA en el subtotal.   
    OrganizationReceiptsInput:
      type: object
      properties:
        periodicity:
          type: string
          default: month
          enum:
            - day
            - week
            - fortnight
            - month
            - two_months
          description: |
            Periodicidad con la que la empresa decide realizar una factura global
            (al público en general) por todos los recibos no facturados. Este
            valor se utiliza como default al crear una factura global.
        duration_days:
          type: integer
          default: 7
          description: |
            Días máximos para facturar por medio del portal de autofactura
            después de emitido el recibo y antes del último día del periodo
            definido por el atributo `periodicity`. El valor `0` desactiva esta
            opción, haciendo que los recibos expiren siempre el último día del
            periodo.
        next_folio_number:
          type: integer
          description: Número de folio que se asignará al siguiente recibo creado en esta organización en ambiente Live.
        next_folio_number_test:
          type: integer
          description: Número de folio que se asignará al siguiente recibo creado en esta organización en ambiente Test.
    DomainField:
      type: string
      maxLength: 50
      minLength: 4
      pattern: ^[a-z][a-z0-9-_]{2,48}[a-z0-9]$
      description: |
        Nombre del dominio. Se permiten caracteres alfanuméricos, sólo minúsculas,
        guión (-) y guión bajo (_). Debe empezar con una letra y
        terminar en letra o número.
    OrganizationDomainInput:
      type: object
      required:
        - domain
      properties:
        domain:
          $ref: "#/components/schemas/DomainField"
  securitySchemes:
    "SecretLiveKey":
      type: http
      scheme: bearer
      bearerFormat: sk_live_XXXXXXXXXXXX
      description: Única por organización. Permite crear, obtener y administrar recursos en ambiente Live para una organización en específico.
    "SecretTestKey":
      type: http
      scheme: bearer
      bearerFormat: sk_test_XXXXXXXXXXXX
      description: Única por organización. Permite crear, obtener y administrar recursos en ambiente Test para una organización en específico.
    "SecretUsertKey":
      type: http
      scheme: bearer
      bearerFormat: sk_user_XXXXXXXXXXXX
      description: Única por cuenta. Permite crear y configurar organizaciones pertenecientes a la cuenta del usuario.
