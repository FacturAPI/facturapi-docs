openapi: "3.1.0"
servers:
  - url: https://www.facturapi.io/v2
info:
  title: Facturapi
  version: "2.0"
  contact:
    name: Facturapi
    url: https://www.facturapi.io
    email: "soporte@facturapi.io"
  x-logo:
    url: https://www.facturapi.io/img/logo.svg
    altText: Facturapi
  description: |
    <br />
    <br />

    En esta página enlistamos todos los métodos
    disponibles en la API de Facturapi, así como
    la referencia completa de los parámetros
    que acepta cada uno. Para ver las propiedades
    anidadas de un objeto o arreglo de objetos,
    puedes hacer clic sobre el nombre del campo y
    expandirlo.

    La API de Facturapi está diseñada con el
    estándar [REST](https://developer.mozilla.org/en-US/docs/Glossary/REST)
    en mente. Los endpoints de la API están agrupados
    por recursos, tienen URLs predecibles, las respuestas
    tienen formato JSON y usamos códigos HTTP de respuesta,
    autenticación y verbos estándar.

    Durante el desarrollo, puedes usar la API de Facturapi en
    ambiente Test y las facturas que emitas no se enviarán al SAT ni
    tendrán validez fiscal.
    
    La llave secreta que utilices para autenticarte
    determinará tanto el ambiente en el que se creará la factura
    (Test o Live), así como la organización a utilizar como emisor
    de tu factura, o bien como dueña del recurso que solicites crear.

tags:
  - name: tools
    x-displayName: Herramientas
  - name: customer
    x-displayName: Clientes
  - name: product
    x-displayName: Productos
  - name: invoice
    x-displayName: Facturas
  - name: receipt
    x-displayName: Recibos
  - name: retention
    x-displayName: Retenciones
  - name: organization
    x-displayName: Organizaciones
  # - name: webhooks
  #   x-displayName: Webhooks
  - name: events
    x-displayName: Eventos
    description: |
      Los eventos ocurren cuando Facturapi realiza una operación
      de manera asíncrona, es decir, fuera del ciclo de vida de
      una petición a la API.

      Para recibir estos eventos en tu servidor, puedes registrar una URL de escucha
      creando un **Webhook** desde tu dashboard: https://dashboard.facturapi.io/integration/webhooks
  - name: sat_keys
    x-displayName: Claves de catálogos
    description: |
      Principales catálogos del SAT, incluídos aquí por conveniencia. Puedes consultar estos y más catálogos desde el portal oficial del SAT: http://omawww.sat.gob.mx/tramitesyservicios/Paginas/anexo_20_version3-3.htm

      ### Forma de pago

      Clave | Descripción
      :-----:| -----------
      "01" | Efectivo
      "02" | Cheque nominativo
      "03" | Transferencia electrónica de fondos
      "04" | Tarjeta de crédito
      "05" | Monedero electrónico
      "06" | Dinero electrónico
      "08" | Vales de despensa
      "12" | Dación en pago
      "13" | Pago por subrogación
      "14" | Pago por consignación
      "15" | Condonación
      "17" | Compensación
      "23" | Novación
      "24" | Confusión
      "25" | Remisión de deuda
      "26" | Prescripción o caducidad
      "27" | A satisfacción del acreedor
      "28" | Tarjeta de débito
      "29" | Tarjeta de servicios
      "30" | Aplicación de anticipos
      "31" | Intermediario pagos
      "99" | Por definir

      ### Método de pago

      Clave | Descripción
      :-----:| -----------
      "PUE" | Pago en una sola exhibición (de contado).
      "PPD" | Pago en parcialidades o diferido (total o parcialmente a crédito). Requiere expedir un comprobante de pago cuando se reciba un pago subsecuente.

      ### Uso CFDI

      Clave | Descripción | Régimen Fiscal 
      :-----:| ----------- | -----------
      "G01" | Adquisición de mercancías. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625,626
      "G02" | Devoluciones, descuentos o bonificaciones. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625,626
      "G03" | Gastos en general. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I01" | Construcciones. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I02" | Mobiliario y equipo de oficina por inversiones. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I03" | Equipo de transporte. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I04" | Equipo de computo y accesorios. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I05" | Dados, troqueles, moldes, matrices y herramental. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I06" | Comunicaciones telefónicas. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I07" | Comunicaciones satelitales. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "I08" | Otra maquinaria y equipo. | 601, 603, 606, 612, 620, 621, 622, 623, 624, 625, 626
      "D01" | Honorarios médicos, dentales y gastos hospitalarios. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D02" | Gastos médicos por incapacidad o discapacidad. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D03" | Gastos funerales. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D04" | Donativos. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D05" | Intereses reales efectivamente pagados por créditos hipotecarios (casa habitación). | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D06" | Aportaciones voluntarias al SAR. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D07" | Primas por seguros de gastos médicos. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D08" | Gastos de transportación escolar obligatoria. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D09" | Depósitos en cuentas para el ahorro, primas que tengan como base planes de pensiones. | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "D10" | Pagos por servicios educativos (colegiaturas). | 605, 606, 608, 611, 612, 614, 607, 615, 625
      "S01" | Sin efectos fiscales.  | 601, 603, 605, 606, 608, 610, 611, 612, 614, 616, 620, 621, 622, 623, 624, 607, 615, 625, 626
      "CP01" | Pagos |  601, 603, 605, 606, 608, 610, 611, 612, 614, 616, 620, 621, 622, 623, 624, 607, 615, 625, 626
      "CN01" | Nómina | 605

      ### Relación entre facturas

      Clave | Descripción
      :-----:| -----------
      "01" | Nota de crédito de los documentos relacionados
      "02" | Nota de débito de los documentos relacionados
      "03" | Devolución de mercancía sobre facturas o traslados previos
      "04" | Sustitución de los CFDI previos
      "05" | Traslados de mercancias facturados previamente
      "06" | Factura generada por los traslados previos
      "07" | CFDI por aplicación de anticipo
      "08" | Factura generada por pagos en parcialidades
      "09" | Factura generada por pagos diferidos

      ### Régimen Fiscal

      Clave | Descripción
      :-----:| -----------
      "601" |	General de Ley Personas Morales
      "603" |	Personas Morales con Fines no Lucrativos
      "605" |	Sueldos y Salarios e Ingresos Asimilados a Salarios
      "606" |	Arrendamiento
      "608" |	Demás ingresos
      "609" |	Consolidación
      "610" |	Residentes en el Extranjero sin Establecimiento Permanente en México
      "611" |	Ingresos por Dividendos (socios y accionistas)
      "612" |	Personas Físicas con Actividades Empresariales y Profesionales
      "614" |	Ingresos por intereses
      "616" |	Sin obligaciones fiscales
      "620" |	Sociedades Cooperativas de Producción que optan por diferir sus ingresos
      "621" |	Incorporación Fiscal
      "622" |	Actividades Agrícolas, Ganaderas, Silvícolas y Pesqueras
      "623" |	Opcional para Grupos de Sociedades
      "624" |	Coordinados
      "628" |	Hidrocarburos
      "607" |	Régimen de Enajenación o Adquisición de Bienes
      "629" |	De los Regímenes Fiscales Preferentes y de las Empresas Multinacionales
      "630" |	Enajenación de acciones en bolsa de valores
      "615" |	Régimen de los ingresos por obtención de premios
      "625" |	Régimen de las Actividades Empresariales con ingresos a través de Plataformas Tecnológicas
      "626" | Régimen Simplificado de Confianza

      ### Meses y bimestres

      Clave | Descripción
      :-----:| -----------
      01 | Enero
      02 | Febrero
      03 | Marzo
      04 | Abril
      05 | Mayo
      06 | Junio
      07 | Julio
      08 | Agosto
      09 | Septiembre
      10 | Octubre
      11 | Noviembre
      12 | Diciembre
      13 | Enero-Febrero
      14 | Marzo-Abril
      15 | Mayo-Junio
      16 | Julio-Agosto
      17 | Septiembre-Octubre
      18 | Noviembre-Diciembre

      ### Tipo de Contrato

      Clave | Descripción
      :-----:| -----------
      "01" | Contrato de trabajo por tiempo indeterminado
      "02" | Contrato de trabajo para obra determinada
      "03" | Contrato de trabajo por tiempo determinado
      "04" | Contrato de trabajo por temporada
      "05" | Contrato de trabajo sujeto a prueba
      "06" | Contrato de trabajo con capacitación inicial
      "07" | Modalidad de contratación por pago de hora laborada
      "08" | Modalidad de trabajo por comisión laboral
      "09" | Modalidades de contratación donde no existe relación de trabajo
      "10" | Jubilación, pensión, retiro.
      "99" | Otro contrato

      ### Tipo de Jornada

      Clave | Descripción
      :-----:| -----------
      "01" | Diurna
      "02" | Nocturna
      "03" | Mixta
      "04" | Por hora
      "05" | Reducida
      "06" | Continuada
      "07" | Partida
      "08" | Por turnos
      "99" | Otra Jornada

      ### Tipo de Régimen

      Clave | Descripción
      :-----:| -----------
      "02" | Sueldos (Incluye ingresos señalados en la fracción I del artículo 94 de LISR)
      "03" | Jubilados
      "04" | Pensionados
      "05" | Asimilados Miembros Sociedades Cooperativas Produccion
      "06" | Asimilados Integrantes Sociedades Asociaciones Civiles
      "07" | Asimilados Miembros consejos
      "08" | Asimilados comisionistas
      "09" | Asimilados Honorarios
      "10" | Asimilados acciones
      "11" | Asimilados otros
      "12" | Jubilados o Pensionados
      "13" | Indemnización o Separación
      "99" | Otro Regimen

      ### Riesgo del Puesto

      Clave | Descripción
      :-----:| -----------
      "1" | Clase I
      "2" | Clase II
      "3" | Clase III
      "4" | Clase IV
      "5" | Clase V
      "99" | No aplica

      ### Periodicidad del Pago

      Clave | Descripción
      :-----:| -----------
      "01" | Diario
      "02" | Semanal
      "03" | Catorcenal
      "04" | Quincenal
      "05" | Mensual
      "06" | Bimestral
      "07" | Unidad obra
      "08" | Comisión
      "09" | Precio alzado
      "10" | Decenal
      "99" | Otra Periodicidad

      ### Tipo de Percepción

      Clave | Descripción
      :-----:| -----------
      "001" | Sueldos, Salarios  Rayas y Jornales
      "002" | Gratificación Anual (Aguinaldo)
      "003" | Participación de los Trabajadores en las Utilidades PTU
      "004" | Reembolso de Gastos Médicos Dentales y Hospitalarios
      "005" | Fondo de Ahorro
      "006" | Caja de ahorro
      "009" | Contribuciones a Cargo del Trabajador Pagadas por el Patrón
      "010" | Premios por puntualidad
      "011" | Prima de Seguro de vida
      "012" | Seguro de Gastos Médicos Mayores
      "013" | Cuotas Sindicales Pagadas por el Patrón
      "014" | Subsidios por incapacidad
      "015" | Becas para trabajadores y/o hijos
      "019" | Horas extra
      "020" | Prima dominical
      "021" | Prima vacacional
      "022" | Prima por antigüedad
      "023" | Pagos por separación
      "024" | Seguro de retiro
      "025" | Indemnizaciones
      "026" | Reembolso por funeral
      "027" | Cuotas de seguridad social pagadas por el patrón
      "028" | Comisiones
      "029" | Vales de despensa
      "030" | Vales de restaurante
      "031" | Vales de gasolina
      "032" | Vales de ropa
      "033" | Ayuda para renta
      "034" | Ayuda para artículos escolares
      "035" | Ayuda para anteojos
      "036" | Ayuda para transporte
      "037" | Ayuda para gastos de funeral
      "038" | Otros ingresos por salarios
      "039" | Jubilaciones, pensiones o haberes de retiro
      "044" | Jubilaciones, pensiones o haberes de retiro en parcialidades
      "045" | Ingresos en acciones o títulos valor que representan bienes
      "046" | Ingresos asimilados a salarios
      "047" | Alimentación diferentes a los establecidos en el Art 94 último párrafo LISR
      "048" | Habitación
      "049" | Premios por asistencia
      "050" | Viáticos
      "051" | Pagos por gratificaciones, primas, compensaciones, recompensas u otros en parcialidades
      "052" | Pagos por jubilación en parcialidades derivados de una resolución judicial
      "053" | Pagos por jubilación en una sola exhibición derivados de la ejecución de una resolución judicial

      ### Tipo de Horas

      Clave | Descripción
      :-----:| -----------
      "01" | Dobles
      "02" | Triples
      "03" | Simples

      ### Tipo de Deducción

      Clave | Descripción
      :-----:| -----------
      "001" | Seguridad social
      "002" | ISR
      "003" | Aportaciones a retiro, cesantía en edad avanzada y vejez.
      "004" | Otros
      "005" | Aportaciones a Fondo de vivienda
      "006" | Descuento por incapacidad
      "007" | Pensión alimenticia
      "008" | Renta
      "009" | Préstamos provenientes del Fondo Nacional de la Vivienda para los Trabajadores
      "010" | Pago por crédito de vivienda
      "011" | Pago de abonos INFONACOT
      "012" | Anticipo de salarios
      "013" | Pagos hechos con exceso al trabajador
      "014" | Errores
      "015" | Pérdidas
      "016" | Averías
      "017" | Adquisición de artículos producidos por la empresa o establecimiento
      "018" | Cuotas para la constitución y fomento de sociedades cooperativas y de cajas de ahorro
      "019" | Cuotas sindicales
      "020" | Ausencia (Ausentismo)
      "021" | Cuotas obrero patronales
      "022" | Impuestos Locales
      "023" | Aportaciones voluntarias
      "024" | Ajuste en Gratificación Anual (Aguinaldo) Exento
      "025" | Ajuste en Gratificación Anual (Aguinaldo) Gravado
      "026" | Ajuste en Participación de los Trabajadores en las Utilidades PTU Exento
      "027" | Ajuste en Participación de los Trabajadores en las Utilidades PTU Gravado
      "028" | Ajuste en Reembolso de Gastos Médicos Dentales y Hospitalarios Exento
      "029" | Ajuste en Fondo de ahorro Exento
      "030" | Ajuste en Caja de ahorro Exento
      "031" | Ajuste en Contribuciones a Cargo del Trabajador Pagadas por el Patrón Exento
      "032" | Ajuste en Premios por puntualidad Gravado
      "033" | Ajuste en Prima de Seguro de vida Exento
      "034" | Ajuste en Seguro de Gastos Médicos Mayores Exento
      "035" | Ajuste en Cuotas Sindicales Pagadas por el Patrón Exento
      "036" | Ajuste en Subsidios por incapacidad Exento
      "037" | Ajuste en Becas para trabajadores y/o hijos Exento
      "038" | Ajuste en Horas extra Exento
      "039" | Ajuste en Horas extra Gravado
      "040" | Ajuste en Prima dominical Exento
      "041" | Ajuste en Prima dominical Gravado
      "042" | Ajuste en Prima vacacional Exento
      "043" | Ajuste en Prima vacacional Gravado
      "044" | Ajuste en Prima por antigüedad Exento
      "045" | Ajuste en Prima por antigüedad Gravado
      "046" | Ajuste en Pagos por separación Exento
      "047" | Ajuste en Pagos por separación Gravado
      "048" | Ajuste en Seguro de retiro Exento
      "049" | Ajuste en Indemnizaciones Exento
      "050" | Ajuste en Indemnizaciones Gravado
      "051" | Ajuste en Reembolso por funeral Exento
      "052" | Ajuste en Cuotas de seguridad social pagadas por el patrón Exento
      "053" | Ajuste en Comisiones Gravado
      "054" | Ajuste en Vales de despensa Exento
      "055" | Ajuste en Vales de restaurante Exento
      "056" | Ajuste en Vales de gasolina Exento
      "057" | Ajuste en Vales de ropa Exento
      "058" | Ajuste en Ayuda para renta Exento
      "059" | Ajuste en Ayuda para artículos escolares Exento
      "060" | Ajuste en Ayuda para anteojos Exento
      "061" | Ajuste en Ayuda para transporte Exento
      "062" | Ajuste en Ayuda para gastos de funeral Exento
      "063" | Ajuste en Otros ingresos por salarios Exento
      "064" | Ajuste en Otros ingresos por salarios Gravado
      "065" | Ajuste en Jubilaciones, pensiones o haberes de retiro en una sola exhibición Exento
      "066" | Ajuste en Jubilaciones, pensiones o haberes de retiro en una sola exhibición Gravado
      "067" | Ajuste en Pagos por separación Acumulable
      "068" | Ajuste en Pagos por separación No acumulable
      "069" | Ajuste en Jubilaciones, pensiones o haberes de retiro en parcialidades Exento
      "070" | Ajuste en Jubilaciones, pensiones o haberes de retiro en parcialidades Gravado
      "071" | Ajuste en Subsidio para el empleo (efectivamente entregado al trabajador)
      "072" | Ajuste en Ingresos en acciones o títulos valor que representan bienes Exento
      "073" | Ajuste en Ingresos en acciones o títulos valor que representan bienes Gravado
      "074" | Ajuste en Alimentación Exento
      "075" | Ajuste en Alimentación Gravado
      "076" | Ajuste en Habitación Exento
      "077" | Ajuste en Habitación Gravado
      "078" | Ajuste en Premios por asistencia
      "079" | Ajuste en Pagos distintos a los listados
      "080" | Ajuste en Viáticos gravados
      "081" | Ajuste en Viáticos (entregados al trabajador)
      "082" | Ajuste en Fondo de ahorro Gravado
      "083" | Ajuste en Caja de ahorro Gravado
      "084" | Ajuste en Prima de Seguro de vida Gravado
      "085" | Ajuste en Seguro de Gastos Médicos Mayores Gravado
      "086" | Ajuste en Subsidios por incapacidad Gravado
      "087" | Ajuste en Becas para trabajadores y/o hijos Gravado
      "088" | Ajuste en Seguro de retiro Gravado
      "089" | Ajuste en Vales de despensa Gravado
      "090" | Ajuste en Vales de restaurante Gravado
      "091" | Ajuste en Vales de gasolina Gravado
      "092" | Ajuste en Vales de ropa Gravado
      "093" | Ajuste en Ayuda para renta Gravado
      "094" | Ajuste en Ayuda para artículos escolares Gravado
      "095" | Ajuste en Ayuda para anteojos Gravado
      "096" | Ajuste en Ayuda para transporte Gravado
      "097" | Ajuste en Ayuda para gastos de funeral Gravado
      "098" | Ajuste a ingresos asimilados a salarios gravados
      "099" | Ajuste a ingresos por sueldos y salarios gravados
      "100" | Ajuste en Viáticos exentos
      "101" | ISR Retenido de ejercicio anterior
      "102" | Ajuste a pagos por gratificaciones, primas, compensaciones, recompensas u otros
      "103" | Ajuste a pagos en parcialidades derivados de una resolución judicial gravados
      "104" | Ajuste a pagos en parcialidades derivados de una resolución judicial exentos
      "105" | Ajuste a pagos en una sola exhibición derivados de una resolución judicial gravados
      "106" | Ajuste a pagos en una sola exhibición derivados de una resolución judicial exentos
      "107" | Ajuste al Subsidio Causado

      ### Tipo de Otro Pago

      Clave | Descripción
      :-----:| -----------
      "001" | Reintegro de ISR pagado en exceso.
      "002" | Subsidio para el empleo (efectivamente entregado al trabajador).
      "003" | Viáticos (entregados al trabajador).
      "004" | Aplicación de saldo a favor por compensación anual.
      "005" | Reintegro de ISR retenido en exceso de ejercicio anterior
      "006" | Alimentos en bienes (Servicios de comedor y comida).
      "007" | ISR ajustado por subsidio.
      "008" | Subsidio efectivamente entregado que no correspondía.
      "009" | Reembolso de descuentos efectuados para el crédito de vivienda.
      "999" | Pagos distintos a los listados.

      ### Tipo de Incapacidad

      Clave | Descripción
      :-----:| -----------
      "01" | Riesgo de trabajo.
      "02" | Enfermedad en general.
      "03" | Maternidad.
      "04" | Licencia por cuidados médicos de hijos diagnosticados con cáncer.

      ### Clave de retención

      Clave | Descripción
      :-----:| -----------
      "01" | Servicios profesionales.
      "02" | Regalías por derechos de autor.
      "03" | Autotransporte terrestre de carga.
      "04" | Servicios prestados por comisionistas.
      "05" | Arrendamiento.
      "06" | Enajenación de acciones.
      "07" | Enajenación de bienes objeto de la LIEPS, a través de mediadores, agentes, representantes, corredores, consignatarios o distribuidores.
      "08" | Enajenación de bienes inmuebles consignada en escritura pública.
      "09" | Enajenación de otros bienes, no consignada en escritura pública.
      "10" | Adquisición de desperdicios industriales.
      "11" | Adquisición de bienes consignada en escritura pública.
      "12" | Adquisición de otros bienes, no consignada en escritura pública.
      "13" | Otros retiros de AFORE.
      "14" | Dividendos o utilidades distribuidas.
      "15" | Remanente distribuible.
      "16" | Intereses.
      "17" | Arrendamiento en fideicomiso.
      "18" | Pagos realizados a favor de residentes en el extranjero.
      "19" | Enajenación de acciones u operaciones en bolsa de valores.
      "20" | Obtención de premios.
      "21" | Fideicomisos que no realizan actividades empresariales.
      "22" | Planes personales de retiro.
      "23" | Intereses reales deducibles por créditos hipotecarios.
      "24" | Operaciones Financieras Derivadas de Capital.
      "25" | Otro tipo de retenciones.
      "26" | Servicios mediante Plataformas Tecnológicas

      ### Validez de obligaciones

      | Validez | IVA Exento | Tasa 0% | Tasa 8% Fronteriza Norte | Tasa 8% Fronteriza Sur | Tasa 16%
      |:-------:|:----------:|:-------:|:------------------------:|:----------------------:|:--------
      | "0" <td colspan="5">El contribuyente no está autorizado para emitir facturas</td>
      | "1" | Sí | Sí | No | No | Sí
      | "2" | Sí | Sí | Sí | No | Sí
      | "3" | Sí | Sí | No | Sí | Sí
      | "4" | Sí | Sí | Sí | Sí | Sí

      #### Situación del contribuyente

      | Valor | Explicación
      |:-----:|:-----------
      | "Previsto" | Vía buzón tributario o notificaciones por estrados, el contribuyente recibe un oficio en el que se establece su situación y se le solicita que demuestre la materialidad de las operaciones facturadas.
      | "Presunto" | El contribuyente notificado se considera presunto cuando, en su página web, la autoridad emite sus datos dentro de la relación de los EFOS, es decir, en las listas negras del SAT.
      | "Desvirtuado" | En este caso, el contribuyente acusado de operaciones inexistentes ya aportó a la autoridad la documentación e información pertinente para desvirtuar los hechos que llevaron a notificarlo.
      | "Definitivo" | En este caso, el EFO no atendió el llamado de la autoridad en el plazo de 15 días, a partir de la última notificación; o bien, no pudo desvirtuar los hechos imputados.
      | "Sentencia favorable" | Los contribuyentes EFOS “definitivos” que se inconforman e interponen algún medio de defensa, el cual concluye a su favor, son clasificados en la lista de “sentencia favorable”.
      | "EFOS de información suprimida" | En esta categoría, se encuentran los EFOS “presuntos” y “definitivos” que presentaron algún medio de defensa (amparo, juicio de nulidad) y, por lo tanto, un juez ordenó suprimir sus datos de la lista, sin ser eliminados.

  - name: customer_model
    x-displayName: Objeto Customer
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Customer" />
  - name: product_model
    x-displayName: Objeto Product
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Product" />
  - name: invoice_model
    x-displayName: Objeto Invoice
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Invoice" />
  - name: receipt_model
    x-displayName: Objeto Receipt
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Receipt" />
  - name: retention_model
    x-displayName: Objeto Retention
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Retention" />
  - name: organization_model
    x-displayName: Objeto Organización
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Organization" />

x-tagGroups:
  - name: Recursos
    tags:
      - customer
      - product
      - invoice
      - receipt
      - retention
      - organization
  - name: Herramientas
    tags:
      - tools
      - sat_keys
  - name: Webhooks
    tags:
      - events
      - webhooks
  - name: Modelos
    tags:
      - customer_model
      - product_model
      - invoice_model
      - receipt_model
      - retention_model
      - organization_model

paths:
  /customers:
    post:
      operationId: createCustomer
      tags:
        - customer
      summary: Crear cliente
      description: |
        Registra un nuevo cliente en Facturapi.

        Esta llamada valida que los datos fiscales coincidan con
        los registros del SAT para ese RFC, de lo contrario, la llamada
        devolverá un error indicando el problema.

        Una vez creado el cliente y obtenido un objeto de respuesta,
        te recomendamos guardar el ID en tu base de datos junto a la información
        de tu cliente. Posteriormente, puedes llamar al encpoint de Crear Factura
        pasando el ID del cliente en lugar de repetir la información.
        
        Por último, ten en cuenta que los clientes que crees en ambiente _Test_ **no se
        comparten** con el ambiente _Live_.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "legal_name": "Dunder Mifflin",
                    "email": "email@example.com",
                    "tax_id": "ABC101010111",
                    "tax_system": "601",
                    "address": {
                      "zip": "01234"
                    }
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.create({
              legal_name: 'Dunder Mifflin',
              email: 'email@example.com',
              tax_id: 'ABC101010111',
              tax_system: '601',
              address: {
                zip: '01234'
              }
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.CreateAsync(new Dictionary<string, object>
            {
              ["legal_name"] = "Dunder Mifflin",
              ["email"] = "email@example.com",
              ["tax_id"] = "ABC101010111",
              ["tax_system"] = "601",
              ["address"] = new Dictionary<string, object>
              {
                ["zip"] = "01234"
              }
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->create([
              "email" => "email@example.com",
              "legal_name" => "Dunder Mifflin",
              "tax_id" => "ABC101010111",
              "tax_system" => "601",
              "address" => [
                "zip" => "01234"
              ]
            ]);
      requestBody:
        $ref: "#/components/requestBodies/CustomerCreate"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "201":
          description: Nuevo objeto `Customer` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "200":
          description: Un objeto `Customer` con la misma información ya existía
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listCustomers
      tags:
        - customer
      summary: Listar clientes
      description: Regresa una lista paginada de todos los clientes de una organización o realiza una búsqueda de acuerdo a parámetros
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers \
              -H "Authorization: Bearer sk_test_API_KEY"
              -G
              -d 'q=Dunder'
              -d 'date[gt]=2021-07-14T06:00:00.000Z'
              -d 'date[lt]=2021-08-14T06:00:00.000Z'
              -d 'page=1'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const searchResult = await facturapi.customers.list({
              q: 'Dunder',
              date: {
                gt: new Date('2021-07-14T06:00:00.000Z'),
                lt: new Date('2021-08-14T06:00:00.000Z')
              },
              page: 1
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var searchResult = await facturapi.Customer.ListAsync(new Dictionary<string, object>
            {
              ["q"] = "Dunder",
              ["date"] = new Dictionary<string, object>
                {
                  ["gt"] = new DateTime("2021-07-14T06:00:00.000Z"),
                  ["lt"] = new DateTime("2021-08-14T06:00:00.000Z")
                },
              ["page"] = 1
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $searchResult = $facturapi->Customers->all([
              "q" => "Dunder",
              "date" => [
                "gt" => new DateTime("2021-07-14T06:00:00.000Z"),
                "lt" => new DateTime("2021-08-14T06:00:00.000Z")
              ],
              "page" => 1
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Consulta. Texto a buscar en `legal_name` (nombre fiscal) o en `tax_id` (RFC).
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /customers/{customer_id}:
    get:
      operationId: getCustomer
      tags:
        - customer
      summary: Obtener cliente por ID
      description: Regresa el objeto 'Customer' relacionado al `id` especificado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.retrieve('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.RetrieveAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->retrieve( "5a3ee743f508333611ad6b3c" );
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Customer`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: editCustomer
      tags:
        - customer
      summary: Editar cliente
      description: Actualiza la información de un cliente existente, asignando los valores de los parámetros enviados. Los parámetros que no se envíen en la petición no se modificarán.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
              -X PUT
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "email": "jdoe@example.com",
                    "address": {
                      "street": "Santa Monica Ave."
                    }
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.update(
              '590ce6c56d04f840aa8438af',
              {
                email: 'jdoe@example.com',
                address: {
                  street: 'Santa Monica Ave.'
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.UpdateAsync(
              "590ce6c56d04f840aa8438af",
              new Dictionary<string, object>
              {
                ["email"] = "jdoe@example.com",
                ["address"] = new Dictionary<string, object>
                {
                  ["street"] = "Santa Monica Ave."
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->update("590ce6c56d04f840aa8438af", [
              "email" => "jdoe@example.com",
              "legal_name" => "Dunder Mifflin",
              "address" => [
                "street" => "Santa Monica Ave."
              ]
            ]);
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID del objeto a editar
      requestBody:
        $ref: "#/components/requestBodies/CustomerEdit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Customer` editado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteCustomer
      tags:
        - customer
      summary: Eliminar cliente
      description: Elimina el cliente de tu organización. Las facturas asociadas al cliente **no** se eliminarán.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const removedCustomer = await facturapi.customers.del('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.DeleteAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Customers->delete( "5a3fefd9f508333611ad6b43" );
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID del objeto a eliminar
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Customer` eliminado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Customer"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /customers/{customer_id}/tax-info-validation:
    get:
      operationId: validateCustomerTaxInfo
      tags:
        - customer
      summary: Validar información fiscal
      description: |
        Valida que la información fiscal del cliente coincida con los registros del SAT.

        Su función principal es validar que los datos del cliente registraado siguen cumpliendo la validación del SAT.

        :::tip
          Las operaciones de crear cliente, editar cliente y crear factura ya realizan una
          validación de la información del cliente, por lo que **no** es necesario llamar a este endpoint
          antes de realizar dichas operaciones.
        :::
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/customers/590ce6c56d04f840aa8438af/tax-info-validation \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const customer = await facturapi.customers.validateTaxInfo('590ce6c56d04f840aa8438af');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var customer = await facturapi.Customer.ValidateTaxInfoAsync("590ce6c56d04f840aa8438af");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $customer = $facturapi->Customers->validateTaxInfo( "5a3ee743f508333611ad6b3c" );
      parameters:
        - in: path
          name: customer_id
          schema:
            type: string
          required: true
          description: ID del objeto `Customer` a validar
      security:
        - "Secret Live Key": []
      responses:
        "200":
          description: Resultado de la validación
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_valid:
                    type: boolean
                    description: Indica si la información fiscal del cliente coincide con los registros del SAT
                    example: true
                  errors:
                    type: array
                    description: Lista de errores encontrados
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: Nombre del campo que no coincide con los registros del SAT
                          example: tax_system
                        message:
                          type: string
                          description: Mensaje de error
                          example: El RégimenFiscal no coincide con el registrado para el RFC en la lista de contribuyentes obligados del SAT.
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /products:
    post:
      operationId: createProduct
      tags:
        - product
      summary: Crear producto
      description: |
        Registra un nuevo producto o servicio en tu catálogo de Facturapi.

        Puedes usar el ID del producto para crear facturas sin tener que enviar todos los datos del producto cada vez.

        Te en cuenta que los productos que crees en ambiente _Test_ **no se
        comparten** con el ambiente _Live_.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "description": "Ukelele",
                    "product_key": "60131324",
                    "price": 345.60,
                    "sku": "ABC1234"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const product = await facturapi.products.create({
              description: 'Ukelele',
              product_key: '60131324',
              price: 345.60,
              sku: 'ABC1234'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.CreateAsync(new Dictionary<string, object>
            {
              ["description"] = "Ukelele",
              ["product_key"] = "60131324",
              ["price"] = 345.60,
              ["sku"] = "ABC1234"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $product = $facturapi->Products->create([
              "description" => "Ukelele",
              "product_key" => "60131324",
              "price" => 345.60,
              "sku" => "ABC1234"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ProductCreate"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Nuevo objeto `Product` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listProducts
      tags:
        - product
      summary: Listar productos
      description: Regresa una lista paginada de todos los productos de una organización o realiza una búsqueda de acuerdo a parámetros
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products \
              -H "Authorization: Bearer sk_test_API_KEY"
              -G
              -d 'q=ukelele'
              -d 'page=1'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const searchResult = await facturapi.products.list({
              q: 'ukelele',
              page: 1
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var searchResult = await facturapi.Product.ListAsync(new Dictionary<string, object>
            {
              ["q"] = "ukelele",
              ["date"] = new Dictionary<string, object>
                {
                  ["gt"] = new DateTime("2021-07-14T06:00:00.000Z"),
                  ["lt"] = new DateTime("2021-08-14T06:00:00.000Z")
                },
              ["page"] = 1
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $searchResult = $facturapi->Products->all([
              "q" => "ukelele",
              "page" => 1
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Consulta.  Texto a buscar en la descripción del producto o SKU.
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /products/{product_id}:
    get:
      operationId: getProduct
      tags:
        - product
      summary: Obtener producto por ID
      description: Regresa el objeto `Product` relacionado al `id` especificado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const product = await facturapi.products.retrieve('590e22c26d04f840aa8438b2');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.RetrieveAsync("590e22c26d04f840aa8438b2");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $product = $facturapi->Product->retrieve( "590e22c26d04f840aa8438b2" );
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Product`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: editProduct
      tags:
        - product
      summary: Editar producto
      description: Actualiza la información de un producto existente, asignando los valores de los parámetros enviados. Los parámetros que no se envíen en la petición no se modificarán.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
              -X PUT
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "price": 456.70
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const product = await facturapi.products.update(
              '590e22c26d04f840aa8438b2',
              {
                email: 'jdoe@example.com',
                address: {
                  street: 'Santa Monica Ave.'
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.UpdateAsync(
              "590e22c26d04f840aa8438b2",
              new Dictionary<string, object>
              {
                ["price"] = 456.70
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $product = $facturapi->Products->update("590e22c26d04f840aa8438b2", [
              "price" => 456.70
            ]);
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
          description: ID del objeto a editar
      requestBody:
        $ref: "#/components/requestBodies/ProductEdit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Product` editado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteProduct
      tags:
        - product
      summary: Eliminar producto
      description: Elimina el producto de tu organización. Las facturas asociadas al producto **no** se eliminarán.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/products/590e22c26d04f840aa8438b2 \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const removedProduct = await facturapi.products.del('590e22c26d04f840aa8438b2');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var product = await facturapi.Product.DeleteAsync("590e22c26d04f840aa8438b2");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Products->delete( "590e22c26d04f840aa8438b2" );
      parameters:
        - in: path
          name: product_id
          schema:
            type: string
          required: true
          description: ID del objeto a eliminar
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Product` eliminado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices:
    post:
      operationId: createInvoice
      tags:
        - invoice
      summary: Crear factura (CFDI 4.0)
      description: |
        Crea una nueva Factura. Si la factura es creada en ambiente Live, ésta será **timbrada y enviada al SAT**.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                "customer": {
                  "legal_name": "Dunder Mifflin",
                  "email": "email@example.com",
                  "tax_id": "ABC101010111",
                  "tax_system": "601",
                  "address": {
                    "zip": "85900"
                  }
                },
                "items": [{
                  "quantity": 2,
                  "product": {
                    "description": "Ukelele",
                    "product_key": "60131324",
                    "price": 345.60
                  }
                }],
                "payment_form": "06",
                "folio_number": 914,
                "series": "F"
              }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.create({
              customer: {
                legal_name: 'Dunder Mifflin',
                email: 'email@example.com',
                tax_id: 'ABC101010111',
                tax_system: '601',
                address: {
                  zip: '85900'
                }
              },
              items: [{
                quantity: 2,
                product: {
                  description: 'Ukelele',
                  product_key: '60131324',
                  price: 345.60
                }
              }],
              payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO,
              folio_number: 914,
              series: 'F'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.CreateAsync(new Dictionary<string, object>
            {
              ["customer"] = new Dictionary<string, object>
              {
                ["legal_name"] = "Dunder Mifflin",
                ["email"] = "email@example.com",
                ["tax_id"] = "ABC101010111",
                ["tax_system"] = "601",
                ["address"] = new Dictionary<string, object>
                {
                  ["zip"] = "85900"
                }
              },
              ["items"] = new Dictionary<string, object>[]
              {
                new Dictionary<string, object>
                {
                  ["product"] = new Dictionary<string, object>
                  {
                    ["description"] = "Ukelele",
                    ["product_key"] = "60131324",
                    ["price"] = 345.60
                  }
                }
              },
              ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO,
              ["folio_number"] = 914,
              ["series"] = "F"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->create([
              "customer" => [
                "legal_name" => "Dunder Mifflin",
                "email" => "email@example.com",
                "tax_id" => "ABC101010111",
                "tax_system" => "601",
                "address" => [
                  "zip" => "85900"
                ]
              ],
              "items" => [
                [
                  "quantity" => 2,
                  "product" => [
                    "description" => "Ukelele",
                    "product_key" => "60131324",
                    "price" => 420.69,
                    "sku" => "ABC4567"
                  ]
                ] // Add as many products as you want to include in your invoice
              ],
              "payment_form" => \Facturapi\PaymentForm::EFECTIVO,
              "folio_number" => 581,
              "series" => "F"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/InvoiceCreate"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Nuevo objeto `Invoice` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listInvoices
      tags:
        - invoice
      summary: Listar facturas
      description: Regresa una lista paginada de todas las facturas de una organización o realiza una búsqueda de acuerdo a parámetros
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Todas las facturas de la organización
            curl "https://www.facturapi.io/v2/invoices" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY"

            # Todas las facturas emitidas para cierto cliente
            curl "https://www.facturapi.io/v2/invoices" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "customer=58e93bd8e86eb318b0197456"

            # Página 3 de los resultados de búsqueda de texto libre
            # de facturas emitidas por cierto cliente entre 2017 y 2019
            curl "https://www.facturapi.io/v2/invoices" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "q=Aspiradora+Robot&customer=58e93bd8e86eb318b0197456&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Todas las facturas de la organización
            const invoiceSearch = await facturapi.invoices.list();

            // Todas las facturas emitidas para cierto cliente
            const invoiceSearch = await facturapi.invoices.list({
              customer: '590ce6c56d04f840aa8438af'
            });

            // Página 3 de los resultados de búsqueda de texto libre
            // de facturas emitidas por cierto cliente entre 2017 y 2019
            const invoiceSearch = await facturapi.invoices.list({
              q: 'Aspiradora Robot',
              customer: '590ce6c56d04f840aa8438af',
              date: {
                gte: new Date('2017-01-01T00:00:00.000Z'),
                lt: new Date('2020-01-01T00:00:00.000Z')
              },
              page: 3,
              limit: 10,
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            // Todas las facturas de la organización
            var searchResult = await facturapi.Invoice.ListAsync();

            // Todas las facturas emitidas para cierto cliente
            var searchResult = await facturapi.Invoice.ListAsync(
              new Dictionary<string, object>
              {
                ["customer"] = "590ce6c56d04f840aa8438af"
              }
            );

            // Página 3 de los resultados de búsqueda de texto libre
            // de facturas emitidas por cierto cliente entre 2017 y 2019
            var searchResult = await facturapi.Invoice.ListAsync(
              new Dictionary<string, object>
              {
                ["q"] = "Aspiradora Robot",
                ["customer"] = "590ce6c56d04f840aa8438af",  
                ["date"] = new Dictionary<string, object>
                  {
                    ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                    ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                  },
                ["page"] = 3,
                ["limit"] = 10,
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Todas las facturas de la organización
            $invoices = $facturapi->Invoices->all();

            // Todas las facturas emitidas para cierto cliente
            $invoices = $facturapi->Invoices->all([
              customer => "590ce6c56d04f840aa8438af"
            ]);

            // Página 3 de los resultados de búsqueda de texto libre
            // de facturas emitidas por cierto cliente entre 2017 y 2019
            $invoices = $facturapi->Invoices->all([
              q => "Aspiradora Robot",
              customer => "590ce6c56d04f840aa8438af"
              date => [
                gte => new DateTime("2017-01-01T00:00:00.000Z"),
                lt => new DateTime("2020-01-01T00:00:00.000Z")
              ],
              page => 3,
              limit => 10,
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |
            Consulta. Texto a buscar en la factura.

            La búsqueda se realizará por coincidencias **parciales** en los campos:

            - `items[].product.description`
            - `customer.legal_name`

            Y por coincidencias **exactas** en los campos:

            - `id`
            - `uuid`
            - `customer.tax_id`
            - `folio_number`
            - `total`
        - in: query
          name: customer
          schema:
            type: string
          description: Identificador del cliente. Útil para obtener las facturas emitidas a un sólo cliente.
        - in: query
          name: type
          schema:
            type: string
            enum:
              - I  
              - E 
              - P 
              - N
              - T 
          description: Tipo de factura. Búsqueda por tipo de factura con las claves exactas. 
        - in: query
          name: payment_method
          schema:
            type: string
            enum:
              - PUE  
              - PPD
          description: Método de pago. Búsqueda exacta por método de pago. 
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvoiceSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}:
    get:
      operationId: getInvoice
      tags:
        - invoice
      summary: Obtener factura por ID
      description: Regresa el objeto 'Invoice' relacionado al `id` especificado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.retrieve('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.RetrieveAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $invoice = $facturapi->Invoices->retrieve( "58e93bd8e86eb318b019743d" );
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Invoice`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: cancelInvoice
      tags:
        - invoice
      summary: Cancelar factura
      description: |
        Realiza una solicitud de cancelación de factura ante el SAT, soportando el esquema de cancelación 2022.

        Al usar este método pueden ocurrir 3 posibles resultados:

        - Que la llamada regrese un error con la explicación de por qué no se pudo cancelar.
        - Que la llamada sea satisfactoria y regrese un objeto `invoice` con la propiedad `status: "canceled"`.
        - Que la llamada sea satisfactoria, pero que la cancelación requiera de confirmación de parte de tu cliente, en cuyo caso se obtendrá como respuesta el objeto `invoice` con las propiedades `status: "valid"` y `cancellation_status: "pending"`.

        En el tercer escenario, el valor de `cancellation_status` será actualizado automáticamente por Facturapi cuando tu cliente acepte, rechace o deje expirar la solicitud, de tal manera que al consultar una factura (usando [Obtener Factura](#operation/getInvoice)), la propiedad `cancellation_status` reflejará el estado más reciente de la soliitud.

        Consulta los valores posibles de `cancellation_status` más abajo.

        Después de la cancelación la factura ya no tendrá validez, el objeto cambiará su `status` a `"canceled"` y seguirá estando disponible para futuras consultas.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d?motive=02 \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X DELETE
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const invoice = await facturapi.invoices.cancel(
              '58e93bd8e86eb318b019743d',
              { motive: '02' }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Invoice.CancelAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["motive"] = "02"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Invoices->cancel(
              "58e93bd8e86eb318b019743d",
              [
                "motive" => "02"
              ]
            );
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID de la factura a cancelar
        - in: query
          name: motive
          required: true
          schema:
            type: string
            enum:
              - "01"
              - "02"
              - "03"
              - "04"
          description: |
            Clave que representa el motivo de la cancelación de la factura.

            - `01`: **Comprobante emitido con errores con relación**. Cuando la
              factura contiene algún error en las cantidades, claves o cualquier otro dato y ya
              se ha emitido el comprobante que la sustituye, el cual deberá indicarse por medio
              del atributo `substitution`.
            - `02`: **Comprobante emitido con errores sin relación**. Cuando la
              factura contiene algún error en las cantidades, claves o cualquier otro dato y no
              se requiere relacionar con otra factura.
            - `03`: **No se llevó a cabo la operación**. Cuando la venta o transacción no se concretó.
            - `04`: **Operación nominativa relacionada en la factura global**. Cuando se requiere cancelar
              una factura al público en general porque el cliente solicita su comprobante.
        - in: query
          name: substitution
          required: false
          schema:
            type: string
          description: |
            ID de la factura que sustituye a la factura que se está cancelando.

            Puedes usar el ID de Facturapi o el folio fiscal (UUID).
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Solicitud de cancelación exitosa
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  
  /invoices/{invoice_id}/cancellation_receipt/xml:
    get:
      operationId: downloadCancellationReceiptXml
      tags:
        - invoice
      summary: Descargar acuse de cancelación
      description: Descarga acuse de recibo de cancelación de una factura en un archivo xml.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Acuse de factura cancelada
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/cancellation_receipt/xml \
              -H "Authorization: Bearer sk_test_API_KEY"
              -X GET

        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Acuse de factura cancelada
            await facturapi.invoices.downloadCancellationReceiptXml('58e93bd8e86eb318b019743d');

        - lang: csharp
          label: C#
          source: |
            // Acuse de factura cancelada
            await facturapi.Invoice.DownloadCancellationReceiptXmlAsync("58e93bd8e86eb318b019743d");

        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Acuse de factura cancelada
            $facturapi->Invoices->download_cancellation_receipt_xml("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del acuse de recibo de cancelación
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /invoices/{invoice_id}/{format}:
    get:
      operationId: downloadInvoice
      tags:
        - invoice
      summary: Descargar factura
      description: Descarga tu Factura en PDF, XML o ambos en un archivo comprimido ZIP.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            ## Descargar PDF y XML comprimidos en archivo ZIP
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/zip \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Descargar sólo el PDF
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/pdf \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Descargar sólo el XML
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/xml \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Descargar PDF y XML comprimidos en archivo ZIP
            const zipStream = await facturapi.invoices.downloadZip('58e93bd8e86eb318b019743d');
            const zipFile = fs.createWriteStream('./factura.zip');
            zipStream.pipe(zipFile);

            // Descargar sólo el PDF
            const pdfStream = await facturapi.invoices.downloadPdf('58e93bd8e86eb318b019743d');
            const pdfFile = fs.createWriteStream('./factura.pdf');
            pdfStream.pipe(pdfFile);

            // Descargar sólo el XML
            const xmlStream = await facturapi.invoices.downloadXml('58e93bd8e86eb318b019743d');
            const xmlFile = fs.createWriteStream('./factura.xml');
            xmlStream.pipe(xmlFile);
        - lang: csharp
          label: C#
          source: |
            // Descargar PDF y XML comprimidos en archivo ZIP
            var zipStream = await facturapi.Invoice.DownloadZipAsync("58e93bd8e86eb318b019743d");
            // Descargar sólo el XML
            var xmlStream = await facturapi.Invoice.DownloadXmlAsync("58e93bd8e86eb318b019743d");
            // Descargar sólo el PDF
            var pdfStream = await facturapi.Invoice.DownloadPdfAsync("58e93bd8e86eb318b019743d");

            // Para guardar la descarga en un archivo
            var file = new System.IO.FileStream("C:\\route\\to\\save\\invoice.zip", FileMode.Create);
            zipStream.CopyTo(file);
            file.Close();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // stream containing the PDF and XML as a ZIP file
            $zip = $facturapi->Invoices->download_zip("58e93bd8e86eb318b019743d");
            // stream containing the PDF file
            $pdf = $facturapi->Invoices->download_pdf("58e93bd8e86eb318b019743d"); 
            // stream containing the XML file
            $xml = $facturapi->Invoices->download_xml("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID del objeto a descargar
        - in: path
          name: format
          schema:
            type: string
            enum:
              - xml
              - pdf
              - zip
          required: true
          description: Formato del archivo de descarga
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del comprobante CFDI en el formato solicitado
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /invoices/{invoice_id}/email:
    post:
      operationId: sendInvoiceByEmail
      tags:
        - invoice
      summary: Enviar factura por correo electrónico
      description: Envía un correo electrónico a la dirección de tu cliente, con los archivos XML y PDF adjuntos al mensaje.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Enviar al correo del cliente
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY"
              -X POST

            # Enviar a otro correo
            curl https://www.facturapi.io/v2/invoices/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY"
              -X POST
              -H "Content-Type: application/json" \
              -d '{
                    "email": "another_email@example.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Enviar al correo del cliente
            await facturapi.invoices.sendByEmail('58e93bd8e86eb318b019743d');

            // Enviar a otro correo
            await facturapi.invoices.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { email: 'otro@correo.com' }
            );

            // Enviar a más de un correo (máx. 10)
            await facturapi.invoices.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { 
                email: [
                  'primer@correo.com',
                  'segundo@correo.com'
                ]
              }
            );
        - lang: csharp
          label: C#
          source: |
            // Enviar al correo del cliente
            await facturapi.Invoice.SendByEmailAsync("58e93bd8e86eb318b019743d");

            // Enviar a otro correo
            await facturapi.Invoice.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = "otro@correo.com"
              }
            );

            // Enviar a más de un correo
            await facturapi.Invoice.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = new String[]
                {
                  "primer@correo.com",
                  "segundo@correo.com"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Enviar al correo del cliente
            $facturapi->Invoices->send_by_email("58e93bd8e86eb318b019743d");

            // Enviar a otro correo
            $facturapi->Invoices->send_by_email(
              "58e93bd8e86eb318b019743d",
              "otro@correo.com"
            );

            // Enviar a más de un correo (máx 10)
            $facturapi->Invoices->send_by_email(
              "58e93bd8e86eb318b019743d",
              [
                "primer@correo.com",
                "segundo@correo.com"
              ]
            );
      parameters:
        - in: path
          name: invoice_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Dirección de correo electrónico a enviar la factura. Si no se envía este parámetro, la factura será enviada al correo que el cliente tenga registrado.
                  oneOf:
                    - type: string
                      format: email
                      description: Dirección de correo eletrónico
                      example: otro@correo.com
                    - type: array
                      example: ["primer@correo.com", "segundo@correo.com"]
                      description: Lista de direcciones de correo que recibirán la factura.
                      maxLength: 10
                      items:
                        type: string
                        format: email
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del comprobante CFDI en el formato solicitado
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  
  /receipts:
    post:
      operationId: createReceipt
      tags:
        - receipt
      summary: Crear recibo
      description: |
        Crea un nuevo Recibo, el cual funge como nota de venta.

        Todos los recibos generan una URL de autofactura que cliente puede
        visitar para llenar sus datos fiscales en un micrositio con el branding
        de la organización.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "folio_number": 1234,
                    "payment_form": "03",
                    "items": [{
                      "quantity": 1,
                      "product": {
                        "description": "Ukelele",
                        "product_key": "60131324",
                        "price": 345.60,
                        "sku": "ABC1234"
                      }
                    }]
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const receipt = await facturapi.receipts.create({
              folio_number: 1234,
              payment_form: Facturapi.PaymentForm.DINERO_ELECTRONICO,
              items: [{
                quantity: 1,
                product: {
                  description: 'Ukelele',
                  product_key: '60131324',
                  price: 345.60,
                  sku: 'ABC1234'
                }
              }]
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var receipt = await facturapi.Receipt.CreateAsync(new Dictionary<string, object>
            {
              ["folio_number"] = 1234,
              ["payment_form"] = Facturapi.PaymentForm.DINERO_ELECTRONICO,
              ["items"] = new Dictionary<string, object>[]
              {
                new Dictionary<string, object> {
                  ["description"] = "Ukelele",
                  ["product_key"] = "60131324",
                  ["price"] = 345.60,
                  ["sku"] = "ABC1234"
                }
              }
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $receipt = $facturapi->Receipts->create([
              "folio_number" => 1234,
              "payment_form" => "03",
              "items" => [
                [
                  "product" => [
                    "description" => "Ukelele",
                    "product_key" => "60131324",
                    "price" => 345.60,
                    "sku" => "ABC1234"
                  ]
                ]
              ]
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ReceiptCreate"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Nuevo objeto `Receipt` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listReceipts
      tags:
        - receipt
      summary: Listar recibos
      description: Regresa una lista paginada de todos los recibos de una organización o realiza una búsqueda de acuerdo a parámetros
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Todos los recibos de la organización
            curl "https://www.facturapi.io/v2/receipts" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY"

            # Página 3 de los resultados de búsqueda de texto libre
            # de recibos creados entre 2017 y 2019
            curl "https://www.facturapi.io/v2/receipts" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "q=Aspiradora+Robot&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Todos los recibos de la organización
            const receiptSearch = await facturapi.receipts.list();

            // Página 3 de los resultados de búsqueda de texto libre
            // de recibos creados entre 2017 y 2019
            const receiptSearch = await facturapi.receipts.list({
              q: 'Aspiradora Robot',
              date: {
                gte: new Date('2017-01-01T00:00:00.000Z'),
                lt: new Date('2020-01-01T00:00:00.000Z')
              },
              page: 3,
              limit: 10,
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            // Todos los recibos de la organización
            var searchResult = await facturapi.Receipt.ListAsync();

            // Página 3 de los resultados de búsqueda de texto libre
            // de recibos creados entre 2017 y 2019
            var searchResult = await facturapi.Receipt.ListAsync(
              new Dictionary<string, object>
              {
                ["q"] = "Aspiradora Robot",
                ["date"] = new Dictionary<string, object>
                  {
                    ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                    ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                  },
                ["page"] = 3,
                ["limit"] = 10,
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Todos los recibos de la organización
            $searchResult = $facturapi->Receipts->all();

            // Página 3 de los resultados de búsqueda de texto libre
            // de recibos creados entre 2017 y 2019
            $searchResult = $facturapi->Receipts->all([
              q => "Aspiradora Robot",
              date => [
                gte => new DateTime("2017-01-01T00:00:00.000Z"),
                lt => new DateTime("2020-01-01T00:00:00.000Z")
              ],
              page => 3,
              limit => 10,
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: |
            Consulta. Texto a buscar en la descripción de los conceptos del recibo o el SKU.
        - in: query
          name: payment_form
          schema:
            type: string
            minLength: 2
            maxLength: 2
          example: "02"
          description: |
            Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago). Si se incluye, los recibos se agruparán y se listarán de acuerdo a la forma de pago.
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReceiptSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/{receipt_id}:
    get:
      operationId: getReceipt
      tags:
        - receipt
      summary: Obtener recibo por ID
      description: Regresa el objeto 'Receipt' relacionado al `id` especificado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const receipt = await facturapi.receipts.retrieve('58e93bd8e86eb318b019743d');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var receipt = await facturapi.Receipt.RetrieveAsync("58e93bd8e86eb318b019743d");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $receipt = $facturapi->Receipts->retrieve( "58e93bd8e86eb318b019743d" );
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Receipt`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: cancelReceipt
      tags:
        - receipt
      summary: Cancelar recibo
      description: |
        Marca un recibo como cancelado, cambiando su propiedad `status` a `"canceled"`.

        Una vez cancelado, el recibo no podrá ser facturado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/5ebd8e56f5687a013ca0df46 \
              -X DELETE \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const receipt = await facturapi.receipts.cancel('5ebd8e56f5687a013ca0df46');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var receipt = await facturapi.Receipt.CancelAsync("5ebd8e56f5687a013ca0df46");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $facturapi->Receipts->cancel("5ebd8e56f5687a013ca0df46");
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID del recibo a cancelar
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto 'Receipt' cancelado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Receipt"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/{receipt_id}/pdf:
    get:
      operationId: downloadReceiptPdf
      tags:
        - receipt
      summary: Descargar PDF
      description: Descarga el recibo digital en formato PDF.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d/pdf \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Descargar recibo en formato PDF
            const pdfStream = await facturapi.receipts.downloadPdf('58e93bd8e86eb318b019743d');
            const pdfFile = fs.createWriteStream('./recibo.pdf');
            pdfStream.pipe(pdfFile);
        - lang: csharp
          label: C#
          source: |
            // Descargar recibo en formato PDF
            var pdfStream = await facturapi.Receipt.DownloadPdfAsync("58e93bd8e86eb318b019743d");

            // Para guardar la descarga en un archivo
            var file = new System.IO.FileStream("C:\\route\\to\\save\\receipt.pdf", FileMode.Create);
            pdfStream.CopyTo(file);
            file.Close();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // stream containing the PDF file
            $pdf = $facturapi->Receipts->download_pdf("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID del objeto a descargar
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del recibo digital en formato PDF
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/{receipt_id}/email:
    post:
      operationId: sendReceiptByEmail
      tags:
        - receipt
      summary: Enviar recibo por correo electrónico
      description: |
        Envía un correo electrónico a la dirección de tu cliente.
        
        El correo enviado estará personalizado con el logotipo y los colores de la organización que lo creó,
        e incluirá un botón para facturar el recibo, así con el recibo en formato PDF adjunto al mensaje.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Enviar recibo por correo electrónico
            curl https://www.facturapi.io/v2/receipts/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY"
              -X POST
              -H "Content-Type: application/json" \
              -d '{
                    "email": "another_email@example.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Enviar recibo por correo electrónico
            await facturapi.receipts.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { email: 'ejemplo@correo.com' }
            );

            // Enviar a más de un correo (máx. 10)
            await facturapi.receipts.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { 
                email: [
                  'primer@correo.com',
                  'segundo@correo.com'
                ]
              }
            );
        - lang: csharp
          label: C#
          source: |
            // Enviar recibo por correo electrónico
            await facturapi.Receipt.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = "ejemplo@correo.com"
              }
            );

            // Enviar a más de un correo
            await facturapi.Receipt.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = new String[]
                {
                  "primer@correo.com",
                  "segundo@correo.com"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Enviar recibo por correo electrónico
            $facturapi->Receipts->send_by_email(
              "58e93bd8e86eb318b019743d",
              "ejemplo@correo.com"
            );

            // Enviar a más de un correo (máx 10)
            $facturapi->Receipts->send_by_email(
              "58e93bd8e86eb318b019743d",
              [
                "primer@correo.com",
                "segundo@correo.com"
              ]
            );
      parameters:
        - in: path
          name: receipt_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  description: Dirección de correo electrónico a enviar el recibo digital.
                  oneOf:
                    - type: string
                      format: email
                      description: Dirección de correo eletrónico
                      example: otro@correo.com
                    - type: array
                      example: ["primer@correo.com", "segundo@correo.com"]
                      description: Lista de direcciones de correo que recibirán el recibo digital.
                      maxLength: 10
                      items:
                        type: string
                        format: email
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del comprobante CFDI en el formato solicitado
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  
  /receipts/{receipt_id}/invoice:
    post:
      operationId: invoiceReceipt
      tags:
        - receipt
      summary: Facturar recibo
      description: |
        Crea una factura a partir de un recibo.

        Sólo pueden facturarse recibos abiertos (`status = "open"`)

        Una vez facturado, el `status` del recibo cambiará a `"invoiced_to_customer"`.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/5ebd8e56f5687a013ca0df46/invoice \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "customer": "58e93bd8e86eb318b0197456",
                    "folio_number": 914,
                    "series": "F"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const invoice = await facturapi.receipts.invoice('5ebd8e56f5687a013ca0df46', {
              customer: '58e93bd8e86eb318b0197456',
              folio_number: 914,
              series: 'F'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Receipt.InvoiceAsync("5ebd8e56f5687a013ca0df46", new Dictionary<string, object>
            {
              ["customer"] = "58e93bd8e86eb318b0197456",
              ["folio_number"] = 914,
              ["series"] = "F"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_test_API_KEY");

            $invoice = $facturapi->Receipts->invoice("5a3f3e35f508333611ad6b3e", [
              "customer" => "58e93bd8e86eb318b0197456",
              "folio_number" => 914,
              "series" => "F"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ReceiptInvoice"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Nuevo objeto `Invoice` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /receipts/global-invoice:
    post:
      operationId: createGlobalInvoice
      tags:
        - receipt
      summary: Crear factura global
      description: |
        Crea una factura global que incluirá todos los recibos con `status = “open”` de un cierto periodo.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/receipts/global-invoice \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "from": "2021-01-01T05:00:00.000Z",
                    "to": "2021-01-31T04:59:59.999Z",
                    "periodicity": "month",
                    "months": "01",
                    "year": 2021,
                    "folio_number": 1234,
                    "series": "G"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const invoice = await facturapi.receipts.createGlobalInvoice({
              from: '2020-12-01T05:00:00.000Z',
              to: '2020-12-31T04:59:59.999Z',
              periodicity: 'month',
              months: '01',
              year: 2021
              folio_number: 1234,
              series: 'G'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var invoice = await facturapi.Receipt.CreateGlobalInvoiceAsync(new Dictionary<string, object>
            {
              ["from"] = "2020-12-01T05:00:00.000Z",
              ["to"] = "2020-12-31T04:59:59.999Z",
              ["periodicity"] = "month",
              ["months"] = "01",
              ["year"] = 2021,
              ["folio_number"] = 1234,
              ["series"] = "G"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_test_API_KEY");

            $invoice = $facturapi->Receipts->createGlobalInvoice([
              "from" => "2020-12-01T05:00:00.000Z",
              "to" => "2020-12-31T04:59:59.999Z",
              "periodicity" => "month",
              "months" => "01",
              "year" => 2021,
              "folio_number" => 1234,
              "series" => "G"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/ReceiptCreateGlobalInvoice"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Nuevo objeto `Invoice` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /retentions:
    post:
      operationId: createRetention
      tags:
        - retention
      summary: Crear retención
      description: |
        Crea una nueva Retención. Si el comprobante es creado en ambiente Live, ésta será **timbrado y enviado al SAT**.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/retentions \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "customer": "58e93bd8e86eb318b0197456",
                    "cve_retenc": "26",
                    "periodo": {
                      "mes_ini": 1,
                      "mes_fin": 12,
                      "ejerc": 2020
                    },
                    "totales": {
                      "monto_tot_operacion": 244.654321,
                      "monto_tot_exent": 145.123456,
                      "imp_retenidos": [
                        {
                          "monto_ret": 40,
                          "base_ret": 250
                        }
                      ]
                    }
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const retention = await facturapi.retentions.create({
              customer: '58e93bd8e86eb318b0197456',
              cve_retenc: '26',
              periodo: {
                mes_ini: 1,
                mes_fin: 12,
                ejerc: 2020
              },
              totales: {
                monto_tot_operacion: 244.654321,
                monto_tot_exent: 145.123456,
                imp_retenidos: [
                  {
                    monto_ret: 40,
                    base_ret: 250
                  }
                ]
              }
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var retention = await facturapi.Retention.CreateAsync(new Dictionary<string, object>
            {
              ["customer"] = "58e93bd8e86eb318b0197456",
              ["cve_retenc"] = "26",
              ["periodo"] = new Dictionary<string, object>
              {
                ["mes_ini"] = 1,
                ["mes_fin"] = 12,
                ["ejerc"] = 2020
              },
              ["totales"] = new Dictionary<string, object>
              {
                ["monto_tot_operacion"] = 244.654321,
                ["monto_tot_exent"] = 145.123456,
                ["imp_retenidos"] = new Dictionary<string, object>[]
                {
                  new Dictionary<string, object>
                  {
                    ["]
                    ["monto_ret"] = 40,
                    ["base_ret"] = 250
                  }
                }
              }
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $retention = $facturapi->Retentions->create([
              "customer" => "58e93bd8e86eb318b0197456",
              "cve_retenc" => "26",
              "periodo" => [
                "mes_ini" => 1,
                "mes_fin" => 12,
                "ejerc" => 2020
              ],
              "totales" => [
                "monto_tot_operacion" => 244.654321,
                "monto_tot_exent" => 145.123456,
                "imp_retenidos" => [
                  [
                    "impuesto" => "ISR",
                    "monto_ret" => 40,
                    "base_ret" => 250
                  ]
                ]
              ]
            ]);
      requestBody:
        $ref: "#/components/requestBodies/RetentionCreate"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Nuevo objeto `Retention` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retention"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listRetentions
      tags:
        - retention
      summary: Listar retenciones
      description: Regresa una lista paginada de todas las retenciones de una organización o realiza una búsqueda de acuerdo a parámetros
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Todas las retenciones de la organización
            curl https://www.facturapi.io/v2/retentions \
              -H "Authorization: Bearer sk_test_API_KEY"

            # Todas las retenciones emitidas para cierto cliente
            curl "https://www.facturapi.io/v2/retentions" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "customer=58e93bd8e86eb318b0197456"

            # Página 3 de los resultados de búsqueda de texto libre
            # de retenciones emitidas entre 2017 y 2019
            curl "https://www.facturapi.io/v2/retentions" \
              -G \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -d "q=John+Doe6&date[gte]=2017-01-01T00:00:00.000Z&date[lt]=2020-01-01T00:00:00.000Z&page=3&limit=10"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Todas las retenciones de la organización
            const retentionSearch = await facturapi.retentions.list();

            // Todas las retenciones emitidas para cierto cliente
            const retentionSearch = await facturapi.retentions.list({
              customer: '590ce6c56d04f840aa8438af'
            });

            // Página 3 de los resultados de búsqueda de texto libre
            // de retenciones emitidas entre 2017 y 2019
            const retentionSearch = await facturapi.retentions.list({
              q: 'John Doe',
              date: {
                gte: new Date('2017-01-01T00:00:00.000Z'),
                lt: new Date('2020-01-01T00:00:00.000Z')
              },
              page: 3,
              limit: 10,
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            // Todas las retenciones de la organización
            var searchResult = await facturapi.Retention.ListAsync();

            // Todas las retenciones emitidas para cierto cliente
            var searchResult = await facturapi.Retention.ListAsync(
              new Dictionary<string, object>
              {
                ["customer"] = "590ce6c56d04f840aa8438af"
              }
            );

            // Página 3 de los resultados de búsqueda de texto libre
            // de retenciones emitidas entre 2017 y 2019
            var searchResult = await facturapi.Retention.ListAsync(
              new Dictionary<string, object>
              {
                ["q"] = "John Doe",
                ["date"] = new Dictionary<string, object>
                  {
                    ["gte"] = new DateTime("2017-01-01T00:00:00.000Z"),
                    ["lt"] = new DateTime("2020-01-01T00:00:00.000Z")
                  },
                ["page"] = 3,
                ["limit"] = 10,
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Todas las retenciones de la organización
            $retentions = $facturapi->Retentions->all();

            // Todas las retenciones emitidas para cierto cliente
            $retentions = $facturapi->Retentions->all([
              customer => "590ce6c56d04f840aa8438af"
            ]);

            // Página 3 de los resultados de búsqueda de texto libre
            // de retenciones emitidas entre 2017 y 2019
            $retentions = $facturapi->Retentions->all([
              q => "John Doe",
              date => [
                gte => new DateTime("2017-01-01T00:00:00.000Z"),
                lt => new DateTime("2020-01-01T00:00:00.000Z")
              ],
              page => 3,
              limit => 10,
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Consulta. Texto a buscar en el nombre fiscal del cliente o su RFC.
        - in: query
          name: customer
          schema:
            type: string
          description: Identificador del cliente. Útil para obtener las retenciones emitidas a un sólo cliente.
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RetentionSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /retentions/{retention_id}:
    get:
      operationId: getRetention
      tags:
        - retention
      summary: Obtener retención por ID
      description: Regresa el objeto 'Retention' relacionado al `id` especificado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/retentions/6062d9fb226600001cd22f71 \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const retention = await facturapi.retentions.retrieve('6062d9fb226600001cd22f71');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var retention = await facturapi.Retention.RetrieveAsync("6062d9fb226600001cd22f71");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $retention = $facturapi->Retentions->retrieve( "6062d9fb226600001cd22f71" );
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Retention`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retention"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: cancelRetention
      tags:
        - retention
      summary: Cancelar retención
      description: |
        Realiza una solicitud de cancelación de retención ante el SAT.

        A diferencia de las facturas comúnes, la cancelación de la retención es inmediata y no requiere autorización de parte del receptor.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/retentions/6062d9fb226600001cd22f71 \
              -H "Authorization: Bearer sk_test_API_KEY" \
              -X DELETE
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');
            const canceledRetention = await facturapi.retentions.cancel('6062d9fb226600001cd22f71');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            var canceledRetention = await facturapi.Retention.CancelAsync("6062d9fb226600001cd22f71");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            $canceledRetention = $facturapi->Retentions->cancel("6062d9fb226600001cd22f71");
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID de la retención a cancelar
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Objeto `Retention` cancelado exitosamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Retention"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /retentions/{retention_id}/{format}:
    get:
      operationId: downloadRetention
      tags:
        - retention
      summary: Descargar retención
      description: Descarga una retención en PDF, XML o ambos en un archivo comprimido ZIP.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            ## Descargar PDF y XML comprimidos en archivo ZIP
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/zip \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Descargar sólo el PDF
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/pdf \
              -H "Authorization: Bearer sk_test_API_KEY"

            ## Descargar sólo el XML
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/xml \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Descargar PDF y XML comprimidos en archivo ZIP
            const zipStream = await facturapi.retentions.downloadZip('58e93bd8e86eb318b019743d');
            const zipFile = fs.createWriteStream('./retencion.zip');
            zipStream.pipe(zipFile);

            // Descargar sólo el PDF
            const pdfStream = await facturapi.retentions.downloadPdf('58e93bd8e86eb318b019743d');
            const pdfFile = fs.createWriteStream('./retencion.pdf');
            pdfStream.pipe(pdfFile);

            // Descargar sólo el XML
            const xmlStream = await facturapi.retentions.downloadXml('58e93bd8e86eb318b019743d');
            const xmlFile = fs.createWriteStream('./retencion.xml');
            xmlStream.pipe(xmlFile);
        - lang: csharp
          label: C#
          source: |
            // Descargar PDF y XML comprimidos en archivo ZIP
            var zipStream = await facturapi.Retention.DownloadZipAsync("58e93bd8e86eb318b019743d");
            // Descargar sólo el XML
            var xmlStream = await facturapi.Retention.DownloadXmlAsync("58e93bd8e86eb318b019743d");
            // Descargar sólo el PDF
            var pdfStream = await facturapi.Retention.DownloadPdfAsync("58e93bd8e86eb318b019743d");

            // Para guardar la descarga en un archivo
            var file = new System.IO.FileStream("C:\\route\\to\\save\\retention.zip", FileMode.Create);
            zipStream.CopyTo(file);
            file.Close();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // stream containing the PDF and XML as a ZIP file
            $zip = $facturapi->Retentions->download_zip("58e93bd8e86eb318b019743d");
            // stream containing the PDF file
            $pdf = $facturapi->Retentions->download_pdf("58e93bd8e86eb318b019743d"); 
            // stream containing the XML file
            $xml = $facturapi->Retentions->download_xml("58e93bd8e86eb318b019743d");
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID del objeto a descargar
        - in: path
          name: format
          schema:
            type: string
            enum:
              - xml
              - pdf
              - zip
          required: true
          description: Formato del archivo de descarga
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del comprobante CFDI en el formato solicitado
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /retentions/{retention_id}/email:
    post:
      operationId: sendRetentionByEmail
      tags:
        - retention
      summary: Enviar retención por correo electrónico
      description: Envía un correo electrónico a la dirección de tu cliente, con los archivos XML y PDF adjuntos al mensaje.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            # Enviar al correo del cliente
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY"
              -X POST

            # Enviar a otro correo
            curl https://www.facturapi.io/v2/retentions/58e93bd8e86eb318b019743d/email \
              -H "Authorization: Bearer sk_test_API_KEY"
              -X POST
              -H "Content-Type: application/json" \
              -d '{
                    "email": "another_email@example.com"
                  }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            // Enviar al correo del cliente
            await facturapi.retentions.sendByEmail('58e93bd8e86eb318b019743d');

            // Enviar a otro correo
            await facturapi.retentions.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { email: 'otro@correo.com' }
            );

            // Enviar a más de un correo (máx. 10)
            await facturapi.retentions.sendByEmail(
              '58e93bd8e86eb318b019743d',
              { 
                email: [
                  'primer@correo.com',
                  'segundo@correo.com'
                ]
              }
            );
        - lang: csharp
          label: C#
          source: |
            // Enviar al correo del cliente
            await facturapi.Retention.SendByEmailAsync("58e93bd8e86eb318b019743d");

            // Enviar a otro correo
            await facturapi.Retention.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = "otro@correo.com"
              }
            );

            // Enviar a más de un correo
            await facturapi.Retention.SendByEmailAsync(
              "58e93bd8e86eb318b019743d",
              new Dictionary<string, object>
              {
                ["email"] = new String[]
                {
                  "primer@correo.com",
                  "segundo@correo.com"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            // Enviar al correo del cliente
            $facturapi->Retentions->send_by_email("58e93bd8e86eb318b019743d");

            // Enviar a otro correo
            $facturapi->Retentions->send_by_email(
              "58e93bd8e86eb318b019743d",
              "otro@correo.com"
            );

            // Enviar a más de un correo (máx 10)
            $facturapi->Retentions->send_by_email(
              "58e93bd8e86eb318b019743d",
              [
                "primer@correo.com",
                "segundo@correo.com"
              ]
            );
      parameters:
        - in: path
          name: retention_id
          schema:
            type: string
          required: true
          description: ID del objeto a obtener
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: Dirección de correo electrónico a enviar la retención. Si no se envía este parámetro, la retención será enviada al correo que el cliente tenga registrado.
                  oneOf:
                    - type: string
                      format: email
                      description: Dirección de correo eletrónico
                      example: otro@correo.com
                    - type: array
                      example: ["primer@correo.com", "segundo@correo.com"]
                      description: Lista de direcciones de correo que recibirán la retención.
                      maxLength: 10
                      items:
                        type: string
                        format: email
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Archivo del comprobante en el formato solicitado
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /organizations:
    post:
      operationId: createOrganization
      tags:
        - organization
      summary: Crear organización
      description: |
        Crea una nueva Organización que pertenecerá a tu cuenta de usuario.

        Después de crear la organización y antes de poder emitir facturas con
        la organización, deberás de terminar de configurarla llamando a los
        métodos de [Actualizar datos fiscales](#operation/editOrganizationLegal) y
        [Subir certificados (CSD)](#operation/uploadOrganizationCertificate)

        Recuerda que los folios de tu suscripción podrán ser consumidos por
        cualquiera de las organizaaciones registradas bajo tu cuenta.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                  "name": "Skynet"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.create({
              name: 'Skynet'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.CreateAsync(new Dictionary<string, object>
            {
              ["name"] = "Skynet"
            });
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");
            $organization = $facturapi->Organizations->create([
              "name" => "Skynet"
            ]);
      requestBody:
        $ref: "#/components/requestBodies/OrganizationCreate"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Nuevo objeto `Organization` creado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    get:
      operationId: listOrganizations
      tags:
        - organization
      summary: Listar organizaciones
      description: Regresa una lista paginada de todas las organizationes registradas bajo tu cuenta, o realiza una búsqueda de acuerdo a parámetros.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const organizationResults = await facturapi.organizations.list();
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            var searchResult = await facturapi.Organization.ListAsync();
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $organizations = $facturapi->Organizations->all()
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Consulta. Texto a buscar en `name` (nombre comercial), `legal_name` (nombre fiscal) o en `tax_id` (RFC).
        - $ref: "#/components/parameters/SearchDate"
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganizationSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/legal:
    put:
      operationId: editOrganizationLegal
      tags:
        - organization
      summary: Editar datos fiscales
      description: |
        Actualiza los datos fiscales de la organización.

        Si estás buscando cómo editar el RFC, recuerda que la propiedad
        `tax_id` se asigna automáticamente al subir los Certificados de Sello
        Digital.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/legal \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "name": "Skynet",
                    "legal_name": "Skynet",
                    "tax_system": "601",
                    "website": "www.sky.net",
                    "phone": "555-555-5555",
                    "address": {
                      "exterior": "1414",
                      "interior": "12",
                      "zip": "44940",
                      "neighborhood": "Villa Toscana",
                      "city": "Guadalajara",
                      "municipality": "Guadalajara",
                      "state": "Jalisco",
                      "country": "México"
                    }
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.updateLegal(
              '5a2a307be93a2f00129ea035',
              {
                name: 'Skynet',
                legal_name: 'Skynet',
                tax_system: Facturapi.TaxSystem.GENERAL_LEY_DE_PERSONAS_MORALES,
                website: 'www.sky.net',
                phone: '555-555-5555',
                address: {
                  exterior: '1414',
                  interior: '12',
                  zip: '44940',
                  neighborhood: 'Villa Toscana',
                  city: 'Guadalajara',
                  municipality: 'Guadalajara',
                  state: 'Jalisco',
                  country: 'México'
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.UpdateLegalAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["name"] = "Skynet",
                ["legal_name"] = "Skynet",
                ["tax_system"] = "601",
                ["website"] = "www.sky.net",
                ["phone"] = "555-555-5555",
                ["address"] = new Dictionary<string, object>
                {
                  ["exterior"] = "1414",
                  ["interior"] = "12",
                  ["zip"] = "44940",
                  ["neighborhood"] = "Villa Toscana",
                  ["city"] = "Guadalajara",
                  ["municipality"] = "Guadalajara",
                  ["state"] = "Jalisco",
                  ["country"] = "México"
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");
            $organization = $facturapi->Organizations->updateLegal(
              "5a2a307be93a2f00129ea035", [
                "name" => "Skynet",
                "legal_name" => "Skynet",
                "tax_system" => "601",
                "website" => "www.sky.net",
                "phone" => "555-555-5555",
                "address" => [
                  "exterior" => "1414",
                  "interior" => "12",
                  "zip" => "44940",
                  "neighborhood" => "Villa Toscana",
                  "city" => "Guadalajara",
                  "municipality" => "Guadalajara",
                  "state" => "Jalisco",
                  "country" => "México"
                )
              ]
            ];
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditLegal"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` modificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/certificate:
    put:
      operationId: uploadOrganizationCertificate
      tags:
        - organization
      summary: Subir certificados (CSD)
      description: |
        Sube los archivos del Certificado de Sello Digital (CSD) proporcionado
        por el SAT. Esta llamada también debe usarse para reemplazar los
        certificados existentes en caso de solicitar nuevos.

        Al actualizar tus certificados se leerá el RFC y asignará
        automáticamente a `legal.tax_id`.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/certificate \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F 'cer=@/path/to/your/CSD.cer' \
              -F 'key=@/path/to/your/CSD.key' \
              -F 'password=CONTRASEÑA_DEL_CERTIFICADO'
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const cerFileStream = fs.createReadStream('/path/to/your/CSD.cer');
            const keyFileStream = fs.createReadStream('/path/to/your/CSD.key');

            const organization = await facturapi.organizations.uploadCertificate(
              '5a2a307be93a2f00129ea035',
              cerFileStream,
              keyFileStream,
              'CONTRASEÑA_DEL_CERTIFICADO'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var cerFileStream = File.OpenRead(@"C:\path\to\your\CSD.cer");
            var keyFileStream = File.OpenRead(@"C:\path\to\your\CSD.key");

            var organization = await facturapi.Organization.UploadCertificateAsync(
              "5a2a307be93a2f00129ea035",
              cerFileStream,
              keyFileStream,
              "CONTRASEÑA_DEL_CERTIFICADO"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->uploadCertificate(
              "5a2a307be93a2f00129ea035",
              [
                "cerFile" => "/path/to/CSD.cer",
                "keyFile" => "/path/to/CSD.key",
                "password" => "mYp455w0rD1553cUr3!"
              ]
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      requestBody:
        $ref: "#/components/requestBodies/OrganizationUploadCerts"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` modificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/logo:
    put:
      operationId: uploadOrganizationLogo
      tags:
        - organization
      summary: Subir logotipo
      description: |
        Sube el logotipo de la organización que será colocado en el PDF y en
        los correos que se envían al cliente con la factura adjunta.

        El archivo debe ser una imagen en formato JPG o PNG y tener un tamaño
        no mayor a 500 KB. Las dimensiones recomendadas son 800 × 500px.

        Si la organización ya tiene un logotipo, esta llamada reemplaza el
        logotipo anterior.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/logo \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: multipart/form-data" \
              -F 'file=@/path/to/your/logo.jpg'
        - lang: JavaScript
          label: Node.js
          source: |
            const fs = require('fs');
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const fileStream = fs.createReadStream('/path/to/your/logo.jpg');
            const organization = await facturapi.organizations.uploadLogo(
              '5a2a307be93a2f00129ea035',
              fileStream
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var fileStream = File.OpenRead(@"C:\path\to\your\logo.jpg");

            var organization = await facturapi.Organization.UploadLogoAsync(
              "5a2a307be93a2f00129ea035",
              fileStream
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->uploadLogo(
              "5a2a307be93a2f00129ea035",
              "/path/to/logo.jpg"
            ));
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      requestBody:
        $ref: "#/components/requestBodies/OrganizationUploadLogo"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` modificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/customization:
    put:
      operationId: editOrganizationCustomization
      tags:
        - organization
      summary: Editar personalización
      description: |
        Actualiza la información relacionada con la identidad o branding de la organización.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/customization \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "color": "#BADA55",
                    "pdf_extra": {
                      "codes": false,
                      "product_key": true
                    }
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.updateCustomization(
              '5a2a307be93a2f00129ea035',
              {
                color: '#BADA55',
                pdf_extra: {
                  codes: false,
                  product_key: true
                }
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var organization = await facturapi.Organization.UpdateCustomizationAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["color"] = "#BADA55",
                ["pdf_extra"] = new Dictionary<string, object>
                {
                  ["codes"] = false,
                  ["product_key"] = true
                }
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->updateCustomization(
              "5a2a307be93a2f00129ea035",
              array(
                "color" => "#BADA55",
                "pdf_extra" => array(
                  "codes" => false,
                  "product_key" => true
                )
              )
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditCustomization"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` modificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/receipts:
    put:
      operationId: editOrganizationReceiptsSettings
      tags:
        - organization
      summary: Editar config. recibos
      description: |
        Actualiza la configuración de recibos de la organización.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/receipts \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "invoicing_period": "month",
                    "duration_days": 14,
                    "next_folio_number": 100
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.updateReceiptSettings(
              '5a2a307be93a2f00129ea035',
              {
                invoicing_period: "month",
                duration_days: 14,
                next_folio_number: 100
              }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var organization = await facturapi.Organization.UpdateReceiptSettingsAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["invoicing_period"] = "month",
                ["duration_days"] = 14,
                ["next_folio_number"] = 100
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->updateReceiptSettings(
              "5a2a307be93a2f00129ea035",
              [
                "invoicing_period" => "month",
                "duration_days" => 14,
                "next_folio_number" => 100
              ]
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditReceiptsSettings"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` modificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/domain-check:
    get:
      operationId: checkDomainAvailability
      tags:
        - organization
      summary: Revisar dominio disponible
      description: Revisa si un identificador está disponible para elegir como dominio para el portal de autofactura.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/domain-check?domain=empresa-demo \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.checkDomainIsAvailable({
              domain: 'empresa-demo'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.CheckDomainIsAvailableAsync(
              new Dictionary<string, object>
              {
                ["domain"] = "empresa-demo"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->checkDomainIsAvailable(
              ["domain" => "empresa-demo"]
            );
      parameters:
        - in: query
          name: domain
          schema:
            $ref: "#/components/schemas/DomainField"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization`
          content:
            application/json:
              schema:
                type: object
                properties:
                  available:
                    type: boolean
                    example: true
                    description: Indica si el dominio está diponible
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/domain:
    put:
      operationId: editOrganizationDomain
      tags:
        - organization
      summary: Elegir dominio de autofactura
      description: |
        Elige el dominio que utilizará esta organización en su micrositio de
        autofactura. Una vez elegido el dominio, deberás ponerte en contacto
        con nosotros si necesitas cambiarlo.

        El dominio que elijas será el que aparecerá en el campo
        `self_invoice_url` al crear un nuevo recibo, de la siguiente manera:

        `https://factura.space/{DOMAIN}/{RECEIPT_KEY}`
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/domain \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY" \
              -H "Content-Type: application/json" \
              -d '{
                    "domain": "empresa-demo"
                }'
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const organization = await facturapi.organizations.updateDomain(
              '5a2a307be93a2f00129ea035',
              { domain: 'empresa-demo' }
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");

            var organization = await facturapi.Organization.UpdateDomainAsync(
              "5a2a307be93a2f00129ea035",
              new Dictionary<string, object>
              {
                ["domain"] = "empresa-demo"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi("sk_user_API_KEY");

            $organization = $facturapi->Organizations->updateDomain(
              "5a2a307be93a2f00129ea035",
              array( "domain" => "empresa-demo" )
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      requestBody:
        $ref: "#/components/requestBodies/OrganizationEditDomain"
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` modificado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}:
    get:
      operationId: getOrganization
      tags:
        - organization
      summary: Obtener organización por ID
      description: Regresa el objeto 'Organization' relacionado al `id` especificado.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035 \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.retrieve(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.RetrieveAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->retrieve("5a2a307be93a2f00129ea035");
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization`
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    delete:
      operationId: deleteOrganization
      tags:
        - organization
      summary: Eliminar organización
      description: |
        Elimina la organización de tu cuenta de Facturapi. Una vez eliminada,
        ya no podrás acceder a sus recursos, tales como clientes, productos,
        facturas, recibos o retenciones.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035 \
              -X DELETE \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');
            const organization = await facturapi.organizations.del(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var organization = await facturapi.Organization.DeleteAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->delete(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID del objeto a eliminar
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Objeto `Organization` eliminado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Organization"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/apikeys/test:
    get:
      operationId: getTestApiKey
      tags:
        - organization
      summary: Obtener Test Api Key
      description: Obtiene la llave secreta de ambiente Test de la organización.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/test \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const apiKeys = await facturapi.organizations.getTestApiKey(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var apiKeys = await facturapi.Organization.GetTestApiKeyAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $organization = $facturapi->Organizations->getTestApiKey(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Test API Key
          content:
            application/json:
              schema:
                type: string
                example: sk_test_API_KEY
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
    put:
      operationId: renewTestApiKey
      tags:
        - organization
      summary: Renovar Test Api Key
      description: Renueva la llave secreta de ambiente Test de la organización e invalida inmediatamente la anterior.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/test \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const newTestApiKey = await facturapi.organizations.renewTestApiKey(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var newTestApiKey = await facturapi.Organization.RenewTestApiKeyAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $new_test_api_key = $facturapi->Organizations->renewTestApiKey(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Test API Key
          content:
            application/json:
              schema:
                type: string
                example: sk_test_API_KEY
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /organizations/{organization_id}/apikeys/live:
    put:
      operationId: renewLiveApiKey
      tags:
        - organization
      summary: Renovar Live Api Key
      description: Renueva la llave secreta de ambiente Live de la organización e invalida inmediatamente la anterior.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/organizations/5a2a307be93a2f00129ea035/apikeys/live \
              -X PUT \
              -H "Authorization: Bearer sk_user_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_user_API_KEY');

            const newLiveApiKey = await facturapi.organizations.renewLiveApiKey(
              '5a2a307be93a2f00129ea035'
            );
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_user_API_KEY");
            var newLiveApiKey = await facturapi.Organization.RenewLiveApiKeyAsync(
              "5a2a307be93a2f00129ea035"
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_user_API_KEY" );
            $new_live_api_key = $facturapi->Organizations->renewLiveApiKey(
              "5a2a307be93a2f00129ea035"
            );
      parameters:
        - in: path
          name: organization_id
          schema:
            type: string
          required: true
          description: ID de la organización
      security:
        - "Secret User Key": []
      responses:
        "200":
          description: Live API Key
          content:
            application/json:
              schema:
                type: string
                example: sk_live_API_KEY
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"

  /check:
    get:
      tags:
        - tools
      summary: Health check (Pulso)
      description: Indica el estatus de disponibilidad de la API.
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: La API está operando con normalidad.
          content:
            application/json:
              schema:
                description: a
                type: object
                properties:
                  ok:
                    type: boolean
                    example: true
        "401":
          description: Error de autenticación. Asegúrate de estar usando tu llave secreta.
        "502":
          description: Servicio temporalmente no disponible.
  /tools/tax_id_validation:
    get:
      tags:
        - tools
      summary: Validar RFC
      description: |
        Consulta el estado de un RFC en la lista de **EFOS** (Empresas que
        Facturan Operaciones Simuladas). Al aparecer en esta lista, el RFC es o
        fue sospechoso de incurrir en simulación de operaciones fiscales
        (empresas factureras).

        La respuesta (detallada más abajo) incluye los resultados de esta
        validación. Se incluye la propiedad
        booleana `is_valid`, que Facturapi resuelve interpretando la respuesta.
        Un valor de `true` para esta propiedad indica que el RFC no tiene asuntos
        por resolver y está libre de problemas; y lo contrario para `false`.
        Adicionalmente puedes consultar la propiedad data para ver los valores
        en bruto de la consulta al SAT.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/tools/tax_id_validation?tax_id=BBA830831LJ2 \
              -H "Authorization: Bearer sk_test_API_KEY"
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const validation = await facturapi.tools.validateTaxId('BBA830831LJ2');
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");
            
            var customer = await facturapi.Tools.ValidateTaxIdAsync("BBA830831LJ2");
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );
            
            $customer = $facturapi->Tools->validateTaxId("BBA830831LJ2");
      parameters:
        - in: query
          name: tax_id
          required: true
          schema:
            type: string
            description: RFC a validar
            example: BBA830831LJ2
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la validación
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaxIdValidationResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  
  /catalogs/products:
    get:
      tags:
        - sat_keys
      summary: Producto/Servicio
      description: Busca en el catálogo Productos/Servicios del SAT, el cual contiene la clave a incluir en la factura.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/catalogs/products?q=ukelele \
              -H "Authorization: Bearer sk_test_API_KEY" 
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const searchResult = await facturapi.catalogs.searchProducts({
              q: 'ukelele'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            var searchResult = await facturapi.Catalog.SearchProducts(
              new Dictionary<string, object>
              {
                ["q"] = "ukelele"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $result = $facturapi->Catalogs->searchProducts([
              "q" => "ukelele"
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Consulta. Texto a buscar en la descripción de la categoría.
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCatalogSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
  /catalogs/units:
    get:
      tags:
        - sat_keys
      summary: Unidades de medida
      description: Busca en el catálogo de Unidades de Medida del SAT.
      x-codeSamples:
        - lang: Bash
          label: cURL
          source: |
            curl https://www.facturapi.io/v2/catalogs/units?q=pulgada \
              -H "Authorization: Bearer sk_test_API_KEY" 
        - lang: JavaScript
          label: Node.js
          source: |
            const Facturapi = require('facturapi');
            const facturapi = new Facturapi('sk_test_API_KEY');

            const searchResult = await facturapi.catalogs.searchUnits({
              q: 'pulgada'
            });
        - lang: csharp
          label: C#
          source: |
            var facturapi = new FacturapiClient("sk_test_API_KEY");

            var searchResult = await facturapi.Catalog.SearchUnits(
              new Dictionary<string, object>
              {
                ["q"] = "pulgada"
              }
            );
        - lang: PHP
          source: |
            $facturapi = new Facturapi( "sk_test_API_KEY" );

            $result = $facturapi->Catalogs->searchUnits([
              "q" => "pulgada"
            ]);
      parameters:
        - in: query
          name: q
          schema:
            type: string
          description: Consulta. Texto a buscar en la descripción de la unidad de medida.
        - $ref: "#/components/parameters/SearchPage"
        - $ref: "#/components/parameters/SearchLimit"
      security:
        - "Secret Live Key": []
        - "Secret Test Key": []
      responses:
        "200":
          description: Resultado de la búsqueda
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnitCatalogSearchResult"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/UnexpectedError"
x-webhooks:
  "Autofactura completada":
    post:
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Tipo de evento
                      exacmple: "receipt.self_invoice_complete"
                      enum:
                        - receipt.self_invoice_complete
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Tipo de objeto asociado al evento
                          enum:
                            - receipt
                        object:
                          $ref: "#/components/schemas/Receipt"
  "Estatus de cancelación actualizado":
    post:
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Tipo de evento
                      enum:
                        - invoice.cancellation_status_updated
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Tipo de objeto asociado al evento
                          enum:
                            - invoice
                        object:
                          $ref: "#/components/schemas/Invoice"
  "Estatus de recibo actualizado":
    post:
      tags:
        - events
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/EventBase"
                - type: object
                  properties:
                    type:
                      type: string
                      description: Tipo de evento
                      enum:
                        - receipt.status_updated
                    data:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Tipo de objeto asociado al evento
                          enum:
                            - receipt
                        object:
                          $ref: "#/components/schemas/Receipt"
components:
  responses:
    BadRequest:
      description: Error en parámetros de la petición
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    Unauthenticated:
      description: Error de autenticación
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    NotFound:
      description: No se encontró el recurso especificado.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"
    UnexpectedError:
      description: Error inesperado
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GenericError"

  requestBodies:
    CustomerCreate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CustomerCreateInput"
    CustomerEdit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/CustomerProperties"
    ProductCreate:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProductRequiredProperties"
              - $ref: "#/components/schemas/ProductProperties"
    ProductEdit:
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/ProductProperties"
    InvoiceCreate:
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/InvoiceIngresoInput"
              - $ref: "#/components/schemas/InvoiceEgresoInput"
              - $ref: "#/components/schemas/InvoicePagoInput"
              - $ref: "#/components/schemas/InvoiceNominaInput"
              - $ref: "#/components/schemas/InvoiceTrasladoInput"
    ReceiptCreate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ReceiptInput"
    ReceiptInvoice:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/InvoiceReceiptInput"
    ReceiptCreateGlobalInvoice:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GlobalInvoiceInput"
    RetentionCreate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RetentionInput"
    OrganizationCreate:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationCreateInput"
    OrganizationEditLegal:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrganizationLegalInput"
    OrganizationUploadCerts:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationCertsInput"
    OrganizationUploadLogo:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationLogoInput"
    OrganizationEditCustomization:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationCustomizationInput"
    OrganizationEditReceiptsSettings:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationReceiptsInput"
    OrganizationEditDomain:
      content:
        multipart/form-data:
          schema:
            $ref: "#/components/schemas/OrganizationDomainInput"

  parameters:
    SearchDate:
      in: query
      name: date
      style: deepObject
      schema:
        $ref: "#/components/schemas/DateRange"
      description: Objeto con rango de fechas solicitado.
    SearchPage:
      in: query
      name: page
      schema:
        type: integer
        minimum: 1
      description: Página de resultados a regresar, empezando desde la página 1.
    SearchLimit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        default: 50
        maximum: 100
      description: Número del 1 al 100 que representa la cantidad máxima de resultados a regresar con motivos de paginación.

  schemas:
    EventBase:
      type: object
      properties:
        id:
          type: string
          description: ID del evento
          exacmple: 61f81a81bd4661b11b9b404e
        created_at:
          type: string
          format: date-time
          description: Fecha y hora de creación del evento
          exacmple: 2022-03-30T00:00:00Z
        livemode:
          type: boolean
          description: Indica si el evento se generó en modo test (false) o en modo producción (true).
          exacmple: false
        organization:
          type: string
          description: ID de la organización a la que pertenece el evento
          exacmple: 61f81a7fbd4661b11b9b3f27
    DateRange:
      type: object
      properties:
        gt:
          type: string
          format: date-time
          title: Greater than
          description: Límite inferior exclusivo del rango de fechas a solicitar.
        gte:
          type: string
          format: date-time
          title: Greater than or equals
          description: Límite inferior inclusivo del rango de fechas a solicitar.
        lt:
          type: string
          format: date-time
          title: Lesser than
          description: Límite superior exclusivo del rango de fechas a solicitar.
        lte:
          type: string
          format: date-time
          title: Lesser than or equals
          description: Límite superior inclusivo del rango de fechas a solicitar.
    GenericError:
      type: object
      properties:
        message:
          type: string
          title: Descripción del error
          description: Indica qué salió mal y puede incluir una sugerencia sobre cómo solucionar el error.

    # Common base objects
    SearchResult:
      type: object
      properties:
        page:
          type: integer
          example: 1
          title: Página
          description: Número de página de resultados
        total_pages:
          type: integer
          example: 1
          title: Páginas totales
          description: Número total de páginas de resultados
        total_results:
          type: integer
          example: 1
          title: Resultados totales
          description: Número de elementos individuales en todas las páginas de resultados
    ResourceAutoGeneratedProps:
      type: object
      properties:
        id:
          type: string
          description: ID del objeto
          example: "590ce6c56d04f840aa8438af"
        created_at:
          type: string
          format: date-time
          description: Fecha de registro
          example: "2017-05-05T20:55:33.468Z"
        livemode:
          type: boolean
          description: Si el valor es `true`, indica que el objeto fue creado en ambiente Live; o si es `false`, en ambiente Test.
          example: false

    # Global objects
    TaxIdValidationResult:
      type: object
      properties:
        efos:
          type: object
          description: |
            Resultado de la validación en la lista de Empresas que
            Facturan Operaciones Simuladas del SAT.
          properties:
            is_valid:
              type: boolean
              example: true
              description: |
                Indica si el RFC tiene algún asunto relacionado con esta lista.
                `true`: El RFC no está en la lista de EFOS o su situación fue
                apelada y resultó favorable. `false`: El RFC está registrado como
                “Presunto” o “Definitivo” en la lista de EFOS.
            data:
              type: object
              description: |
                Objeto con el resultado de la búqueda ante el SAT.
                Toda la información contenida en este objeto proviene del SAT.
              properties:
                mensaje:
                  type: string
                  description: |
                    Disponible sólo cuando el RFC no fue encontrado en la lista,
                    lo cual es bueno.
                fechaLista:
                  type: string
                  example: Información actualizada al 17 de septiembre de 2021
                  description: Texto que indica la fecha de actualización de la lista.
                detalles:
                  type: array
                  description: Arreglo con los resultados de la búsqueda en la lista de EFOS.
                  items:
                    type: object
                    properties:
                      rfc:
                        type: string
                        example: NOR170627727
                        description: El RFC consultado, a manera de confirmación.
                      razonSocial:
                        type: string
                        example: NORMANDIA FERRE,
                        description: Razón social del contribuyente.
                      situacionContribuyente:
                        type: string
                        example: Definitivo
                        description: |
                          Texto que indica la situación actual. Consulta
                          [esta tabla](#situación-del-contribuyente) para ver
                          el detalle de los distintos valores.
                      numFechaPresuncion:
                        type: string
                        example: 500-05-2020-23758 de fecha 03 de noviembre de 2020
                        description: Texto con identificador y fecha del reporte de presunción.
                      pubFechaSatPresuntos:
                        type: string
                        format: "DD/MM/YYYY"
                        example:  03/11/2020
                        description: Fecha de publicación de presunción.
                      numGlobalPresuncion:
                        type: string
                        example: 500-05-2020-23758 de fecha 03 de noviembre de 2020
                        description: Texto con identificador y fecha de publicación en el listado global de presunción.
                      pubFechaDofPresuntos:
                        type: string
                        format: "DD/MM/YYYY"
                        example: 18/11/2020
                        description: Fecha de publicación en el Diario Oficial de la Federación (DOF).
                      pubSatDefinitivos: 
                        type: string
                        example: 500-05-2021-151
                        description: Identificador de la publicación de estado “Definitivo”.
                      pubDofDefinitivos: 
                        type: string
                        format: "DD/MM/YYYY"
                        example: 25/05/2021
                        description: Fecha de la publicación de estado “Definitivo” en el DOF.
                      numFechaSentFav:
                        type: string
                        example: 500-05-2021-15156 de fecha 25 de mayo de 2021
                        description: Texto con identificador y fecha de sentencia favorable.
                      pubSatSentFav: 
                        type: string
                        example: 08/06/2021
                        format: "DD/MM/YYYY"
                        description: Fecha de sentencia favorable
                      
    ProductCatalogResult:
      type: object
      properties:
        key:
          type: string
          description: Clave del catálogo
          example: 60131324
        description:
          type: string
          description: Descripción
          example: Ukelele
        score:
          type: number
          description: |
            Número del 0 al 1 que representa el nivel de coincidencia del
            resultado con respecto a la consulta de búsqueda.
          example: 0.8
    UnitCatalogResult:
      type: object
      properties:
        key:
          type: string
          description: Clave del catálogo
          example: INH
        description:
          type: string
          description: Descripción
          example: Pulgada
        score:
          type: number
          description: |
            Número del 0 al 1 que representa el nivel de coincidencia del
            resultado con respecto a la consulta de búsqueda.
          example: 0.9

    ProductCatalogSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/ProductCatalogResult"
    UnitCatalogSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/UnitCatalogResult"

    
    LocalTax:
      type: object
      required:
        - rate
        - type
      properties:
        rate:
          type: number
          example: 0.10
          description: Tasa del impuesto en fracción decimal.
        base:
          type: number
          default: 100% del subtotal
          description: Base del impuesto
        type:
          type: string
          description: Nombre del impuesto. Texto libre.
        withholding:
          type: boolean
          default: false
          description: Indica si se trata de un impuesto retenido (`true`), o un impuesto trasladado (`false`)
    BaseTax:
      title: Tax
      type: object
      required:
        - rate
      discriminator:
        propertyName: type
        mapping:
          IVA: "#/components/schemas/BaseTax"
          ISR: "#/components/schemas/BaseTax"
          IEPS: "#/components/schemas/IepsTax"
      properties:
        rate:
          type: number
          example: 0.16
          description: Tasa del impuesto en fracción decimal.
        base:
          type: number
          default: 100% del subtotal
          description: Base del impuesto.
        type:
          type: string
          default: IVA
          description: Tipo de impuesto.
          enum:
            - IVA
            - ISR
            - IEPS
        factor:
          type: string
          default: Tasa
          enum:
            - Tasa
            - Cuota
            - Exento
          description: Tipo factor
        withholding:
          type: boolean
          default: false
          description: Indica si se trata de un impuesto retenido (`true`), o un impuesto trasladado (`false`)
    IepsTax:
      type: object
      allOf:
        - $ref: "#/components/schemas/BaseTax"
        - type: object
          properties:
            ieps_mode:
              type: string
              default: sum_before_taxes
              enum:
                - sum_before_taxes
                - break_down
                - unit
              description: |
                Indica la manera de cobrar el impuesto, y puede tener los valores:

                `"sum_before_taxes"`: Aplica primero el IEPS al subtotal y usa el resultado como base del resto de impuestos en el producto.

                `"break_down"`: Cobra y desgloza el IEPS al mismo nivel que el resto de los impuestos en el producto.

                `"unit"`: Aplica el IEPS antes del precio unitario, y usa el precio unitario original como base para el resto de impuestos.

                Consulta con tu contador qué caso aplica para tu giro de empresa y producto.

    Stamp:
      type: object
      description: Información sobre el timbre fiscal digital agregado por el PAC.
      properties:
        signature:
          type: string
          description: Sello digital del comprobante fiscal.
        date:
          type: string
          format: date-time
          description: Fecha de timbrado en formato ISO8601 (UTC String).
        sat_cert_number:
          type: string
          description: Número de serie del certificado del SAT usado para timbrar.
        sat_signature:
          type: string
          description: Sello digital del timbre fiscal digital.

    LineItem:
      type: object
      properties:
        quantity:
          type: number
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
        discount:
          type: number
          description: Monto total de descuento aplicado a este concepto.
          example: 0
        product:
          $ref: "#/components/schemas/LineItemProduct"
          description: Objeto con información del producto o servicio facturado.
        parts:
          $ref: "#/components/schemas/Parts"
          description: Objeto con información de las partes de la factura.
    ThirdParty:
      type: object
      description: |
        Objeto con información del contribuyente tercero, a cuenta del que se realiza la operación.

        Corresponde al campo "ACuentaTerceros" en el CFDI.
      properties:
        legal_name:
          type: string
          description: Nombre o razón social del tercero.
          example: "The Michael Scott Paper Company"
        tax_id:
          type: string
          description: RFC del tercero.
          example: "MIC920101HN7"
        tax_system:
          type: string
          maxLength: 3
          minLength: 3
          description: Régimen fiscal del tercero.
          example: "601"
        zip:
          type: string
          description: Código postal del tercero.
          example: "01234"
    LineItemInput:
      title: LineItem
      required:
        - product
      type: object
      description: Conceptos incluidos en el documento
      properties:
        quantity:
          type: number
          default: 1
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
        discount:
          type: number
          description: Monto total de descuento aplicado a este concepto.
          default: 0
          example: 0
        product:
          description: Objeto con información del producto o servicio facturado.
          oneOf:
            - $ref: "#/components/schemas/LineItemProductInput"
            - type: string
              title: product_id
              description: ID de un producto previamente registrado en Facturapi
        parts:
          type: array
          items:
            $ref: "#/components/schemas/PartInput"
        customs_keys:
          type: array
          items:
            type: string
          description: Números de pedimento asociados a este concepto.
        complement:
          type: string
          format: xml
          description: Código XML de tu complemento.
        third_party:
          allOf:
            - type: object
              required:
                - legal_name
                - tax_id
                - tax_system
                - zip
            - $ref: "#/components/schemas/ThirdParty"
        property_tax_account:
          type: string
          description: Número de cuenta para el impuesto predial.
          example: "0102030405"
    LineItemEgresoInput:
      title: LineItem
      required:
        - product
      type: object
      description: Conceptos incluidos en el documento
      properties:
        quantity:
          type: number
          default: 1
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
        discount:
          type: number
          description: Monto total de descuento aplicado a este concepto.
          default: 0
          example: 0
        product:
          description: Objeto con información del producto o servicio facturado.
          oneOf:
            - $ref: "#/components/schemas/LineItemProductEgresoInput"
            - type: string
              title: product_id
              description: ID de un producto previamente registrado en Facturapi
        parts:
          type: array
          items:
            $ref: "#/components/schemas/PartInput"
        customs_keys:
          type: array
          items:
            type: string
          description: Números de pedimento asociados a este concepto.
        complement:
          type: string
          format: xml
          description: Código XML de tu complemento.
        third_party:
          allOf:
            - type: object
              required:
                - legal_name
                - tax_id
                - tax_system
                - zip
            - $ref: "#/components/schemas/ThirdParty"
    LineItemTrasladoInput:
      title: LineItem
      required:
        - product
      type: object
      description: Conceptos incluidos en el documento
      properties:
        quantity:
          type: number
          default: 1
          description: Cantidad de unidades incluídas del mismo concepto.
          example: 1
        product:
          description: Objeto con información del producto o servicio facturado.
          oneOf:
            - $ref: "#/components/schemas/LineItemTrasladoProductInput"
            - type: string
              title: product_id
              description: ID de un producto previamente registrado en Facturapi
        customs_keys:
          type: array
          items:
            type: string
          description: Números de pedimento asociados a este concepto.
        complement:
          type: string
          format: xml
          description: Código XML de tu complemento.
        parts:
          type: array
          items:
            $ref: "#/components/schemas/PartInput"
        third_party:
          type: object
          required:
            - legal_name
            - tax_id
            - tax_system
            - zip
          properties:
            legal_name:
              type: string
              description: Nombre o razón social del tercero.
              example: "The Michael Scott Paper Company"
            tax_id:
              type: string
              description: RFC del tercero.
              example: "STA920101HN7"
            tax_system:
              type: string
              maxLength: 3
              minLength: 3
              description: Régimen fiscal del tercero.
              example: "601"
            zip:
              type: string
              description: Código postal del tercero.
              example: "01234"

    CustomComplementData:
      title: string
      type: string
      format: xml
      description: Código XML de tu complemento tal cual como quieres que se inserte en el XML. Debe contener sólamente un nodo XML raíz.
    CustomComplementProperties:
      title: CustomComplement
      type: object
      properties:
        type:
          type: string
          enum:
            - custom
          description: Tipo de complemento.
        data:
          $ref: '#/components/schemas/CustomComplementData'
    CustomComplementInput:
      title: CustomComplement
      allOf:
        - type: object
          required:
            - type
            - data
        - $ref: "#/components/schemas/CustomComplementProperties"
    NominaComplementDataInput:
      title: NominaComplementData
      description: Objeto con la información del complemento de nómina.
      allOf:
        - type: object
          required:
            - fecha_inicial_pago
            - fecha_final_pago
            - num_dias_pagados
            - receptor
            - percepciones
        - $ref: "#/components/schemas/NominaComplementDataDirectProperties"
        - $ref: "#/components/schemas/NominaComplementDataNestedInput"
    NominaComplementDataProperties:
      description: Complemento de Nómina.
      allOf:
        - $ref: "#/components/schemas/NominaComplementDataDirectProperties"
        - $ref: "#/components/schemas/NominaComplementDataNestedProperties"
    NominaComplementDataDirectProperties:
      type: object
      properties:
        tipo_nomina:
          type: string
          default: O
          enum:
            - O
            - E
          description: |
            Tipo de nómina.
            - `“O”` (Ordinaria): Cuando corresponde a un pago que se realiza de manera habitual, como sueldos.
            - `“E”` (Extraordinaria): Para pagos fuera de lo habitual, como liquidaciones, aguinaldos o bonos.
        fecha_pago:
          type: string
          format: date
          default: now
          description: Fecha de pago de la nómina al trabajador.
        fecha_inicial_pago:
          type: string
          format: date
          description: Fecha inicial del periodo de pago.
        fecha_final_pago:
          type: string
          format: date
          description: Fecha final del periodo de pago.
        num_dias_pagados:
          type: number
          minimum: 0
          exclusiveMinimum: true
          description: Número de días pagados. Puede ser entero o fracción.
    NominaComplementDataNestedInput:
      type: object
      properties:
        emisor:
          $ref: "#/components/schemas/NominaEmisorProperties"
        receptor:
          $ref: "#/components/schemas/NominaReceptorInput"
        percepciones:
          $ref: "#/components/schemas/NominaPercepcionesInput"
        deducciones:
          type: array
          description: Arreglo de objetos donde se expresan las deducciones aplicables.
          items:
            $ref: "#/components/schemas/NominaDeduccionInput"
        otros_pagos:
          type: array
          description: Arreglo de objetos para expresar otros pagos aplicables.
          items:
            title: OtroPago
            allOf:
              - $ref: "#/components/schemas/NominaOtroPagoInput"
              - type: object
                properties:
                  compensacion_saldos_a_favor:
                    $ref: "#/components/schemas/NominaCompensacionInput"
        incapacidades:
          type: array
          description: Arreglo de objetos con información de incapacidades.
          items:
            $ref: "#/components/schemas/NominaIncapacidadInput"
    NominaComplementDataNestedProperties:
      type: object
      properties:
        emisor:
          $ref: "#/components/schemas/NominaEmisorProperties"
        receptor:
          $ref: "#/components/schemas/NominaReceptorProperties"
        percepciones:
          $ref: "#/components/schemas/NominaPercepcionesProperties"
        deducciones:
          type: array
          description: Arreglo de objetos donde se expresan las deducciones aplicables.
          items:
            $ref: "#/components/schemas/NominaDeduccionProperties"
        otros_pagos:
          type: array
          description: Arreglo de objetos para expresar otros pagos aplicables.
          items:
            allOf:
              - $ref: "#/components/schemas/NominaOtroPagoDirectProperties"
              - type: object
                properties:
                  compensacion_saldos_a_favor:
                    $ref: "#/components/schemas/NominaCompensacionProperties"
        incapacidades:
          type: array
          description: Arreglo de objetos con información de incapacidades.
          items:
            $ref: "#/components/schemas/NominaIncapacidadProperties"

    NominaIncapacidadInput:
      title: Incapacidad
      allOf:
        - type: object
          required:
            - dias_incapacidad
            - tipo_incapacidad
        - $ref: "#/components/schemas/NominaIncapacidadProperties"
    NominaIncapacidadProperties:
      type: object
      properties:
        dias_incapacidad:
          type: integer
          description: Número de días enteros que el trabajador se incapacitó en el periodo.
        tipo_incapacidad:
          type: string
          description: Clave del catálogo [Tipo de Incapacidad](#tipo-de-incapacidad).
        importe_monetario:
          type: number
          description: Monto del importe monetario de la incapacidad.
    NominaOtroPagoInput:
      title: OtroPago
      allOf:
        - type: object
          required:
            - tipo_otro_pago
            - clave
            - importe
        - $ref: "#/components/schemas/NominaOtroPagoDirectProperties"
        - type: object
          properties:
            compensacion_saldos_a_favor:
              $ref: "#/components/schemas/NominaCompensacionInput"
    NominaOtroPagoDirectProperties:
      type: object
      properties:
        tipo_otro_pago:
          type: string
          description: Clave del catálogo [Tipo de Otro Pago](#tipo-de-otro-pago).
        clave:
          type: string
          minLength: 3
          maxLength: 15
          description: Clave de otro pago de nómina propia de la contabilidad de cada patrón.
        concepto:
          type: string
          description: Descripción alternativa correspondiente a la clave utilizada.
        importe:
          type: number
          description: Importe por concepto de otro pago.
        subsidio_causado:
          type: number
          description: |
            Subsudio causado conforme a la tabla del subsidio para el empleo
            publicada en el Anexo 8 de la Resolución Miscelánea Fiscal vigente.

            Este valor será insertado dentro del nodo `SubsidioAlEmpleo`, y es
            requerido cuando el valor de `tipo_otro_pago` es `"002"`.
    NominaCompensacionInput:
      allOf:
        - type: object
          required:
            - saldo_a_favor
            - ano
            - remanente_sal_fav
        - $ref: "#/components/schemas/NominaCompensacionProperties"
    NominaCompensacionProperties:
      type: object
      description: Objeto con información referente a la compensación de saldos a favor de un trabajador.
      properties:
        saldo_a_favor:
          type: number
          description: Monto por saldo a favor determinado por el patrón al trabajador en periodos o ejercicios anteriores.
        ano:
          type: integer
          description: Año en que se determinó el saldo a favor del trabajador.
        remanente_sal_fav:
          type: number
          description: Remanente del saldo a favor del trabajador.
    NominaDeduccionInput:
      title: Deduccion
      allOf:
        - type: object
          required:
            - tipo_deduccion
            - clave
            - importe
        - $ref: "#/components/schemas/NominaDeduccionProperties"
    NominaDeduccionProperties:
      type: object
      properties:
        tipo_deduccion:
          type: string
          description: Clave del catálogo [Tipo de deducción](#tipo-de-deducción).
        concepto:
          type: string
          description: Concepto de la deducción. Si no se envía, se utilizará la descripción del catálogo del tipo de deducción.
        clave:
          type: string
          minLength: 3
          maxLength: 15
          description: Clave de control interno que asigna el patrón a cada deducción (descuento) de nómina propia de su contabilidad.
        importe:
          type: number
          description: Importe del concepto de deducción.
    NominaPercepcionesInput:
      type: object
      title: Percepciones
      description: Objeto para indicar las percepciones aplicables.
      required:
        - percepcion
      properties:
        percepcion:
          type: array
          description: Objeto con información detallada de cada percepción.
          items:
            $ref: "#/components/schemas/NominaPercepcionInput"
        jubilacion_pension_retiro:
          $ref: "#/components/schemas/NominaJubilacionInput"
        separacion_indemnizacion:
          $ref: "#/components/schemas/NominaSeparacionInput"
    NominaPercepcionesProperties:
      type: object
      title: Percepciones
      description: Objeto para indicar las percepciones aplicables.
      properties:
        percepcion:
          type: array
          description: Objeto con información detallada de cada percepción.
          items:
            $ref: "#/components/schemas/NominaPercepcionProperties"
        jubilacion_pension_retiro:
          $ref: "#/components/schemas/NominaJubilacionProperties"
        separacion_indemnizacion:
          $ref: "#/components/schemas/NominaSeparacionProperties"
    NominaSeparacionInput:
      title: Separacion
      allOf:
        - type: object
          required:
            - total_pagado
            - num_anos_servicio
            - ultimo_sueldo_mens_ord
            - ingreso_acumulable
            - ingreso_no_acumulable
        - $ref: "#/components/schemas/NominaSeparacionProperties"
    NominaSeparacionProperties:
      type: object
      title: Jubilacion
      description: Objeto con información detallada de pagos por separación (despido) o indemnización.
      properties:
        total_pagado:
          type: number
          description: Monto total pagado por concepto de separación o indemnización.
        num_anos_servicio:
          type: integer
          description: Años de servicio que laboró el trabajador, redondeado al entero inmediato superior.
        ultimo_sueldo_mens_ord:
          type: number
          description: Último sueldo mensual ordinario percibido por el trabajador.
        ingreso_acumulable:
          type: number
          description: Monto por ingresos acumulables.
        ingreso_no_acumulable:
          type: number
          description: Monto por ingresos no acumulables.
    NominaJubilacionInput:
      title: Jubilacion
      allOf:
        - type: object
          required:
            - ingreso_acumulable
            - ingreso_no_acumulable
        - $ref: "#/components/schemas/NominaJubilacionProperties"
    NominaJubilacionProperties:
      type: object
      description: Objeto con información detallada de pagos por jubilación, pensiones o haberes de retiro.
      properties:
        total_una_exhibicion:
          type: number
          description: Monto total del pago entregado en una sola exhibición.
        total_parcialidad:
          type: number
          description: Monto total del pago entregado en parcialidades.
        monto_diario:
          type: number
          description: Monto diario percibido por el trabajador cuando el pago se realiza en parcialidades.
        ingreso_acumulable:
          type: number
          description: Ingresos acumulables percibidos por el trabajador.
        ingreso_no_acumulable:
          type: number
          description: Ingresos no acumulables percibidos por el trabajador.
    NominaPercepcionProperties:
      title: Percepcion
      allOf:
        - $ref: "#/components/schemas/NominaPercepcionDirectProperties"
        - $ref: "#/components/schemas/NominaPercepcionNestedProperties"
    NominaPercepcionInput:
      title: Percepcion
      allOf:
        - type: object
          required:
            - tipo_percepcion
            - clave
            - importe_gravado
            - importe_exento
        - $ref: "#/components/schemas/NominaPercepcionDirectProperties"
        - $ref: "#/components/schemas/NominaPercepcionNestedInput"
    NominaPercepcionDirectProperties:
      type: object
      properties:
        tipo_percepcion:
          type: string
          description: Clave del catálogo [Tipo de percepción](#tipo-de-percepcion).
        concepto:
          type: string
          description: Concepto de la percepción. Si no se envía, se utilizará la descripción del catálogo del tipo de percepción.
        clave:
          type: string
          minLength: 3
          maxLength: 15
          description: Clave de control interno que asigna el patrón a cada percepción de nómina propia de su contabilidad.
        importe_gravado:
          type: number
          description: Importe gravado por el concepto indicado en el tipo de percepción.
        importe_exento:
          type: number
          description: Importe exento por el concepto indicado en el tipo de percepción.
    NominaPercepcionNestedInput:
      type: object
      properties:
        acciones_o_titulos:
          $ref: "#/components/schemas/NominaAccionesInput"
        horas_extra:
          type: array
          description: Arreglo de objetos para expresar las horas extra aplicables. Requerido cuando el tipo de percepción es “019” (Horas extras).
          items:
            $ref: "#/components/schemas/NominaHorasExtraInput"
    NominaPercepcionNestedProperties:
      type: object
      properties:
        acciones_o_titulos:
          $ref: "#/components/schemas/NominaAccionesProperties"
        horas_extra:
          type: array
          description: Arreglo de objetos para expresar las horas extra aplicables. Requerido cuando el tipo de percepción es “019” (Horas extras).
          items:
            $ref: "#/components/schemas/NominaHorasExtraProperties"
    NominaHorasExtraInput:
      title: HorasExtra
      allOf:
        - type: object
          required:
            - dias
            - tipo_horas
            - horas_extra
            - importe_pagado
        - $ref: "#/components/schemas/NominaHorasExtraProperties"
    NominaHorasExtraProperties:
      type: object
      title: HorasExtra
      properties:
        dias:
          type: integer
          description: Número de días en que el trabajador laboró horas extra adicionales a su jornada normal de trabajo.
        tipo_horas:
          type: string
          description: Clave del catálogo [Tipo de Horas](#tipo-de-Horas).
        horas_extra:
          type: integer
          description: Número de horas extra trabajadas en el periodo.
        importe_pagado:
          type: number
          description: Importe pagado por las horas extra.
    NominaAccionesInput:
      title: Accion
      allOf:
        - type: object
          required:
            - valor_mercado
            - precio_al_otorgarse
        - $ref: "#/components/schemas/NominaAccionesProperties"
    NominaAccionesProperties:
      type: object
      title: Accion
      description: Objeto para expresar ingresos por acciones o títulos valor que representan bienes. Es requerido cuando existan ingresos por sueldos derivados de adquisición de acciones o títulos.
      properties:
        valor_mercado:
          type: number
          description: Valor de mercado de las Acciones o Títulos valor al ejercer la opción.
        precio_al_otorgarse:
          type: number
          description: Precio establecido al otorgarse la opción de ingresos en acciones o títulos valor.
    NominaReceptorProperties:
      type: object
      title: Receptor
      description: Información del trabajador.
      allOf:
        - $ref: "#/components/schemas/NominaReceptorDirectProperties"
        - $ref: "#/components/schemas/NominaReceptorNestedProperties"
    NominaReceptorInput:
      type: object
      title: Receptor
      description: Información del trabajador.
      allOf:
        - type: object
          required:
            - curp
            - tipo_contrato
            - tipo_regimen
            - num_empleado
            - periodicidad_pago
            - clave_ent_fed
        - $ref: "#/components/schemas/NominaReceptorDirectProperties"
        - $ref: "#/components/schemas/NominaReceptorNestedInput"
    NominaReceptorDirectProperties:
      type: object
      properties:
        curp:
          type: string
          description: CURP del trabajador.
        num_seguridad_social:
          type: string
          description: Número de seguridad social.
        fecha_inicio_rel_laboral:
          type: string
          format: date
          description: Fecha de inicio de la relación laboral entre el empleador y el empleado.
        antiguedad:
          oneOf:
            - type: string
            - type: boolean
          default: true
          description: Antigüedad del empleado en el formato especificado por el SAT. Si se envía un `string`, se espera que éste contenga la antigüedad en el formato que especifica el SAT. Si se envía el valor booleano `false`, este campo no se incluirá en la factura. Si se envía el valor booleano `true` y `fecha_inicio_rel_laboral` existe, este valor se calculará con la diferencia entre la fecha de inicio de relación laboral y la fecha de pago.
        tipo_contrato:
          type: string
          description: Clave del catálogo del SAT [Tipo de Contrato](#tipo-de-contrato).
        sindicalizado:
          type: boolean
          default: false
          description: Indica si el trabajador está asociado a un sindicato.
        tipo_jornada:
          type: string
          description: Clave del catálogo del SAT [Tipo de Jornada](#tipo-de-jornada).
        tipo_regimen:
          type: string
          description: Clave del catálogo del SAT [Tipo de Régimen](#tipo-de-régimen).
        num_empleado:
          type: string
          minLength: 1
          maxLength: 15
          description: Número interno de empleado, asignado por el empleador.
        departamento:
          type: string
          description: Nombre del departamento o área a la que pertenece el trabajador.
        puesto:
          type: string
          description: Nombre del puesto asignado al empleado o el nombre de la actividad que realiza.
        riesgo_puesto:
          type: string
          description: Clave del catálogo del SAT [Riesgo del Puesto](#riesgo-del-puesto).
        periodicidad_pago:
          type: string
          description: Clave del catálogo del SAT [Periodicidad de Pago](#periodicidad-del-pago).
        banco:
          type: string
          description: Clave del banco de acuerdo al catálogo del SAT “Bancos” que puedes consultar utilizando nuestra [herramienta de búsqueda](https://dashboard.facturapi.io/catalogs/bank).
        cuenta_bancaria:
          type: string
          description: |
            Número de cuenta bancaria (11 caracteres) o número de teléfono celular (10 caracteres) o número de tarjeta (15 ó 16 caracteres) o la CLABE (18 caracteres) o número de monedero electrónico donde se realiza el depósito de nómina.
        salario_base_cot_apor:
          type: number
          description: Importe de la retribución en efectivo por cuota diaria, gratificaciones, percepciones, alimentación, habitación, primas, comisiones, prestaciones en especie, etc.
        salario_diario_integrado:
          type: number
          description: Salario que se integra con los pagos hechos en efectivo por cuota diaria, gratificaciones, percepciones, habitación, primas, comisiones, prestaciones en especie y cualquier otra cantidad o prestación que se entregue al trabajador por su trabajo.
        clave_ent_fed:
          type: string
          description: Clave de la entidad federativa en donde el trabajador prestó sus servicios al empleador, que puedes consultar utilizando nuestra [herramienta de búsqueda](https://dashboard.facturapi.io/catalogs/state).
    NominaReceptorNestedProperties:
      type: object
      properties:
        sub_contratacion:
          type: array
          description: Arreglo de objetos para expresar información sobre la empresa que se beneficia del trabajo del empleado, en casos donde el emisor preste servicios de subcontratación.
          items:
            $ref: "#/components/schemas/NominaSubContratacionProperties"
    NominaReceptorNestedInput:
      type: object
      properties:
        sub_contratacion:
          type: array
          description: Arreglo de objetos para expresar información sobre la empresa que se beneficia del trabajo del empleado, en casos donde el emisor preste servicios de subcontratación.
          items:
            allOf:
              - $ref: "#/components/schemas/NominaSubContratacionRequiredProperties"
              - $ref: "#/components/schemas/NominaSubContratacionProperties"
    NominaSubContratacionRequiredProperties:
      type: object
      required:
        - rfc_labora
        - porcentaje_tiempo
    NominaSubContratacionProperties:
      type: object
      properties:
        rfc_labora:
          type: string
          description: RFC de la persona o empresa que subcontrata, es decir, de la persona o empresa en donde el trabajador prestó directamente sus servicios.
        porcentaje_tiempo:
          type: number
          minimum: 0.001
          maximum: 100.000
          description: Porcentaje de tiempo en que el trabajador prestó sus servicios a la persona o empresa que lo subcontrató.
    NominaEmisorProperties:
      type: object
      title: Emisor
      description: Información del emisor, en caso de ser requerida.
      properties:
        curp:
          type: string
          minLength: 18
          maxLength: 18
          description: Requerido cuando el empleador es persona física. CURP del empleador.
        registro_patronal:
          type: string
          description: Clave de registro patronal asignada por la institución de seguridad social al patrón.
        rfc_patron_origen:
          minLength: 12
          maxLength: 13
          type: string
          description: RFC de la persona que fungió como patrón. Se usa cuando el pago se realiza a través de un tercero.
        entidad_sncf:
          type: object
          description: Información para que las entidades adheridas al Sistema Nacional de Coordinación Fiscal realicen la identificación del origen de los recursos.
          properties:
            origen_recurso:
              type: string
              enum:
                - IP
                - IF
                - IM
              description: |
                Clave de origen de recurso.

                - `“IP”`: Ingresos Propios
                - `“IF”`: Ingresos Federales
                - `“IM”`: Ingresos mixtos.
            monto_recurso_propio:
              type: number
              description: |
                Inporte de recursos propios. Requerido cuando el origen del recurso es por ingresos mixtos.

    PagoOrCustomComplementProperties:
      title: Complement
      type: object
      discriminator:
        propertyName: type
        mapping:
          pago: "#/components/schemas/PagoComplementProperties"
          custom: "#/components/schemas/CustomComplementProperties"
      properties:
        type:
          type: string
          enum:
            - pago
            - custom
          description: Tipo de complemento.

    PagoOrCustomComplementInput:
      type: object
      title: Complement
      discriminator:
        propertyName: type
        mapping:
          pago: "#/components/schemas/PagoComplementInput"
          custom: "#/components/schemas/CustomComplementInput"
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - nomina
            - custom
          description: Tipo de complemento.
    PagoComplementProperties:
      allOf:
        - $ref: "#/components/schemas/NominaOrCustomComplementProperties"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/NominaComplementDataProperties"
    PagoComplementInput:
      allOf:
        - $ref: "#/components/schemas/PagoOrCustomComplementInput"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/PagoComplementDataInput"
    PagoComplementDataInput:
      type: array
      title: PagoComplementData
      description: Pagos a incluir en este comprobante. Lo más común es incluir un sólo pago. Un caso en el que se debe de agregar más de uno es cuando el pago se realiza con 2 formas de pago distintas; por ejemplo, cuando se paga una parte con tarjeta y otra en efectivo.
      items:
        $ref: "#/components/schemas/PaymentInput"

    NominaOrCustomComplementProperties:
      title: Complement
      type: object
      discriminator:
        propertyName: type
        mapping:
          nomina: "#/components/schemas/NominaComplementProperties"
          custom: "#/components/schemas/CustomComplementProperties"
      properties:
        type:
          type: string
          enum:
            - nomina
            - custom
          description: Tipo de complemento.

    NominaOrCustomComplementInput:
      type: object
      title: Complement
      discriminator:
        propertyName: type
        mapping:
          nomina: "#/components/schemas/NominaComplementInput"
          custom: "#/components/schemas/CustomComplementInput"
      required:
        - type
        - data
      properties:
        type:
          type: string
          enum:
            - nomina
            - custom
          description: Tipo de complemento.
    NominaComplementProperties:
      allOf:
        - $ref: "#/components/schemas/NominaOrCustomComplementProperties"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/NominaComplementDataProperties"
    NominaComplementInput:
      allOf:
        - $ref: "#/components/schemas/NominaOrCustomComplementInput"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/NominaComplementDataInput"
    NamespaceRequiredProperties:
      type: object
      required:
        - prefix
        - uri
        - schema_location
    NamespaceProperties:
      type: object
      title: Namespace
      properties:
        prefix:
          type: string
          description: Prefijo o nombre del namespace.
          example: iedu
        uri:
          type: string
          format: url
          description: Dirección URL asociada al namespace.
          example: http://www.sat.gob.mx/iedu
        schema_location:
          type: string
          format: url
          example: http://www.sat.gob.mx/sitio_interet/cfd/iedu/iedu.xsd
          description: Dirección URL del esquema de validación XSD.

    CommonAddressProperties:
      type: object
      properties:
        street:
          type: string
          description: Nombre de la calle
          example: Blvd. Atardecer
        exterior:
          type: string
          description: Número exterior.
          example: 142
        interior:
          type: string
          description: Número interior.
          example: 4
        neighborhood:
          type: string
          description: Colonia
          example: Centro
        city:
          type: string
          description: Ciudad
          example: Huatabampo
        municipality:
          type: string
          description: Municipio o delegación
          example: Huatabampo
        zip:
          type: string
          description: Código postal
          example: 86500

    # Main resources
    Customer:
      title: Objeto Customer
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/CustomerProperties"
    CustomerSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Customer"
    CustomerProperties:
      allOf:
        - $ref: "#/components/schemas/CustomerCommonProperties"
        - type: object
          properties:
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: Domicilio fiscal.
                  properties:
                    state:
                      type: string
                      description: Si el país es México ("MEX"), contiene el nombre del Estado o Entidad Federativa. Para extranjeros contiene el código de Estado de acuerdo al estándar [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), que puedes consultar en nuestro [Catálogo de Estados](https://dashboard.facturapi.io/catalogs/state).
                      example: Sonora
                    country:
                      type: string
                      description: Código de país acorde al estándar [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3), del [Catálogo de Países](https://dashboard.facturapi.io/catalogs/country).
                      example: MEX
                      default: MEX
    CustomerCommonProperties:
      type: object
      properties:
        legal_name:
          type: string
          description: |
            Nombre Fiscal o Razón Social del cliente. *sin* el régimen societario (ej.: S.A. de C.V.).
          example: Dunder Mifflin
        tax_id:
          type: string
          example: ABC101010111
          description: En clientes de México contiene el RFC del cliente. Para extranjeros es opcional y representa el número de registro de identificacón tributaria, es decir, el equivalente al RFC en el país del cliente.
        tax_system:
          type: string
          example: "601"
          maxLength: 3
          minLength: 3
          description: Requerido para clientes nacionales. Clave del régimen fiscal del cliente.
        email:
          type: string
          format: email
          description: Dirección de correo electrónico al cual enviar las facturas generadas.
          example: email@example.com
        phone:
          type: string
          description: Teléfono del cliente.
          example: 6474010101
    CustomerCreateInput:
      title: Customer
      allOf:
        - $ref: "#/components/schemas/CustomerCommonProperties"
        - type: object
          required:
          - legal_name
          - tax_id
          - tax_system
          - address
          properties:
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: Domicilio fiscal.
                  required:
                    - zip
                  properties:
                    state:
                      type: string
                      description: Si el país es México ("MEX"), contiene el nombre del Estado o Entidad Federativa. Para extranjeros contiene el código de Estado de acuerdo al estándar [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2), que puedes consultar en nuestro [Catálogo de Estados](https://dashboard.facturapi.io/catalogs/state).
                      example: Sonora
                    country:
                      type: string
                      description: Código de país acorde al estándar [ISO 3166-1 alpha-3](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3), del [Catálogo de Países](https://dashboard.facturapi.io/catalogs/country).
                      example: MEX
                      default: MEX

    LineItemProductInput:
      title: Product
      allOf:
        - $ref: "#/components/schemas/ProductRequiredProperties"
        - $ref: "#/components/schemas/ProductProperties"
    
    LineItemProductEgresoInput:
      title: Product
      allOf:
        - $ref: "#/components/schemas/ProductEgresoRequiredProperties"
        - $ref: "#/components/schemas/ProductEgresoProperties"

    LineItemTrasladoProductInput:
      title: Product
      required:
        - description
      type: object
      properties:
        description:
          type: string
          description: Descripción del bien o servicio como aparecerá en la factura.
          example: Ukelele
        product_key:
          type: string
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          example: 60131324
        unit_key:
          type: string
          default: H87
          description: |
            Clave de unidad de medida, del catálogo del SAT. El valor por default `"H87"` (elemento) es la clave para representar una pieza o unidad de venta (lápiz, cuaderno, televisión, etc).
            Si la unidad de tu producto es kilogramos, litros, horas u otra unidad, te proporcionamos una manera conveniente de encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
        unit_name:
          type: string
          default: Elemento
          description: Palabra que representa la unidad de medida de tu producto. Debe estar relacionada con la clave de unidad `unit_key`.
        sku:
          type: string
          description: Identificador de uso interno designado por la empresa. Puede tener cualquier valor.

    LineItemProduct:
      allOf:
        - type: object
          properties:
            id:
              nullable: true
              type: string
              description: ID del producto base. Sólo presente si se utilizó como base un objeto `Product` guardado previamente.
              example: 58e93bd8e86eb318b0197454
        - $ref: "#/components/schemas/ProductProperties"
    Parts:
      type: object
      properties:
        description:
          type: string
          description: Descripción del producto o servicio.
        product_key:
          type: string
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra herramienta de búsqueda de claves.
        quantity:
          type: number
          description: Cantidad
          example: 1
        sku:
          type: string
          description: Identificador de uso interno designado por la empresa. Puede tener cualquier valor.
        unit_price:
          type: number
          description: Precio unitario
        unit_name:
          type: string
          description: Nombre de la unidad de medida que expresa la cantidad.
        customs_keys:
          type: array
          items:
            type: string
          description: Números de pedimento aduanal asociados a esta parte.
    PartInput:
      allOf:
        - type: object
          required:
            - description
            - product_key
        - $ref: "#/components/schemas/Parts"
    Product:
      title: Objeto Product
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/ProductProperties"
    ProductSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Product"
    ProductRequiredProperties:
      type: object
      required:
        - description
        - product_key
        - price
    ProductEgresoRequiredProperties:
      type: object
      required:
        - description
        - price
    ProductProperties:
      type: object
      properties:
        description:
          type: string
          description: Descripción del bien o servicio como aparecerá en la factura.
          example: Ukelele
        product_key:
          type: string
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          example: 60131324
        price:
          type: number
          description: Precio por unidad del bien o servicio. Este valor representará el precio con IVA incluído o sin él, dependiendo del valor de `tax_included`.
          example: 345.60
        tax_included:
          type: boolean
          default: true
          description: |
            - `true`: Indica que todos los impuestos aplicables están incluídos en el precio (atributo price) y se desglosarán automáticamente al emitir la factura.
            - `false`: Indica que el atributo price no incluye impuestos, por lo que aquellos impuestos a aplicar se sumarán en el precio final.
        taxability:
          type: string
          default: |
            '01' si el array `taxes` está vacío; '02' si el array `taxes` tiene por lo menos un elemento.
          enum:
            - "01"
            - "02"
            - "03"
            - "04"
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
        taxes:
          type: array
          default: IVA trasladado 16%
          example:
            [{
              "type": "IVA",
              "rate": 0.16
            }]
          description: Lista de impuestos que deberán aplicarse a este producto. Si el parámetro se omite o es nulo, se guardará con un elemento que representa el IVA trasladado del 16%, que es el impuesto más común. En caso de mandar explícitamente un arreglo vacío, se entiende que el producto está exento de impuestos.
          items:
            $ref: "#/components/schemas/BaseTax"
        local_taxes:
          type: array
          description: Arreglo de impuestos locales (estatales o municipales), en caso de haberlos.
          default: []
          items:
            $ref: "#/components/schemas/LocalTax"
        unit_key:
          type: string
          default: H87
          description: |
            Clave de unidad de medida, del catálogo del SAT. El valor por default `"H87"` (elemento) es la clave para representar una pieza o unidad de venta (lápiz, cuaderno, televisión, etc).
            Si la unidad de tu producto es kilogramos, litros, horas u otra unidad, puedes encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
        unit_name:
          type: string
          default: Elemento
          description: Palabra que representa la unidad de medida de tu producto. Debe estar relacionada con la clave de unidad `unit_key`.
        sku:
          type: string
          description: Identificador de uso interno designado por la empresa. Puede tener cualquier valor.
    ProductEgresoProperties:
      type: object
      properties:
        description:
          type: string
          description: Resumen de la operación en una sola descripción. Deben mencionarse cada uno de los productos que contempla el descuento, devolución o bonificación aplicada y que contienen las facturas relacionadas. Si el egreso está basado en un pocentaje (como al aplicar un 30% de descuento), dicho porcentaje debe incluirse en la descripción junto al nombre del producto que corresponda.
          example: Ukelele
        product_key:
          type: string
          default: 84111506
          description: Clave de producto/servicio, del catálogo del SAT. Nosotros te proporcionamos una manera más conveniente de encontrarlo utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
          example: 84111506
        price:
          type: number
          description: Suma total de la cantidad devuelta, descontada o bonificada.
          example: 345.60
        tax_included:
          type: boolean
          default: true
          description: |
            - `true`: Indica que todos los impuestos aplicables están incluídos en el precio (atributo price) y se desglosarán automáticamente al emitir la factura.
            - `false`: Indica que el atributo price no incluye impuestos, por lo que aquellos impuestos a aplicar se sumarán en el precio final.
        taxability:
          type: string
          default: "02"
          enum:
            - "01"
            - "02"
            - "03"
            - "04"
          description: |
            Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

            - `01`: No objeto de impuesto.
            - `02`: Sí objeto de impuesto.
            - `03`: Sí objeto de impuesto, pero no obligado a desglose.
            - `04`: Sí objeto de impuesto, y no causa impuesto.
        taxes:
          type: array
          default: IVA trasladado 16%
          description: Lista de impuestos que deberán aplicarse a este producto. Si el parámetro se omite o es nulo, se guardará con un elemento que representa el IVA trasladado del 16%, que es el impuesto más común. En caso de mandar explícitamente un arreglo vacío, se entiende que el producto está exento de impuestos.
          items:
            $ref: "#/components/schemas/BaseTax"
        local_taxes:
          type: array
          description: Arreglo de impuestos locales (estatales o municipales), en caso de haberlos.
          default: []
          items:
            $ref: "#/components/schemas/LocalTax"
        unit_key:
          type: string
          default: ACT
          description: |
            Clave de unidad de medida, del catálogo del SAT.
            Puedes encontrar la clave utilizando nuestra [herramienta de búsqueda de claves](https://dashboard.facturapi.io/tools/keys).
        unit_name:
          type: string
          default: Actividad
          description: Palabra que representa la unidad de medida de tu producto. Debe estar relacionada con la clave de unidad `unit_key`.
    PaymentInput:
      title: Payment
      required:
        - payment_form
        - related_documents
      type: object
      properties:
        payment_form:
          type: string
          example: "03"
          description: Código de la forma de pago según el [catálogo del SAT](#forma-de-pago). También puedes utilizar la constante `PaymentForm` incluída en nuestras librerías.
        related_documents:
          type: array
          description: Arreglo que incluye un elemento por cada comprobante de ingreso relacionado a este pago. Lo más común es que el pago esté relacionado a un sólo comprobante de ingreso. Un caso en el que se agrega más de un elemento es cuando se recibe (por ejemplo) un sólo depósito que ampara el pago de 2 facturas relacionadas. En lugar de expedir un comprobante de recepción de pago por cada factura, debes expedir sólo uno relacionando los 2 comprobantes.
          items:
            type: object
            required:
              - uuid
              - amount
              - taxes
              - installment
              - last_balance
            properties:
              uuid:
                type: string
                format: uuid
                description: Folio fiscal ó UUID del comprobante de ingreso relacionado.
              amount:
                type: number
                description: |
                  Cantidad del pago correspondiente al comprobante relacionado,
                  usando el método de pago indicado en este elemento del arreglo
                  de pagos. Este valor debe ser expresado en la moneda definida
                  en `related_documents[].currency`.
              taxes:
                type: array
                description: |
                  Arreglo con impuestos del documento relacionado que aplican al pago realizado.
                items:
                  type: object
                  required:
                    - base
                    - type
                    - rate
                  properties:
                    base:
                      type: number
                      description: |
                        Base utilizada para el cálculo del impuestos.
                    type:
                      type: string
                      enum:
                        - IVA
                        - ISR
                        - IEPS
                      description: |
                        Tipo de impuesto.
                    rate:
                      type: number
                      example: 0.16
                      description: |
                        Tasa o cuota del impuesto
                    factor:
                      type: string
                      default: Tasa
                      enum:
                        - Tasa
                        - Cuota   
                        - Exento
                      description: Tipo factor.
                    withholding:
                      type: boolean
                      default: false
                      description: Indica si el impuesto es una retención (`true`) o un traslado (`false`).
              taxability:
                type: string
                default: |
                  '01' si el array `taxes` está vacío; '02' si el array `taxes` tiene por lo menos un elemento.
                enum:
                  - "01"
                  - "02"
                  - "03"
                  - "04"
                description: |
                  Código que representa si el bien o servicio es objeto de impuesto o no. Este atributo corresponde al campo "ObjetoImp" en el CFDI.

                  - `01`: No objeto de impuesto.
                  - `02`: Sí objeto de impuesto.
                  - `03`: Sí objeto de impuesto, pero no obligado a desglose.
                  - `04`: Sí objeto de impuesto, y no causa impuesto.
              installment:
                type: integer
                description: Número de parcialidad del pago.
              last_balance:
                type: number
                description: Cantidad que estaba pendiente por pagar antes de recibir este pago. Este valor se expresa en la moneda definida en `payments[].related[].currency`.
              currency:
                type: string
                minLength: 3
                maxLength: 3
                default: MXN
                description: Si la moneda utilizada en la factura relacionada no es moneda nacional (MXN), debe especificarse su valor acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
              exchange:
                type: number
                description: |
                  Obligatorio cuando la moneda del documento relacionado es distinta a la moneda de pago. Tipo de cambio entre las dos monedas al momento del pago. Ejemplo: La factura de iingreso relacionada se registra en USD, mientras que el pago actual se realiza en MXN, este atributo debería registrarse como `0.45` (USD/MXN).
              folio_number:
                type: integer
                description: Opcionalmente se puede incluir el número de folio del documento relacionado.
              series:
                type: string
                description: Opcionalmente se puede incluir la serie del documento relacionado.
        currency:
          type: string
          minLength: 3
          maxLength: 3
          default: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          default: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        date:
          type: string
          format: date-time
          default: now
          description: Fecha en que se recibió el pago. Sólo es necesario incluirla si el pago se efectuó en una fecha anterior a la emisión de este comprobante. No se permiten fechas futuras.
        numOperacion:
          type: string
          description: Número de cheque, de autorización, de referencia, clave de rastreo SPEI, línea de captura o algún número de referencia que permita identificar la operación correspondiente al pago efectuado.
        rfcEmisorCtaOrd:
          type: string
          description: RFC de la entidad emisora de la cuenta de origen, es decir, la operadora, banco, institución financiera, emisor de monedero electrónico, etc.
        nomBancoOrdExt:
          type: string
          description: Nombre del banco ordenante.
        ctaOrdenante:
          type: string
          description: Número de cuenta con la que se realizó el pago.
        rfcEmisorCtaBen:
          type: string
          description: RFC de la entidad de la cuenta operadora destino, es decir, la operadora, banco, institución financiera, emisor de monedero electrónico, etc.
        ctaBeneficiario:
          type: string
          description: Número de cuenta donde se recibió el pago.
        tipoCadPago:
          type: string
          enum:
            - 01
          description: |
            Clave del tipo de cadena de pago que genera la entidad receptora del pago.
            Si existe este campo, es obligatorio registrar los campos `certPago`, `cadPago` y `selloPago`.
        certPago:
          type: string
          format: base64
          description: Certificado que corresponde al pago, como una cadena de texto en formato base 64.
        cadPago:
          type: string
          description: Cadena original del comprobante de pago generado por la entidad emisora de la cuenta beneficiaria.
        selloPago:
          type: string
          format: base64
          description: Sello digital que se asocie al pago expresado como una cadena de texto en formato base 64.
    CuustomerInfo:
      type: object
      description: Objeto con información parcial del cliente receptor del comprobante. Para obtener el objeto `Customer` completo, deberás consultarlo con el método de [Obtener Cliente]('#/operation/getCustomer').
      properties:
        id:
          type: string
          description: ID del objeto `customer` relacionado a la factura, en caso de no haber sido eliminado
          example: 58e93bd8e86eb318b0197456
        legal_name:
          type: string
          description: |
            Nombre Fiscal o Razón Social del cliente, *sin* incluir el régimen societario (ej.: S.A. de C.V.).
          example: Dunder Mifflin
        tax_id:
          type: string
          description: RFC del cliente.
          example: ABC101010111
        address:
          type: object
          properties:
            country:
              type: string
              format: ISO 3166-1 alpha-3
              description: Código de País acorde al estándar ISO 3166-1 alpha-3, del Catálogo de Países.
              example: MEX
    RelatedDocumentInput:
      allOf:
        - type: object
          required:
            - relationship
            - related
        - $ref: '#/components/schemas/RelatedDocument'
    RelatedDocument:
      type: object
      properties:
        relationship:
          type: string
          description: Clave de relación del catálogo del SAT (que puedes consultar en [esta tabla](#relacion-entre-facturas)). Es requerido cuando se envíe el parámetro `related`.
        documents:
          type: array
          default: []
          items:
            type: string
          description: Folios fiscales (UUID) de facturas relacionadas.
    Invoice:
      title: Objeto Invoice
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/InvoiceProperties"
    InvoiceSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Invoice"
    InvoiceRequiredProperties:
      type: object
      required:
        - description
        - invoice_key
        - price
    InvoiceProperties:
      type: object
      properties:
        status:
          type: string
          enum:
            - valid
            - canceled
          description: |
            Estado actual de la factura.
          example: valid
        cancellation_status:
          type: string
          enum:
            - none
            - pending
            - accepted
            - rejected
            - expired
          description: |
            Estado actual de la solicitud de cancelación, en caso de haberla realizado. Puedes leer más a detalle en la sección de [Cancelar Factura](#operation/deleteInvoice)).
          example: none
        verification_url:
          type: string
          format: uri
          description: Dirección URL para verificar el estado del CFDI en el portal del SAT. Este link es el mismo que aparece en el código QR, en el PDF de la factura.
          example: https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
        date:
          type: string
          format: date-time
          default: now
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC String).
        address:
          allOf:
            - $ref: "#/components/schemas/CommonAddressProperties"
            - type: object
              description: Domicilio de expedición de la factura.
              properties:
                state:
                  type: string
                  description: Nombre del Estado o Entidad Federativa.
                  example: Sonora
        type:
          type: string
          enum:
            - I
            - E
            - P
            - N
            - T
          description: |
            Tipo de comprobante. Puede tener los valores `"I"`: Ingreso, `"P"`: Pago, `"E"`: Egreso, `"N"`: Nómina, `"T"`: Traslado.
        customer:
          $ref: "#/components/schemas/CuustomerInfo"
        total:
          type: number
          description: Monto total facturado.
          example: 10944.82
        uuid:
          type: string
          format: uuid
          description: Folio fiscal de la factura, asignado por el SAT.
          example: 39c85a3f-275b-4341-b259-e8971d9f8a94
        folio_number:
          type: integer
          description: Número de folio autoincremental para control interno y sin validez fiscal.
          example: 914
        series:
          type: string
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal. En el PDF se imprime junto al //www.facturapi.io/img/logo.svg
          example: F
        external_id:
          type: string
          description: Identificador que puedes usar para relacionar esta factura con tus registros para después buscar por este número.
        idempotency_key:
          type: string
          description: Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        payment_form:
          type: string
          description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
          example: 06
        items:
          type: array
          description: Conceptos incluidos en el comprobante
          items:
            $ref: "#/components/schemas/LineItem"
        related_documents:
          type: array
          description: Documentos relacionados con la factura.
          items:
            $ref: "#/components/schemas/RelatedDocument"
        currency:
          type: string
          example: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          minimum: 0
          example: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/NominaOrCustomComplementProperties"
          description: Complementos a incluir en la factura.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda` y en `items[].complement`.
          items:
            $ref: "#/components/schemas/NamespaceProperties"
        stamp:
          $ref: "#/components/schemas/Stamp"

    InvoiceableCommonInput:
      type: object
      properties:
        folio_number:
          type: integer
          default: autoincremental
          description: Número de folio asignado por la empresa para control interno. Si se omite, se asignará el valor autoincremental de la organización.
        series:
          type: string
          maxLength: 25
          nullable: true
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal.
        pdf_custom_section:
          type: string
          nullable: true
          format: xml
          description: |
            En caso de que necesites incluir más información en el PDF, este campo te permite enviar código HTML con tu propio contenido.

            Por seguridad, el código que puedes enviar está limitado a las siguientes etiquetas: `h1`, `h2`, `h3`, `h4`, `h5`, `h6`, `div`, `p`, `span`, `small`, `br`, `b`, `i`, `ul`, `ol`, `li`, `strong`, `table`, `thead`, `tbody`, `tfoot`, `tr`, `th` y `td`. No se permiten atributos ni estilos.
        addenda:
          type: string
          nullable: true
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          default: []
          description: Si incluiste el parámetro `complements`, este campo es opcional; en cambio si inclusite uno de los parámetros `addenda` o `items[].complement`, debes enviar la información necesaria para incluir estos namespaces en el XML de la factura.
          items:
            allOf:
              - $ref: "#/components/schemas/NamespaceRequiredProperties"
              - $ref: "#/components/schemas/NamespaceProperties"
    InvoiceCommonInputProperties:
      allOf:
        - type: object
          properties:
            customer:
              description: Cliente receptor de la factura.
              oneOf:
                - $ref: "#/components/schemas/CustomerCreateInput"
                - type: string
                  title: customer_id
                  description: ID del objeto 'customer' previamente registrado en Facturapi.
                  example: 58e93bd8e86eb318b0197456
            date:
              type: string
              format: date-time
              default: now
              description: Fecha de expedición del comprobante en formato ISO8601 (UTC String). No puede ser anterior a 72 horas en el pasado, ni posterior al presente.
            address:
              allOf:
                - $ref: "#/components/schemas/CommonAddressProperties"
                - type: object
                  description: |
                    Puedes usar este parámetro para especificar el domicilio de expedición de la factura.
                    Este campo es opcional y si no se envía, la factura se expedirá con el domicilio de
                    la organización.
                  required:
                    - zip
                  properties:
                    state:
                      type: string
                      description: Nombre del Estado o Entidad Federativa.
                      example: Sonora
            external_id:
              type: string
              nullable: true
              description: Identificador opcional que puedes usar para relacionar esta factura con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
            idempotency_key:
              type: string
              nullable: true
              description: |
                Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
                Si se deja en blanco, no se tomará en cuenta.
        - $ref: "#/components/schemas/InvoiceableCommonInput"
    InvoiceIngresoInput:
      title: Ingreso
      required:
        - customer
        - items
        - payment_form
      allOf:
        - type: object
          properties:
            type:
              type: string
              enum:
                - I
              default: I
              description: Tipo de comprobante. El valor default es `“I”` (Ingreso).
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en la factura.

                El número máximo de elementos que puedes incluir en una factura es de 5,000. Si necesitas
                emitir una factura con más de 5,000 conceptos, puedes dividir la transacción en varias facturas.
              items:
                $ref: "#/components/schemas/LineItemInput"
            payment_form:
              type: string
              minLength: 2
              maxLength: 2
              example: "03"
              description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
            payment_method:
              type: string
              default: PUE
              enum:
                - PUE
                - PPD
              description: |
                Código del método de pago según el catálogo del SAT.

                - `PUE`: Pago en Una sola Exhibición
                - `PPD`: Pago en Parcialidades o Diferido
            use:
              type: string
              default: G01
              description: |
                Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos
                en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en
                nuestras librerías.

                Para factura global debe ingresarse la clave `S01``.
            currency:
              type: string
              default: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              default: 1
              description: |
                Tipo de cambio conforme a la moneda usada. Representa el número de pesos
                mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            conditions:
              type: string
              nullable: true
              minLength: 1
              maxLength: 1000
              description: Condiciones de pago
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            global:
              type: object
              nullable: true
              required:
                - periodicity
                - months
                - year
              description: |
                Objeto requerido al crear una factura global.
              properties:
                periodicity:
                  type: string
                  nullable: true
                  description: |
                    Periodicidad que abarca la factura global.

                    - `day`: Diario
                    - `week`: Semanal
                    - `fortnight`: Quincenal
                    - `month`: Mensual
                    - `two_months`: Bimestral
                  enum:
                    - day
                    - week
                    - fortnight
                    - month
                    - two_months
                months:
                  type: string
                  description: |
                    Clave que representa el mes o bimestre de la factura. Consulta
                    los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
                  example: "01"
                year:
                  type: integer
                  description: Año de la factura.
                  example: 2022
            export:
              type: string
              default: "01"
              enum:
                - "01"
                - "02"
                - "03"
                - "04"
              description: |
                Indica si el comprobante ampara una operación de exportación.

                - `01`: No aplica
                - `02`: Definitiva con clave A1
                - `03`: Temporal
                - `04`: Definitiva con clave distinta a A1 o cuando no existe enajenación en términos del CFF
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en la factura. Puedes incluir cualquier complemento en la
                factura si tú mismo construyes el nodo XML del complemento y usas el tipo `custom`.
                Es necesario agregar la información del complemento al PDF por separado usando el
                parámetro `pdf_custom_section`.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceEgresoInput:
      title: Egreso
      allOf:
        - type: object
          required:
            - type
            - customer
            - payment_form
            - items
          properties:
            type:
              type: string
              enum:
                - E
            payment_form:
              type: string
              minLength: 2
              maxLength: 2
              example: "03"
              description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago).
            related_documents:
              type: array
              description: Documentos relacionados con la nota de crédito.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en la nota de crédito.

                El número máximo de elementos que puedes incluir en el comprobante es de 5,000. Si necesitas
                emitir un comprobante con más de 5,000 conceptos, puedes dividir la transacción en varios comprobantes.
              items:
                $ref: "#/components/schemas/LineItemEgresoInput"
            use:
              type: string
              default: G01
              description: Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            currency:
              type: string
              default: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              default: 1
              description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en el comprobante. Puedes incluir cualquier
                complemento en el comprobante si tú mismo construyes el nodo XML del
                complemento y usas el tipo `custom`. Es necesario agregar la información
                del complemento al PDF por separado usando el parámetro `pdf_custom_section`.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoicePagoInput:
      title: Pago
      allOf:
        - type: object
          required:
            - type
            - customer
            - complements
          properties:
            type:
              type: string
              enum:
                - P
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
            third_party:
              allOf:
                - type: object
                  required:
                    - legal_name
                    - tax_id
                    - tax_system
                    - zip
                - $ref: "#/components/schemas/ThirdParty"
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/PagoOrCustomComplementInput"
              description: Complementos a incluir en la factura.
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceNominaInput:
      title: Nómina
      allOf:
        - type: object
          required:
            - type
            - customer
            - complements
          properties:
            type:
              type: string
              enum:
                - N
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/NominaOrCustomComplementInput"
              description: Complementos a incluir en la factura.
            related_documents:
              type: array
              description: Documentos relacionados con la factura.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"
    InvoiceTrasladoInput:
      title: Traslado
      allOf:
        - type: object
          required:
            - type
            - items
            - customer
          properties:
            type:
              type: string
              enum:
                - T
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en el comprobante de Traslado.

                El número máximo de elementos que puedes incluir en un comprobante es de 5,000. Si necesitas
                emitir un comprobante con más de 5,000 conceptos, puedes dividir la transacción en varios comprobantes.
              items:
                $ref: "#/components/schemas/LineItemTrasladoInput"
            complements:
              type: array
              default: []
              items:
                $ref: "#/components/schemas/CustomComplementInput"
              description: |
                Complementos a incluir en el comprobante. Puedes incluir cualquier complemento en
                el comprobante si tú mismo construyes el nodo XML del complemento y usas el tipo
                `custom`. Es necesario agregar la información del complemento al PDF por separado
                usando el parámetro `pdf_custom_section`.
            use:
              type: string
              default: G01
              description: |
                Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en
                [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            currency:
              type: string
              default: MXN
              description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
            exchange:
              type: number
              default: 1
              description: |
                Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos
                (MXN) que equivalen a una unidad de la divisa señalada en el atributo `currency`.
            related_documents:
              type: array
              description: Documentos relacionados con el comprobante.
              default: []
              items:
                $ref: "#/components/schemas/RelatedDocumentInput"
        - $ref: "#/components/schemas/InvoiceCommonInputProperties"

    Receipt:
      title: Objeto Receipt
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/ReceiptProperties"
    ReceiptProperties:
      allOf:
        - type: object
          properties:
            date:
              type: string
              format: date-time
              example: 2021-09-10T15:21:23.456Z
              description: Fecha de emisión del recibo.
            expires_at:
              type: string
              format: date-time
              example: 2021-09-17T15:21:23.456Z
              description: |
                Fecha de expiración en formato ISO8601 (UTC String).
                Es la fecha límite para que el cliente pueda facturar su recibo en el portal de autofactura.
                Se calcula automáticamente a partir de las configuraciones de recibo de la organización.
            status:
              type: string
              enum:
                - open
                - canceled
                - invoiced_to_customer
                - invoiced_globally
              description: Estado actual del recibo.
            self_invoice_url:
              type: string
              format: url
              example: https://factura.space/empresa-demo/r9YqYarL
              description: |
                Dirección URL para realizar autofactura. Incluye el `key` del recibo.
                Puedes usarla para generar un botón o un QR de facturación para tus clientes.
            total:
              type: number
              example: 356.78
              description: Monto total de la operación
            invoice:
              type: string
              example: 614496b471d422de4b6cfcc4
              description: ID de la factura asociada, en caso de estar facturado.
            key:
              type: string
              example: r9YqYarL
              description: Autogenerado. Identificador único alfanumérico corto, útil para acceder a la autofactura desde tu micrositio en factura.space
            items:
              type: array
              description: Conceptos incluidos en el recibo
              items:
                $ref: "#/components/schemas/LineItem"
            external_id:
              type: string
              description: Identificador que puedes usar para relacionar este recibo con tus registros para después buscar por este número.
            idempotency_key:
              type: string
              description: Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        - $ref: "#/components/schemas/ReceiptEditableProperties"
    ReceiptInput:
      allOf:
        - type: object
          required:
            - items
            - payment_form
          properties:
            items:
              type: array
              maxItems: 5000
              description: |
                Conceptos a incluir en el recibo.

                El número máximo de elementos que puedes incluir en un recxibo es de 5,000. Si necesitas
                emitir una recibo con más de 5,000 conceptos, prueba dividir la transacción en varios recibos.
              items:
                $ref: "#/components/schemas/LineItemInput"
          
        - $ref: "#/components/schemas/ReceiptEditableProperties"
        - type: object
          properties:
            idempotency_key:
              type: string
              nullable: true
              description: |
                Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
                Si se deja en blanco, no se tomará en cuenta.
    ReceiptEditableProperties:
      type: object
      properties:
        date:
          type: string
          format: date-time
          example: 2021-09-10T15:21:23.456Z
          description: Fecha de emisión del recibo. Por defecto se utiliza la fecha actual.
        payment_form:
          type: string
          example: "03"
          description: Código que representa la forma de pago, según el [catálogo del SAT](#forma-de-pago).
        folio_number:
          type: integer
          example: 120
          description: Autoincremental. Número de folio del recibo para control interno y sin validez fiscal.
        currency:
          type: string
          example: MXN
          description: Código de la moneda, acorde al estándar [ISO 4217](https://es.wikipedia.org/wiki/ISO_4217).
        exchange:
          type: number
          minimum: 0
          example: 1
          description: Tipo de cambio conforme a la moneda usada. Representa el número de pesos mexicanos que equivalen a una unidad de la divisa señalada en el atributo `currency`.
        branch:
          type: string
          description: Nombre de la sucursal donde se expidió el recibo.
        external_id:
          type: string
          nullable: true
          description: Identificador opcional que puedes usar para relacionar este recibo con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
    ReceiptSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Receipt"
    InvoiceReceiptInput:
      type: object
      required:
        - customer
      allOf:
        - type: object
          properties:
            customer:
              description: Cliente receptor de la factura.
              oneOf:
                - $ref: "#/components/schemas/CustomerCreateInput"
                - type: string
                  title: customer_id
                  description: ID del objeto 'customer' previamente registrado en Facturapi.
                  example: 58e93bd8e86eb318b0197456
            use:
              type: string
              default: G01
              description: Código de Uso CFDI según el catálogo del SAT. Puedes ver los códigos en [esta tabla](#uso-cfdi), o utilizar las constantes incluídas en nuestras librerías.
            conditions:
              type: string
              nullable: true
              minLength: 1
              maxLength: 1000
              description: Condiciones de pago
        - $ref: "#/components/schemas/InvoiceableCommonInput"
    GlobalInvoiceInput:
      type: object
      required:
        - periodicity
      properties:
        from:
          type: string
          format: date
          default: Inicio del último periodo
          example: 2022-01-01T00:00:00.000
          description: |
            Fecha inicial de los recibos que se incluirán en la factura global.
            Por default, este valor es el inicio del último periodo (día, semana,
            quincena o mes), según el valor de "Periodicidad" (`periodicity`)
            en la configuración de recibos de tu organización.
        to:
          type: string
          format: date
          default: Fin del último periodo
          example: 2022-31-01T23:59:59.999
          description: |
            Fecha final de los recibos que se incluirán en la factura global.
            Por default, este valor es el fin del último periodo (día, semana,
            quincena o mes), según el valor de "Periodicidad" (`periodicity`)
            en la configuración de recibos de tu organización.
        periodicity:
          type: string
          default: Propiedad `periodicity` de la configuración de recibos de la organización.
          enum:
            - day
            - week
            - fortnight
            - month
            - two_months
          description: |
            Periodicidad que corresponde al rango de fechas utilizado.
            Si se omite, se tomará la configuración de recibos de la organización.
        months:
          type: string
          default: Mes contenido en el rango de fechas utilizado.
          description: |
            Clave que representa el mes o bimestre de la factura. Consulta
            los posibles valores en el [catálogo de Meses y Bimestres](#meses-y-bimestres).
          example: "01"
        folio_number:
          type: integer
          default: autoincremental
          description: |
            Número de folio asignado por la empresa para control interno.
            Si se omite, se asignará el valor autoincremental de la organización.
        series:
          type: string
          maxLength: 25
          nullable: true
          description: Serie. Caracteres designados por la empresa para control interno y sin validez fiscal.
        date:
          type: string
          format: date
          default: Valor del atributo `to`
          example: 2022-01-01T00:00:00.000
          description: |
            Fecha de emisión de la factura.
        payment_form:
          type: string
          minLength: 2
          maxLength: 2
          example: "02"
          description: |
            description: Código que representa la forma de pago, de acuerdo al [catálogo del SAT](#forma-de-pago). Si se incluye, los recibos se agruparán y se crearán la factura global por la forma de pago.
    Retention:
      title: Objeto Retention
      allOf:
        - $ref: "#/components/schemas/ResourceAutoGeneratedProps"
        - $ref: "#/components/schemas/RetentionReadOnlyProperties"
        - $ref: "#/components/schemas/RetentionProperties"
    RetentionReadOnlyProperties:
      type: object
      properties:
        status:
          type: string
          enum:
            - valid
            - canceled
          description: |
            Estado actual de la retención.
          example: valid
        verification_url:
          type: string
          format: uri
          description: Dirección URL para verificar el estado de la retención en el portal del SAT. Este link es el mismo que aparece en el código QR, en el PDF de la retención.
          example: https://verificacfdi.facturaelectronica.sat.gob.mx/default.aspx?id=45BEC0CA-5F1E-491E-9417-698EA48C382A&re=AAA010101AAA&rr=ABC101010111&tt=345.600000&fe=bWApPw==
        type:
          type: string
          enum:
            - Retención
          example: Retención
          description: Tipo de comprobante.
        uuid:
          type: string
          format: uuid
          description: Folio fiscal de la retención, asignado por el SAT.
          example: 39c85a3f-275b-4341-b259-e8971d9f8a94
        stamp:
          $ref: "#/components/schemas/Stamp"
        customer:
          $ref: "#/components/schemas/CuustomerInfo"
    RetentionProperties:
      type: object
      properties:
        cve_retenc:
          type: string
          example: 01
          description: Clave de la retención o información de pagos de acuerdo al catálogo del SAT.
        fecha_exp:
          type: string
          format: date-time
          example: "2021-09-15T06:03:23.000Z"
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC String).
        desc_retenc:
          type: string
          description: Si la clave de la retención es “25” (Otro tipo de retenciones), este campo se usa para registrar la descripción de la retención.
        folio_int:
          type: string
          description: Identificador alfanumérico para control interno de la empresa y sin relevancia fiscal.
        periodo:
          type: object
          description: Información sobre el periodo de la retención.
          properties:
            mes_ini:
              type: integer
              minimum: 1
              maximum: 12
              description: Mes inicial del periodo de la retención.
            mes_fin:
              type: integer
              minimum: 1
              maximum: 12
              description: Mes final del periodo de la retención.
            ejerc:
              type: integer
              description: Año o ejercicio fiscal en que se realizó la retención.
        totales:
          type: object
          description: Información sobre el total de retenciones efectuadas en el periodo correspondiente.
          properties:
            monto_tot_operacion:
              type: number
              minimum: 0
              description: Monto total de la operación, con precisión de hasta 6 decimales.
            monto_tot_grav:
              type: number
              minimum: 0
              description: Monto total gravado.
            monto_tot_exent:
              type: number
              minimum: 0
              description: Monto total exento.
            monto_tot_ret:
              type: number
              minimum: 0
              description: Suma de los montos de impuestos retenidos.
            imp_retenidos:
              type: array
              description: Colección de impuestos retenidos.
              items:
                type: object
                properties:
                  base:
                    type: number
                    minimum: 0
                    description: Base del impuesto retenido.
                  impuesto:
                    type: string
                    enum:
                      - IVA
                      - ISR
                    example: IVA
                    description: Clave del tipo de impuesto retenido, del catálogo del SAT.
                  monto:
                    type: number
                    minimum: 0
                    description: Importe del impuesto retenido
                  tipo_pago_ret:
                    type: string
                    enum:
                      - 01
                      - 02
                      - 03
                      - 04
                    description: |
                      - `01`: Pago definitivo IVA
                      - `02`: Pago definitivo IEPS
                      - `03`: Pago definitivo ISR Plataformas
                      - `04`: Pago provisional ISR
        external_id:
          type: string
          description: Identificador opcional que puedes usar para relacionar esta retención con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
        idempotency_key:
          type: string
          nullable: true
          description: |
            Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
            Si se deja en blanco, no se tomará en cuenta.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/CustomComplementData"
          description: |
            Arreglo de complementos a incluir en la factura. Cada elemento contiene
            un `string` con el código XML del complemento.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda`` y en `items[].complement`.
          items:
            $ref: "#/components/schemas/NamespaceProperties"
    RetentionSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Retention"
    RetentionInput:
      type: object
      required:
        - customer
        - cve_retenc
        - periodo
        - totales
      properties:
        customer:
          description: Cliente receptor de la factura.
          oneOf:
            - $ref: "#/components/schemas/CustomerCreateInput"
            - type: string
              title: customer_id
              description: ID del objeto 'customer' previamente registrado en Facturapi.
              example: 58e93bd8e86eb318b0197456
        cve_retenc:
          type: string
          example: 26
          description: Clave de la retención o información de pagos de acuerdo al [catálogo del SAT](#clave-de-retencion).
        fecha_exp:
          type: string
          format: date-time
          example: "2021-09-15T06:03:23.000Z"
          description: Fecha de expedición del comprobante en formato ISO8601 (UTC String).
        desc_retenc:
          type: string
          description: Si la clave de la retención es “25” (Otro tipo de retenciones), este campo se usa para registrar la descripción de la retención.
        folio_int:
          type: string
          example: R123
          description: Identificador alfanumérico para control interno de la empresa y sin relevancia fiscal.
        periodo:
          type: object
          description: Información sobre el periodo de la retención.
          required:
            - mes_ini
            - mes_fin
            - ejerc
          properties:
            mes_ini:
              type: integer
              minimum: 1
              maximum: 12
              example: 9
              description: Mes inicial del periodo de la retención.
            mes_fin:
              type: integer
              minimum: 1
              maximum: 12
              example: 9
              description: Mes final del periodo de la retención.
            ejerc:
              type: integer
              example: 2021
              description: Año o ejercicio fiscal en que se realizó la retención.
        totales:
          type: object
          description: Información sobre el total de retenciones efectuadas en el periodo correspondiente.
          required:
            - monto_tot_operacion
            - monto_tot_exent
            - imp_retenidos
          properties:
            monto_tot_operacion:
              type: number
              minimum: 0
              description: Monto total de la operación, con precisión de hasta 6 decimales.
            monto_tot_grav:
              type: number
              minimum: 0
              description: Monto total gravado.
            monto_tot_exent:
              type: number
              minimum: 0
              description: Monto total exento.
            monto_tot_ret:
              type: number
              minimum: 0
              description: Suma de los montos de impuestos retenidos.
            imp_retenidos:
              type: array
              description: Colección de impuestos retenidos.
              required:
                - monto_ret
              items:
                type: object
                required:
                  - monto_ret
                  - tipo_pago_ret
                properties:
                  base_ret:
                    type: number
                    minimum: 0
                    description: Base del impuesto retenido.
                  impuesto:
                    type: string
                    enum:
                      - IVA
                      - ISR
                    example: IVA
                    description: Clave del tipo de impuesto retenido, del catálogo del SAT.
                  monto_ret:
                    type: number
                    minimum: 0
                    description: Importe del impuesto retenido
                  tipo_pago_ret:
                    type: string
                    enum:
                      - 01
                      - 02
                      - 03
                      - 04
                    description: |
                      - `01`: Pago definitivo IVA
                      - `02`: Pago definitivo IEPS
                      - `03`: Pago definitivo ISR Plataformas
                      - `04`: Pago provisional ISR
        external_id:
          type: string
          description: Identificador opcional que puedes usar para relacionar esta retención con tus registros y poder hacer búsquedas usando este identificador. Facturapi no valida que este campo sea único.
        idempotency_key:
          type: string
          description: |
            Identificador único que puedes usar para evitar duplicados al reintentar una petición. Puede ser cualquier cadena de texto, mientras sea única para cada documento.
        complements:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/CustomComplementData"
          description: |
            Arreglo de complementos a incluir en la factura. Cada elemento del arreglo deberá contener
            un `string` con el código XML de tu complemento tal cual como quieres que se inserte en el
            XML del CFDI. Sólo se permite un nodo XML raíz por elemento del arreglo.
        pdf_custom_section:
          type: string
          format: html
          description: En caso de que necesites incluir más información en el PDF, este campo te permite insertar código HTML con tu propio contenido.
        addenda:
          type: string
          format: xml
          description: Código XML con la Addenda que se necesite agregar a la factura.
        namespaces:
          type: array
          description: Namespaces a insertar en el nodo raíz de la factura. Requerido en `addenda` y en `items[].complement`.
          items:
            allOf:
              - $ref: "#/components/schemas/NamespaceRequiredProperties"
              - $ref: "#/components/schemas/NamespaceProperties"

    OrganizationAddress:
      allOf:
        - $ref: "#/components/schemas/CommonAddressProperties"
        - type: object
          description: Domicilio fiscal de la organización emisora.
          properties:
            state:
              type: string
              description: Nombre del Estado o Entidad Federativa.
              example: Sonora
    OrganizationSearchResult:
      allOf:
        - $ref: "#/components/schemas/SearchResult"
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/Organization"
    Organization:
      title: Objeto Organization
      type: object
      properties:
        id:
          type: string
          description: ID del objeto
          example: "5a2a307be93a2f00129ea035"
        created_at:
          type: string
          format: date-time
          description: Fecha de registro
          example: "2017-05-05T20:55:33.468Z"
        is_production_ready:
          type: boolean
          description: Indica si la organización tiene información necesaria para facturar en ambiente Live.
        pending_steps:
          type: array
          description: Lista de pasos que se necesitan completar para que esta organización pueda emitir facturas válidas en ambiente Live.
          items:
            type: object
            properties:
              type:
                type: string
                enum:
                  - legal
                  - logo
                  - certificate
                description: Código que representa el tiop de paso que se requiere completar
              description:
                type: string
                description: Texto que describe el paso que se requiere completar y que puedes usar para mostrárselo al usuario.
        legal:
          type: object
          description: Datos fiscales de la empresa.
          properties:
            name:
              type: string
              description: Nombre comercial de la organización.
            legal_name:
              type: string
              description: |
                Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.).
            tax_system:
              type: string
              example: "601"
              maxLength: 3
              minLength: 3
              description: Código de Régimen Fiscal, del [catálogo del SAT](#tipo-de-régimen).
            website:
              type: string
              description: Sitio web de la organización, que se utilizará al enviar la factura por correo electrónico.
            phone:
              type: string
              description: Teléfono de la organización, que aparecerá en el PDF de la factura.
            address:
              allOf:
                - type: object
                  description: Domicilio fiscal de la organización.
                - $ref: "#/components/schemas/OrganizationAddress"
        customization:
          type: object
          description: |
            Configuración de personalización de la organización, que se utilizarán para reflejar el branding y
            las preferencias de PDFs de la organización. Estos datos se pueden actualizar en cualquier momento.
          properties:
            has_logo:
              type: boolean
              description: Indica si la organización ya tiene un logotipo cargado.
            color:
              type: string
              format: hex
              example: BADA55
              description: Color distintivo de la marca en representación Hexadecimal RGB de 6 caracteres.
            next_folio_number:
              type: integer
              example: 123
              description: Número de folio que se asignará a la siguiente factura en ambiente Live (y que se incrementará automáticamente por cada nueva factura).
            next_folio_number_test:
              type: integer
              example: 123
              description: Número de folio que se asignará a la siguiente factura en ambiente Test (y que se incrementará automáticamente por cada nueva factura).
            pdf_extra:
              type: object
              description: Configura qué campos opcionales se queiren mostrar en el PDF. El SAT no obliga a mostrar estos campos, pero pueden activarse según la preferencia de la organización.
              properties:
                codes:
                  type: boolean
                  default: true
                  description: |
                    Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
                product_key:
                  type: boolean
                  default: true
                  description: |
                    Mostrar la clave de producto-servicio.
                round_unit_price:
                  type: boolean
                  default: false
                  description: |
                    Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
                tax_breakdown:
                  type: boolean
                  default: true
                  description: |
                    Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
        certificate:
          type: object
          description: |
            Información últil sobre el certificado de sello digital (CSD) de la organización, que se utilizará para firmar las facturas.
          properties:
            has_certificates:
              type: boolean
              description: Indica si la organización ya tiene el Certificado de Sello Digital (CSD) cargado.
            updated_at:
              type: string
              format: date-time
              example: "2023-05-05T20:55:33.468Z"
              description: Fecha de la última actualización del certificado.
            expires_at:
              type: string
              format: date-time
              example: "2025-05-05T20:55:33.468Z"
              description: Fecha de expiración del certificado.

    OrganizationCreateInput:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre comercial de la organización.
    OrganizationLegalInput:
      type: object
      required:
        - name
        - legal_name
        - tax_system
        - address
      properties:
        name:
          type: string
          maxLength: 100
          description: Nombre comercial de la organización.
        legal_name:
          type: string
          maxLength: 100
          description: |
            Nombre Fiscal o Razón Social de la organización, *sin* el régimen societario (ej.: S.A. de C.V.).
        tax_system:
          type: string
          maxLength: 3
          minLength: 3
          example: "601"
          description: Código del Régimen Fiscal, del [catálogo del SAT](#régimen-fiscal).
        website:
          type: string
          description: Sitio web de la organización, que aparecerá en el PDF y correos de facturas y recibos.
        support_email:
          type: string
          description: Dirección de correo electrónico para aclaraciones. Aparecerá en el PDF y correos de facturas y recibos.
        phone:
          type: string
          description: Teléfono de la organización, que aparecerá en el PDF y correos de facturas y recibos.
        address:
          allOf:
            - type: object
              description: Domicilio fiscal de la organización emisora.
              required:
                - zip
                - street
                - exterior
            - $ref: "#/components/schemas/OrganizationAddress"
    OrganizationCertsInput:
      type: object
      required:
        - cerFile
        - keyFile
        - password
      properties:
        cerFile:
          type: string
          format: binary
          description: Contenido binario del archivo con extensión `.cer` del certificado CSD.
        keyFile:
          type: string
          format: binary
          description: Contenido binario del archivo con extensión `.key` del certificado CSD.
        password:
          type: string
          description: Contraseña de la llave del certificado.
    OrganizationLogoInput:
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
          description: |
            Contenido binario del archivo con la imagen que se usará como
            logotipo. Formatos soportados:
            - jpg
            - png
            - svg
    OrganizationCustomizationInput:
      type: object
      properties:
        color:
          type: string
          format: hex
          example: BADA55
          description: Color distintivo de la marca en representación Hexadecimal RGB de 6 caracteres.
        next_folio_number:
          type: integer
          example: 123
          description: Número de folio que se asignará a la siguiente factura en ambiente Live (y que se incrementará automáticamente por cada nueva factura).
        next_folio_number_test:
          type: integer
          example: 123
          description: Número de folio que se asignará a la siguiente factura en ambiente Test (y que se incrementará automáticamente por cada nueva factura).
        pdf_extra:
          type: object
          description: Configura qué campos opcionales se queiren mostrar en el PDF. El SAT no obliga a mostrar estos campos, pero pueden activarse según la preferencia de la organización.
          properties:
            codes:
              type: boolean
              default: true
              description: |
                Mostrar códigos de catálogos del SAT junto a sus descripciones. Ejemplo: “KGM Kilogramo”.
            product_key:
              type: boolean
              default: true
              description: |
                Mostrar la clave de producto-servicio.
            round_unit_price:
              type: boolean
              default: false
              description: |
                Redondear el precio unitario en el PDF a 2 decimales, pero conservar los 6 decimales en el XML.
            tax_breakdown:
              type: boolean
              default: true
              description: |
                Mostrar el desglose de impuestos en el PDF. Si se desactiva, sólo se mostratán los impuestos en los totales, pero no en el detalle de cada concepto.
    OrganizationReceiptsInput:
      type: object
      properties:
        periodicity:
          type: string
          default: month
          enum:
            - day
            - week
            - fortnight
            - month
            - two_months
          description: |
            Periodicidad con la que la empresa decide realizar una factura global
            (al público en general) por todos los recibos no facturados. Este
            valor se utiliza como default al crear una factura global.
        duration_days:
          type: integer
          default: 7
          description: |
            Días máximos para facturar por medio del portal de autofactura
            después de emitido el recibo y antes del último día del periodo
            definido por el atributo `periodicity`. El valor `0` desactiva esta
            opción, haciendo que los recibos expiren siempre el último día del
            periodo.
        next_folio_number:
          type: integer
          description: Número de folio que se asignará al siguiente recibo creado en esta organización en ambiente Live.
        next_folio_number_test:
          type: integer
          description: Número de folio que se asignará al siguiente recibo creado en esta organización en ambiente Test.
    DomainField:
      type: string
      maxLength: 50
      minLength: 4
      pattern: ^[a-z][a-z0-9-_]{2,48}[a-z0-9]$
      description: |
        Nombre del dominio. Se permiten caracteres alfanuméricos, sólo minúsculas,
        guión (-) y guión bajo (_). Debe empezar con una letra y
        terminar en letra o número.
    OrganizationDomainInput:
      type: object
      required:
        - domain
      properties:
        domain:
          $ref: "#/components/schemas/DomainField"
  securitySchemes:
    "Secret Live Key":
      type: http
      scheme: bearer
      bearerFormat: sk_live_XXXXXXXXXXXX
      description: Única por organización. Permite crear, obtener y administrar recursos en ambiente Live para una organización en específico.
    "Secret Test Key":
      type: http
      scheme: bearer
      bearerFormat: sk_test_XXXXXXXXXXXX
      description: Única por organización. Permite crear, obtener y administrar recursos en ambiente Test para una organización en específico.
    "Secret User Key":
      type: http
      scheme: bearer
      bearerFormat: sk_user_XXXXXXXXXXXX
      description: Única por cuenta. Permite crear y configurar organizaciones pertenecientes a la cuenta del usuario.
